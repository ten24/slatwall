{"version":3,"sources":["components/Account/AccountContent/AccountContent.js","components/SwSelect/SwSelect.js","components/Account/AccountPaymentMethods/AccountAddressForm.js","components/Account/AccountPaymentMethods/CreateOrEditAccountPaymentMethod.js"],"names":["AccountContent","history","useHistory","loc","useLocation","useSelector","state","content","pathname","substring","customBody","contentTitle","className","onClick","event","preventDefault","target","getAttribute","push","dangerouslySetInnerHTML","__html","SwSelect","id","value","onChange","options","disabled","name","map","index","key","connect","states","configuration","countries","isEdit","formik","useTranslation","t","i18n","htmlFor","values","handleChange","type","months","Array","from","length","_","i","years","fill","Date","getFullYear","year","ownProps","accountAddresses","userReducer","address","accountAddressID","streetAddress","city","stateCode","cardData","accountPaymentMethods","filter","card","accountPaymentMethodID","path","accountPaymentMethodName","activeFlag","creditCardLastFour","creditCardType","expirationMonth","expirationYear","hasErrors","nameOnCreditCard","useRedirect","location","redirect","setRedirect","dispatch","useDispatch","useFormik","enableReinitialize","initialValues","paymentMethodType","creditCardNumber","getMonth","toString","securityCode","onSubmit","addPaymentMethod","shouldRedirect","AccountLayout","title","handleSubmit","placeholder"],"mappings":"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","file":"static/js/17.d576c735.chunk.js","sourcesContent":["import { useSelector } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nconst AccountContent = () => {\n  let history = useHistory()\n  let loc = useLocation()\n  const content = useSelector(state => state.content[loc.pathname.substring(1)])\n  const { customBody = '', contentTitle = '' } = content || {}\n  return (\n    <>\n      <div className=\"d-flex justify-content-between align-items-center pt-lg-2 pb-4 pb-lg-5 mb-lg-3\">\n        <div className=\"d-flex justify-content-between w-100\">\n          <h2 className=\"h3\">{contentTitle}</h2>\n        </div>\n      </div>\n\n      <div\n        onClick={event => {\n          event.preventDefault()\n          if (event.target.getAttribute('href')) {\n            history.push(event.target.getAttribute('href'))\n          }\n        }}\n        dangerouslySetInnerHTML={{\n          __html: customBody,\n        }}\n      />\n    </>\n  )\n}\nexport default AccountContent\n","const SwSelect = ({ id, value, onChange, options, disabled }) => {\n  return (\n    <select disabled={disabled} className=\"form-control custom-select\" id={id} name={`['${id}']`} value={value} onChange={onChange}>\n      {options &&\n        options.map(({ key, name, value }, index) => {\n          return (\n            <option key={index} value={value}>\n              {key || name}\n            </option>\n          )\n        })}\n    </select>\n  )\n}\n\nexport default SwSelect\n","import { connect } from 'react-redux'\nimport SwSelect from '../../SwSelect/SwSelect'\nimport { useTranslation } from 'react-i18next'\n\nconst AccountAddressForm = ({ formik, states, countries }) => {\n  const { t, i18n } = useTranslation()\n\n  return (\n    <>\n      <h2>Billing Address</h2>\n      <div className=\"form-group\">\n        <label htmlFor=\"billingAddress.countryCode\">{t('frontend.account.countryCode')}</label>\n        <SwSelect id=\"billingAddress.countryCode\" name=\"['billingAddress.countryCode']\" value={formik.values['billingAddress.countryCode']} onChange={formik.handleChange} options={countries} />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"billingAddress.name\">{t('frontend.account.name')}</label>\n        <input className=\"form-control\" name=\"['billingAddress.name']\" type=\"text\" id=\"billingAddress.name\" value={formik.values['billingAddress.name']} onChange={formik.handleChange} />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"billingAddress.company\">{t('frontend.account.company')}</label>\n        <input className=\"form-control\" name=\"['billingAddress.company']\" type=\"text\" id=\"billingAddress.company\" value={formik.values['billingAddress.company']} onChange={formik.handleChange} />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"billingAddress.phoneNumber\">{t('frontend.account.phoneNumber')}</label>\n        <input className=\"form-control\" name=\"['billingAddress.phoneNumber']\" type=\"text\" id=\"billingAddress.phoneNumber\" value={formik.values['billingAddress.phoneNumber']} onChange={formik.handleChange} />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"billingAddress.streetAddress\">{t('frontend.account.streetAddress')}</label>\n        <input className=\"form-control\" name=\"['billingAddress.streetAddress']\" type=\"text\" id=\"billingAddress.streetAddress\" value={formik.values['billingAddress.streetAddress']} onChange={formik.handleChange} />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"billingAddress.street2Address\">{t('frontend.account.street2Address')}</label>\n        <input className=\"form-control\" name=\"['billingAddress.street2Address']\" type=\"text\" id=\"billingAddress.street2Address\" value={formik.values['billingAddress.street2Address']} onChange={formik.handleChange} />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"billingAddress.city\">{t('frontend.account.city')}</label>\n        <input className=\"form-control\" name=\"['billingAddress.city']\" type=\"text\" id=\"billingAddress.city\" value={formik.values['billingAddress.city']} onChange={formik.handleChange} />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"billingAddress.stateCode\">{t('frontend.account.stateCode')}</label>\n        <SwSelect id=\"billingAddress.stateCode\" name=\"['billingAddress.stateCode']\" value={formik.values['billingAddress.paymentMethod.stateCode']} onChange={formik.handleChange} options={states} />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"billingAddress.postalCode\">{t('frontend.account.postalCode')}</label>\n        <input className=\"form-control\" name=\"['billingAddress.postalCode']\" type=\"text\" id=\"billingAddress.postalCode\" value={formik.values['billingAddress.postalCode']} onChange={formik.handleChange} />\n      </div>\n    </>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    states: state.configuration.states,\n    countries: state.configuration.countries,\n    isEdit: false,\n  }\n}\nexport default connect(mapStateToProps)(AccountAddressForm)\n","import { useFormik } from 'formik'\nimport { connect, useDispatch } from 'react-redux'\nimport AccountContent from '../AccountContent/AccountContent'\nimport { AccountLayout } from '../AccountLayout/AccountLayout'\nimport AccountAddressForm from './AccountAddressForm'\nimport { toast } from 'react-toastify'\nimport useRedirect from '../../../hooks/useRedirect'\nimport SwSelect from '../../SwSelect/SwSelect'\nimport { addPaymentMethod } from '../../../actions/userActions'\nimport { useTranslation } from 'react-i18next'\n\nconst months = Array.from({ length: 12 }, (_, i) => {\n  return { key: i + 1, value: i + 1 }\n})\nconst years = Array(10)\n  .fill(new Date().getFullYear())\n  .map((year, index) => {\n    return { key: year + index, value: year + index }\n  })\n\nconst CreateOrEditAccountPaymentMethod = ({ cardData, isEdit, customBody, contentTitle, accountAddresses, accountPaymentMethods }) => {\n  const [redirect, setRedirect] = useRedirect({ location: '/my-account/cards' })\n  const dispatch = useDispatch()\n  const { t, i18n } = useTranslation()\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      accountPaymentMethodName: cardData.accountPaymentMethodName,\n      paymentMethodType: 'creditCard',\n      creditCardNumber: ``,\n      nameOnCreditCard: cardData.nameOnCreditCard,\n      expirationMonth: cardData.expirationMonth || new Date().getMonth() + 1,\n      expirationYear: cardData.expirationYear ? `${cardData.expirationYear}` : new Date().getFullYear().toString().substring(2),\n      securityCode: '',\n      'billingAccountAddress.accountAddressID': '',\n      'billingAddress.countryCode': 'US',\n      'billingAddress.name': '',\n      'billingAddress.company': '',\n      'billingAddress.phoneNumber': '',\n      'billingAddress.streetAddress': '',\n      'billingAddress.street2Address': '',\n      'billingAddress.city': '',\n      'billingAddress.stateCode': '',\n      'billingAddress.postalCode': '',\n    },\n    onSubmit: values => {\n      // TODO: Dispatch Actions\n      if (values['billingAccountAddress.accountAddressID'].length) {\n        delete values['billingAddress.countryCode']\n        delete values['billingAddress.name']\n        delete values['billingAddress.company']\n        delete values['billingAddress.phoneNumber']\n        delete values['billingAddress.streetAddress']\n        delete values['billingAddress.street2Address']\n        delete values['billingAddress.city']\n        delete values['billingAddress.stateCode']\n        delete values['billingAddress.postalCode']\n      }\n\n      if (!isEdit) {\n        delete values['paymentMethod.paymentMethodID']\n        dispatch(addPaymentMethod(values))\n      }\n      setRedirect({ ...redirect, shouldRedirect: true })\n    },\n  })\n  return (\n    <AccountLayout title={'Add Account Payment Method'}>\n      <AccountContent customBody={customBody} contentTitle={contentTitle} />\n      <form onSubmit={formik.handleSubmit}>\n        <div className=\"row\">\n          <div className={`col-sm-${isEdit ? 12 : 6}`}>\n            <div className=\"form-group\">\n              <label htmlFor=\"accountPaymentMethodName\">{t('frontend.account.payment_method.nickname')}</label>\n              <input className=\"form-control\" type=\"text\" id=\"accountPaymentMethodName\" value={formik.values.accountPaymentMethodName} onChange={formik.handleChange} />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"paymentMethodType\">{t('frontend.account.payment_method.heading')}</label>\n              <SwSelect id=\"paymentMethodType\" value={formik.values['paymentMethodType']} onChange={formik.handleChange} options={accountPaymentMethods} />\n            </div>\n            <hr />\n            <h2>{t('frontend.account.payment_method.cc_details')}</h2>\n            <div className=\"form-group\">\n              <label htmlFor=\"creditCardNumber\">{t('frontend.account.payment_method.ccn')}</label>\n              <input className=\"form-control\" type=\"text\" id=\"creditCardNumber\" placeholder={`************${cardData.creditCardLastFour}`} value={formik.values.creditCardNumber} onChange={formik.handleChange} />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"nameOnCreditCard\">{t('frontend.account.payment_method.name')}</label>\n              <input className=\"form-control\" type=\"text\" id=\"nameOnCreditCard\" value={formik.values.nameOnCreditCard} onChange={formik.handleChange} />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"expirationMonth\">{t('frontend.account.payment_method.expiration_month')}</label>\n              <SwSelect id=\"expirationMonth\" value={formik.values.expirationMonth} onChange={formik.handleChange} options={months} />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"expirationYear\">{t('frontend.account.payment_method.expiration_year')}</label>\n              <SwSelect id=\"expirationYear\" value={formik.values.expirationYear} onChange={formik.handleChange} options={years} />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"securityCode\">{t('frontend.account.payment_method.cvv')}</label>\n              <input className=\"form-control\" type=\"text\" placeholder={`***`} id=\"securityCode\" value={formik.values.securityCode} onChange={formik.handleChange} />\n            </div>\n          </div>\n          {!isEdit && (\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"accountAddressID\">{t('frontend.account.billing_address')}</label>\n                <SwSelect id=\"billingAccountAddress.accountAddressID\" value={formik.values['billingAccountAddress.accountAddressID']} onChange={formik.handleChange} options={accountAddresses} />\n              </div>\n              {!formik.values['billingAccountAddress.accountAddressID'] && <AccountAddressForm formik={formik} />}\n            </div>\n          )}\n        </div>\n        <div className=\"col-12\">\n          <hr className=\"mt-2 mb-3\" />\n          <div className=\"d-flex flex-wrap justify-content-end\">\n            <button type=\"submit\" className=\"btn btn-primary mt-3 mt-sm-0\" disabled={isEdit}>\n              {isEdit ? 'Save Credit Card Details' : 'Save New Card'}\n            </button>\n          </div>\n        </div>\n      </form>\n    </AccountLayout>\n  )\n}\n\n// This seems weird but this logic just complicated the essence of the component\nconst mapStateToProps = (state, ownProps) => {\n  let accountAddresses = state.userReducer.accountAddresses.map(({ address, accountAddressID }) => {\n    return { key: `${address.streetAddress} ${address.city}, ${address.stateCode}`, value: accountAddressID }\n  })\n\n  let cardData = state.userReducer.accountPaymentMethods.filter(card => {\n    return card.accountPaymentMethodID === ownProps.path\n  })\n  //1: \"Payment Method Type must be in list cash,check,creditCard,external,giftCard,termPayment\"\n  return {\n    accountAddresses: [...accountAddresses, { key: 'New', value: '' }],\n    cardData: cardData.length\n      ? cardData[0]\n      : {\n          accountPaymentMethodID: '',\n          accountPaymentMethodName: '',\n          activeFlag: false,\n          creditCardLastFour: '',\n          creditCardType: '',\n          expirationMonth: '',\n          expirationYear: '',\n          hasErrors: false,\n          nameOnCreditCard: '',\n        },\n    isEdit: cardData.length,\n    accountPaymentMethods: [\n      {\n        key: 'Credit Card',\n        value: 'creditCard',\n      },\n    ],\n  }\n}\nexport default connect(mapStateToProps)(CreateOrEditAccountPaymentMethod)\n"],"sourceRoot":""}