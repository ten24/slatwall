{"version":3,"sources":["directives/content/swcontentbasic.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAC9B,SAAS,CAAC,gBAAgB,EAAE;IAC7B,MAAM;IACN,cAAc;IACd,WAAW;IACX,aAAa;IACb,qBAAqB;IACpB,UACA,IAAI,EACJ,YAAY,EACZ,SAAS,EACT,WAAW,EACX,mBAAmB;QAElB,MAAM,CAAC;YACN,QAAQ,EAAE,IAAI;YACd,WAAW,EAAC,mBAAmB,GAAC,mBAAmB;YACnD,IAAI,EAAE,UAAS,KAAK,EAAE,OAAO,EAAC,KAAK;gBACtB,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAA,CAAC;oBAC/B,EAAE,CAAA,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAA,CAAC;wBACvC,IAAI,WAAW,CAAC;wBAChB,IAAI,OAAO,GAAG;4BACV,EAAE,EAAC,YAAY,CAAC,MAAM;yBACzB,CAAC;wBACF,WAAW,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;wBACzC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC;4BACrB,IAAI,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC;4BAC7B,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBAClC,CAAC,CAAC,CAAC;oBACP,CAAC;oBAAA,IAAI,CAAA,CAAC;wBACF,IAAI,IAAI,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;wBAC/B,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAClC,CAAC;oBAGF,IAAI,aAAa,CAAC;oBACjB,EAAE,CAAA,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAA,CAAC;wBAChD,IAAI,oBAAoB,CAAC;wBACzB,IAAI,OAAO,GAAG;4BACV,EAAE,EAAC,YAAY,CAAC,eAAe;yBAClC,CAAC;wBACF,oBAAoB,GAAG,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;wBACrD,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC;4BAC9B,IAAI,aAAa,GAAG,oBAAoB,CAAC,KAAK,CAAC;4BAC/C,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;4BAChD,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;4BAC1B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;wBAC9B,CAAC,CAAC,CAAC;oBAEP,CAAC;oBAAA,IAAI,CAAA,CAAC;wBACD,IAAI,aAAa,GAAG,SAAS,CAAC,UAAU,EAAE,CAAC;wBAC3C,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;oBACrD,CAAC;oBAED,IAAI,mBAAmB,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;oBAC9C,KAAK,CAAC,OAAO,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;gBAChE,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACF,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;oBAC1B,KAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;oBACnC,KAAK,CAAC,OAAO,CAAC,wBAAwB,EAAE,CAAC;gBAC7C,CAAC;YACd,CAAC;SACD,CAAC;IACH,CAAC;CACD,CAAC,CAAC","file":"directives/content/swcontentbasic.js","sourcesContent":["angular.module('slatwalladmin')\n.directive('swContentBasic', [\n'$log',\n'$routeParams',\n'$slatwall',\n'formService',\n'contentPartialsPath',\n\tfunction(\n\t$log,\n\t$routeParams,\n\t$slatwall,\n\tformService,\n\tcontentPartialsPath\n\t){\n\t\treturn {\n\t\t\trestrict: 'EA',\n\t\t\ttemplateUrl:contentPartialsPath+\"contentbasic.html\",\n\t\t\tlink: function(scope, element,attrs){\n                if(!scope.content.$$isPersisted()){\n                    if(angular.isDefined($routeParams.siteID)){\n                        var sitePromise;\n                        var options = {\n                            id:$routeParams.siteID\n                        };\n                        sitePromise = $slatwall.getSite(options);\n                        sitePromise.promise.then(function(){\n                            var site = sitePromise.value;\n                            scope.content.$$setSite(site);\n                        });\n                    }else{\n                        var site = $slatwall.newSite();   \n                        scope.content.$$setSite(site); \n                    }\n                    \n                    \n                   var parentContent;\n                    if(angular.isDefined($routeParams.parentContentID)){\n                        var parentContentPromise;\n                        var options = {\n                            id:$routeParams.parentContentID\n                        };\n                        parentContentPromise = $slatwall.getContent(options);\n                        parentContentPromise.promise.then(function(){\n                            var parentContent = parentContentPromise.value;\n                            scope.content.$$setParentContent(parentContent);\n                            $log.debug('contenttest');\n                            $log.debug(scope.content);\n                        });\n                        \n                    }else{\n                         var parentContent = $slatwall.newContent();\n                         scope.content.$$setParentContent(parentContent);\n                    }\n                   \n                    var contentTemplateType = $slatwall.newType();\n                    scope.content.$$setContentTemplateType(contentTemplateType);\n                }else{\n                    scope.content.$$getSite();\n                    scope.content.$$getParentContent();\n                    scope.content.$$getContentTemplateType();\n                }\n\t\t\t}\n\t\t};\n\t}\n]);\n\t\n"],"sourceRoot":"/source/"}