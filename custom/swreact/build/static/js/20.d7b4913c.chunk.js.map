{"version":3,"sources":["pages/ProductType/ProductType.js"],"names":["ProductType","id","useParams","history","useHistory","useGetProductType","request","setRequest","productsRoute","useSelector","getProductTypeProductListRoute","isFetching","isLoaded","params","urlTitle","makeRequest","Object","keys","data","length","to","listen","location","pathname","split","reverse","title","htmlTitle","childProductTypes","onSelect","push","showProducts","preFilter","productType_id","productTypeID","hide","className"],"mappings":"8LA+CeA,UAvCK,WAAO,IAAD,EAClBC,EAAOC,cAAPD,GACAE,EAAUC,cAFQ,EAGMC,cAHN,mBAGjBC,EAHiB,KAGRC,EAHQ,KAIlBC,EAAgBC,YAAYC,KAKlC,OAHKJ,EAAQK,YAAeL,EAAQM,UAClCL,EAAW,2BAAKD,GAAN,IAAeK,YAAY,EAAMC,UAAU,EAAOC,OAAQ,CAAEC,SAAUb,GAAMc,aAAa,MAEhGT,EAAQK,YAAcL,EAAQM,UAAiD,IAArCI,OAAOC,KAAKX,EAAQY,MAAMC,OAChE,cAAC,IAAD,CAAUC,GAAG,UAEtBjB,EAAQkB,QAAO,SAAAC,GACb,IAAMR,EAAWQ,EAASC,SAASC,MAAM,KAAKC,UAAU,GACxDlB,EAAW,2BAAKD,GAAN,IAAeY,KAAM,GAAIP,YAAY,EAAOC,UAAU,EAAOC,OAAQ,CAAEC,YAAYC,aAAa,QAI1G,eAAC,IAAD,WACE,cAAC,IAAD,CAAQW,MAAOpB,EAAQY,KAAKS,aAC3B,UAAArB,EAAQY,KAAKU,yBAAb,eAAgCT,QAAS,GACxC,cAAC,IAAD,CACEU,SAAU,SAAAf,GACRX,EAAQ2B,KAAR,WAAiBtB,EAAjB,YAAkCM,KAEpCI,KAAMZ,EAAQY,OAGjBZ,EAAQY,KAAKa,cACZ,cAAC,IAAD,CAAaC,UAAW,CAAEC,eAAgB3B,EAAQY,KAAKgB,eAAiBC,KAAM,CAAC,eAA/E,SACE,qBAAKC,UAAU,2DAAf,SACE,oBAAIA,UAAU,gCAAd,SAA+C9B,EAAQY,KAAKQ","file":"static/js/20.d7b4913c.chunk.js","sourcesContent":["import { Redirect, useHistory, useParams } from 'react-router-dom'\nimport { Layout, ProductTypeList } from '../../components'\nimport ListingPage from '../../components/Listing/Listing'\nimport { Helmet } from 'react-helmet'\nimport { useGetProductType } from '../../hooks/useAPI'\nimport { useSelector } from 'react-redux'\nimport { getProductTypeProductListRoute } from '../../selectors/configurationSelectors'\n\nconst ProductType = () => {\n  let { id } = useParams()\n  const history = useHistory()\n  const [request, setRequest] = useGetProductType()\n  const productsRoute = useSelector(getProductTypeProductListRoute)\n\n  if (!request.isFetching && !request.isLoaded) {\n    setRequest({ ...request, isFetching: true, isLoaded: false, params: { urlTitle: id }, makeRequest: true })\n  }\n  if (!request.isFetching && request.isLoaded && Object.keys(request.data).length === 0) {\n    return <Redirect to=\"/404\" />\n  }\n  history.listen(location => {\n    const urlTitle = location.pathname.split('/').reverse()[0]\n    setRequest({ ...request, data: {}, isFetching: false, isLoaded: false, params: { urlTitle }, makeRequest: true })\n  })\n\n  return (\n    <Layout>\n      <Helmet title={request.data.htmlTitle} />\n      {request.data.childProductTypes?.length > 0 && (\n        <ProductTypeList\n          onSelect={urlTitle => {\n            history.push(`/${productsRoute}/${urlTitle}`)\n          }}\n          data={request.data}\n        />\n      )}\n      {request.data.showProducts && (\n        <ListingPage preFilter={{ productType_id: request.data.productTypeID }} hide={['productType']}>\n          <div className=\"container d-lg-flex justify-content-between py-2 py-lg-3\">\n            <h5 className=\"h4 text-dark mb-0 font-accent\">{request.data.title}</h5>\n          </div>\n        </ListingPage>\n      )}\n    </Layout>\n  )\n}\n\nexport default ProductType\n"],"sourceRoot":""}