{"version":3,"names":[],"mappings":"","sources":["directives/content/swcontentnode.js"],"sourcesContent":["'use strict';\nangular.module('slatwalladmin').directive('swContentNode', [\n    '$log',\n    '$compile',\n    '$slatwall',\n    'partialsPath',\n    function ($log, $compile, $slatwall, partialsPath) {\n        return {\n            restrict: 'A',\n            scope: {\n                contentData: '=',\n                loadChildren: \"=\"\n            },\n            templateUrl: partialsPath + 'content/contentnode.html',\n            link: function (scope, element, attr) {\n                if (angular.isUndefined(scope.depth)) {\n                    scope.depth = 0;\n                }\n                if (angular.isDefined(scope.$parent.depth)) {\n                    scope.depth = scope.$parent.depth + 1;\n                }\n                var childContentColumnsConfig = [{\n                    propertyIdentifier: '_content.contentID',\n                    isVisible: false,\n                    isSearchable: false\n                }, {\n                    propertyIdentifier: '_content.title',\n                    isVisible: true,\n                    isSearchable: true\n                }, {\n                    propertyIdentifier: '_content.site.siteID',\n                    isVisible: false,\n                    isSearchable: false\n                }, {\n                    propertyIdentifier: '_content.site.siteName',\n                    isVisible: true,\n                    isSearchable: true\n                }, {\n                    propertyIdentifier: '_content.contentTemplateFile',\n                    persistent: false,\n                    setting: true,\n                    isVisible: true\n                }, {\n                    propertyIdentifier: '_content.allowPurchaseFlag',\n                    isVisible: true,\n                    isSearchable: true\n                }, {\n                    propertyIdentifier: '_content.productListingPageFlag',\n                    isVisible: true,\n                    isSearchable: true\n                }, {\n                    propertyIdentifier: '_content.activeFlag',\n                    isVisible: true,\n                    isSearchable: true\n                }];\n                var childContentOrderBy = [\n                    {\n                        \"propertyIdentifier\": \"_content.sortOrder\",\n                        \"direction\": \"DESC\"\n                    }\n                ];\n                scope.toggleChildContent = function (parentContentRecord) {\n                    if (angular.isUndefined(scope.childOpen) || scope.childOpen === false) {\n                        scope.childOpen = true;\n                        if (!scope.childrenLoaded) {\n                            scope.getChildContent(parentContentRecord);\n                        }\n                    }\n                    else {\n                        scope.childOpen = false;\n                    }\n                };\n                scope.getChildContent = function (parentContentRecord) {\n                    var childContentfilterGroupsConfig = [{\n                        \"filterGroup\": [{\n                            \"propertyIdentifier\": \"_content.parentContent.contentID\",\n                            \"comparisonOperator\": \"=\",\n                            \"value\": parentContentRecord.contentID\n                        }]\n                    }];\n                    var collectionListingPromise = $slatwall.getEntity('Content', {\n                        columnsConfig: angular.toJson(childContentColumnsConfig),\n                        filterGroupsConfig: angular.toJson(childContentfilterGroupsConfig),\n                        orderByConfig: angular.toJson(childContentOrderBy),\n                        allRecords: true\n                    });\n                    collectionListingPromise.then(function (value) {\n                        parentContentRecord.children = value.records;\n                        var index = 0;\n                        angular.forEach(parentContentRecord.children, function (child) {\n                            scope['child' + index] = child;\n                            element.after($compile('<tr class=\"childNode\" style=\"margin-left:{{depth*15||0}}px\" ng-if=\"childOpen\"  sw-content-node data-content-data=\"child' + index + '\"></tr>')(scope));\n                            index++;\n                        });\n                        scope.childrenLoaded = true;\n                    });\n                };\n                scope.childrenLoaded = false;\n                if (angular.isDefined(scope.loadChildren) && scope.loadChildren === true) {\n                    scope.toggleChildContent(scope.contentData);\n                }\n            }\n        };\n    }\n]);\n\n//# sourceMappingURL=../../directives/content/swcontentnode.js.map"],"file":"directives/content/swcontentnode.js","sourceRoot":"/source/"}