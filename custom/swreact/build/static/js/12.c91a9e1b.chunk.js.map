{"version":3,"sources":["pages/Brand/BrandBanner.js","pages/Brand/Brand.js"],"names":["BrandBanner","brandName","imageFile","brandDescription","length","style","maxHeight","marginRight","customPath","src","alt","type","dangerouslySetInnerHTML","__html","Brand","props","brandRoute","useSelector","getBrandRoute","productTypeBase","state","configuration","filtering","path","location","pathname","split","reverse","loc","useLocation","params","queryString","parse","search","arrayFormat","arrayFormatSeparator","history","useHistory","useGetEntity","brandResponse","setBrandRequest","useGetProductType","request","setRequest","productTypeUrl","useEffect","isFetching","isLoaded","urlTitle","brandUrlTitle","makeRequest","entity","Object","keys","data","to","listen","isNonBasePTAndListing","showProducts","Helmet","title","settings","brandHTMLTitleString","includeHome","brand","crumbs","breadcrumbs","map","crumb","productTypeName","filter","stringify","key","childProductTypes","onSelect","push","Listing","preFilter","productType_id","productTypeID","hide"],"mappings":"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","file":"static/js/12.c91a9e1b.chunk.js","sourcesContent":["import { SWImage } from '../../components'\nconst BrandBanner = ({ brandName, imageFile, brandDescription }) => {\n  return (\n    <div>\n      {/* Checking 'imageFile' length so that empty string does not get passed */}\n      {imageFile && imageFile.length > 5 ? <SWImage style={{ maxHeight: '150px', marginRight: '30px' }} customPath=\"/custom/assets/images/brand/logo/\" src={imageFile} alt={brandName} type=\"brand\" /> : <h1>{brandName}</h1>}\n      <span dangerouslySetInnerHTML={{ __html: brandDescription }} />\n    </div>\n  )\n}\n\nexport default BrandBanner\n","import { Layout, PageHeader, ProductTypeList } from '../../components'\nimport BrandBanner from './BrandBanner'\nimport ListingPage from '../../components/Listing/Listing'\nimport { Redirect, useHistory, useLocation } from 'react-router'\nimport { useGetEntity, useGetProductType } from '../../hooks/useAPI'\nimport { useSelector } from 'react-redux'\nimport queryString from 'query-string'\nimport { useEffect } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { getBrandRoute } from '../../selectors/configurationSelectors'\n\nconst Brand = props => {\n  const brandRoute = useSelector(getBrandRoute)\n  const productTypeBase = useSelector(state => state.configuration.filtering.productTypeBase)\n\n  const path = props.location.pathname.split('/').reverse()\n  const loc = useLocation()\n  let params = queryString.parse(loc.search, { arrayFormat: 'separator', arrayFormatSeparator: ',' })\n  const brandFilter = {\n    brand: path[0],\n  }\n  const history = useHistory()\n  let [brandResponse, setBrandRequest] = useGetEntity()\n  const [request, setRequest] = useGetProductType()\n  const productTypeUrl = params['key'] || productTypeBase\n\n  useEffect(() => {\n    if (!request.isFetching && !request.isLoaded) {\n      setRequest({ ...request, isFetching: true, isLoaded: false, params: { urlTitle: productTypeUrl, brandUrlTitle: path[0] }, makeRequest: true })\n    }\n    if (!brandResponse.isFetching && !brandResponse.isLoaded) {\n      setBrandRequest({ ...brandResponse, isFetching: true, isLoaded: false, entity: 'brand', params: { 'f:urlTitle': path[0] }, makeRequest: true })\n    }\n  }, [request, setRequest, productTypeUrl, setBrandRequest, brandResponse, path])\n\n  if (!request.isFetching && request.isLoaded && Object.keys(request.data).length === 0) {\n    return <Redirect to=\"/404\" />\n  }\n  history.listen(location => {\n    params = queryString.parse(location.search, { arrayFormat: 'separator', arrayFormatSeparator: ',' })\n    setRequest({ ...request, data: {}, isFetching: true, isLoaded: false, params: { urlTitle: params['key'] || productTypeBase, brandUrlTitle: path[0] }, makeRequest: true })\n  })\n  const isNonBasePTAndListing = !request.data.showProducts && productTypeUrl !== productTypeBase\n  return (\n    <Layout>\n      {brandResponse.isLoaded && brandResponse.data.length > 0 && <Helmet title={brandResponse.data[0].settings.brandHTMLTitleString} />}\n      {brandResponse.isLoaded && request.isLoaded && (\n        <PageHeader\n          title={isNonBasePTAndListing && request.data.title}\n          includeHome={true}\n          brand={params['key'] && [{ title: brandResponse.data[0].brandName, urlTitle: `/${brandRoute}/${brandResponse.data[0].urlTitle}` }]}\n          crumbs={request.data.breadcrumbs\n            .map(crumb => {\n              return { title: crumb.productTypeName, urlTitle: crumb.urlTitle }\n            })\n            .filter(crumb => crumb.urlTitle !== productTypeBase)\n            .filter(crumb => crumb.urlTitle !== productTypeUrl)\n            .map(crumb => {\n              return { ...crumb, urlTitle: `${loc.pathname}?${queryString.stringify({ key: crumb.urlTitle }, { arrayFormat: 'comma' })}` }\n            })}\n        >\n          <BrandBanner brandName={brandResponse.data[0].brandName} imageFile={brandResponse.data[0].imageFile} brandDescription={brandResponse.data[0].brandDescription} />\n        </PageHeader>\n      )}\n      {brandResponse.isLoaded && request.data.childProductTypes?.length > 0 && (\n        <ProductTypeList\n          data={request.data}\n          onSelect={urlTitle => {\n            params['key'] = urlTitle\n            history.push(`${loc.pathname}?${queryString.stringify(params, { arrayFormat: 'comma' })}`)\n          }}\n        />\n      )}\n      {request.data.showProducts && <ListingPage preFilter={{ brand: brandResponse.data[0].brandName, productType_id: request.data.productTypeID }} hide={['productType', 'brands']}></ListingPage>}\n    </Layout>\n  )\n}\n\nexport default Brand\n"],"sourceRoot":""}