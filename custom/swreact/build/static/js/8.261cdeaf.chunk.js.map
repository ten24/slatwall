{"version":3,"sources":["pages/BasicPageWithSidebar/Sidebar.js","pages/BasicPageWithSidebar/BasicPageWithSidebar.js","pages/Contact/ContactForm.js","pages/Contact/Contact.js"],"names":["Sidebar","history","useHistory","path","useLocation","pathname","split","reverse","allSidebar","useSelector","state","Object","keys","content","map","key","settings","contentTemplateFile","filter","item","includes","className","sort","a","b","sortOrder","index","onClick","event","target","getAttribute","preventDefault","window","location","href","push","dangerouslySetInnerHTML","__html","customBody","customSummary","length","title","src","replace","width","height","frameBorder","style","border","aria-hidden","tabIndex","BasicPageWithSidebar","children","toLowerCase","contentStore","ContactForm","t","useTranslation","contactFormID","configuration","forms","contact","formik","useFormik","enableReinitialize","initialValues","context","firstName","lastName","emailAddress","phoneNumber","subject","contactMethod","message","initialStatus","showForm","onSubmit","values","axios","method","withCredentials","url","sdkURL","data","queryString","stringify","arrayFormat","headers","then","response","setStatus","catch","error","status","name","handleSubmit","htmlFor","type","id","value","onChange","handleChange","checked","Contact"],"mappings":"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","file":"static/js/8.261cdeaf.chunk.js","sourcesContent":["import React from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\nconst Sidebar = () => {\n  let history = useHistory()\n  let loc = useLocation()\n  const path = loc.pathname.split('/').reverse()[0]\n  // Get All contnent of type sidebar\n  let allSidebar = useSelector(state => {\n    return Object.keys(state.content)\n      .map(key => {\n        if (state.content[key] && state.content[key].settings && state.content[key].settings.contentTemplateFile === 'sidebar.cfm') {\n\n          state.content[key].key = key\n          return state.content[key]\n        }\n        return null\n      })\n      .filter(item => {\n        return item\n      })\n      .map(content => {\n        return content.key.includes(`${path}/`) ? content : null\n      })\n      .filter(item => {\n        return item\n      })\n  }, [])\n  return (\n    <aside className=\"col-lg-4 pt-4 pt-lg-0\">\n      <div className=\"cz-sidebar-static rounded-lg box-shadow-lg p-4 mb-5\">\n        {allSidebar &&\n          allSidebar\n            .sort((a, b) => {\n              return a.sortOrder - b.sortOrder\n            })\n            .map((item, index) => {\n              return (\n                <div key={index}>\n                  <div\n                    onClick={event => {\n                      if (event.target.getAttribute('href')) {\n                        event.preventDefault()\n                        if (event.target.getAttribute('href').includes('http')) {\n                          window.location.href = event.target.getAttribute('href')\n                        } else {\n                          history.push(event.target.getAttribute('href'))\n                        }\n                      }\n                    }}\n                    dangerouslySetInnerHTML={{\n                      __html: item.customBody,\n                    }}\n                  />\n                  {item.customSummary.length && <iframe title=\"location Map\" src={item.customSummary.replace(/(<([^>]+)>)/gi, '')} width=\"400\" height=\"250\" frameBorder=\"0\" style={{ border: 0 }} aria-hidden=\"false\" tabIndex=\"0\" />}\n                </div>\n              )\n            })}\n      </div>\n    </aside>\n  )\n}\nexport default Sidebar\n","import { useSelector } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport Sidebar from './Sidebar'\n\nconst BasicPageWithSidebar = ({ children }) => {\n  let history = useHistory()\n  let loc = useLocation()\n  const path = loc.pathname.split('/').reverse()[0].toLowerCase()\n  const contentStore = useSelector(state => state.content[path]) || {}\n  const { title, customSummary } = contentStore\n\n  return (\n    <>\n      <div className=\"page-title-overlap bg-lightgray pt-4 pb-5\">\n        <div className=\"container d-lg-flex justify-content-between py-2 py-lg-3\">\n          <div className=\"order-lg-1 pr-lg-4 text-center text-lg-left\">\n            <h1 className=\"h3 mb-0\">{title || ''}</h1>\n          </div>\n        </div>\n      </div>\n      <div className=\"container pb-5 mb-2 mb-md-3\">\n        <div className=\"row\">\n          <section className=\"col-lg-8\">\n            <div className=\"mt-5 pt-5\">\n              <div\n                onClick={event => {\n                  event.preventDefault()\n                  if (event.target.getAttribute('href')) {\n                    if (event.target.getAttribute('href').includes('http')) {\n                      window.location.href = event.target.getAttribute('href')\n                    } else {\n                      history.push(event.target.getAttribute('href'))\n                    }\n                  }\n                }}\n                dangerouslySetInnerHTML={{\n                  __html: customSummary || '',\n                }}\n              />\n              {children}\n            </div>\n          </section>\n          <Sidebar />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default BasicPageWithSidebar\n","import { useSelector } from 'react-redux'\nimport { sdkURL, axios } from '../../services'\nimport { useTranslation } from 'react-i18next'\nimport { useFormik } from 'formik'\nimport queryString from 'query-string'\n\n/*\nThis is a really good example of how forms should be done.\nNot This is a custom form on the front end that will push data back to SlatwallCMS\nThis is not ment to be dynamic so any any custom forms will be custom created pages.\n*/\n\nconst ContactForm = () => {\n  const { t } = useTranslation()\n  const contactFormID = useSelector(state => state.configuration.forms.contact)\n\n  const formik = useFormik({\n    enableReinitialize: false,\n    initialValues: {\n      'formResponse.formID': contactFormID,\n      context: 'addFormResponse',\n      firstName: '',\n      lastName: '',\n      emailAddress: '',\n      phoneNumber: '',\n      subject: '',\n      contactMethod: '',\n      message: '',\n    },\n    initialStatus: { showForm: true, message: '' },\n    onSubmit: values => {\n      axios({\n        method: 'POST',\n        withCredentials: true, // default\n        url: `${sdkURL}api/scope/addFormResponse`,\n        data: queryString.stringify(values, { arrayFormat: 'comma' }),\n        headers: {\n          'Content-Type': `application/x-www-form-urlencoded`,\n        },\n      })\n        .then(response => {\n          formik.setStatus({ showForm: false, message: t('frontend.contact.success') })\n        })\n        .catch(error => {\n          formik.setStatus({ showForm: true, message: error.message })\n        })\n    },\n  })\n  return (\n    <>\n      {!formik.status.showForm && <p>{formik.status.message}</p>}\n      {formik.status.showForm && (\n        <form name=\"contact-us\" onSubmit={formik.handleSubmit}>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"firstName\">{t('frontend.contact.firstName')}</label>\n                <input className=\"form-control\" type=\"text\" id=\"firstName\" value={formik.values.firstName} onChange={formik.handleChange} />\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"lastName\">{t('frontend.contact.lastName')}</label>\n                <input className=\"form-control\" type=\"text\" id=\"lastName\" value={formik.values.lastName} onChange={formik.handleChange} />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"emailAddress\">{t('frontend.contact.emailAddress')}</label>\n                <input className=\"form-control\" type=\"text\" id=\"emailAddress\" value={formik.values.emailAddress} onChange={formik.handleChange} />\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"phoneNumber\">{t('frontend.contact.phoneNumber')}</label>\n                <input className=\"form-control\" type=\"tel\" id=\"phoneNumber\" value={formik.values.phoneNumber} onChange={formik.handleChange} />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"subject\">{t('frontend.contact.subject')}</label>\n                <input className=\"form-control\" type=\"text\" id=\"subject\" value={formik.values.subject} onChange={formik.handleChange} />\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"contactMethod\">{t('frontend.contact.contactMethod')}</label>\n                <br />\n                {[\n                  { name: 'Email', value: 'email' },\n                  { name: 'Phone', value: 'phone' },\n                ].map(({ name, value }) => {\n                  return (\n                    <div key={value} className=\"form-check form-check-inline custom-control custom-radio d-inline-flex\">\n                      <input name=\"contactMethod\" className=\"custom-control-input\" type=\"radio\" id={value} value={value} onChange={formik.handleChange} checked={formik.values.contactMethod === value} />\n                      <label className=\"custom-control-label\" htmlFor={value}>\n                        {name}\n                      </label>\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <div className=\"form-group\">\n                <label htmlFor=\"message\">{t('frontend.contact.message')}</label>\n                <textarea className=\"form-control\" type=\"text\" id=\"message\" value={formik.values.message} onChange={formik.handleChange} />\n              </div>\n            </div>\n          </div>\n          <button className=\"btn btn-primary btn-block\">\n            <span className=\"d-none d-sm-inline\">{t('frontend.core.submit')}</span>\n          </button>\n        </form>\n      )}\n    </>\n  )\n}\nexport default ContactForm\n","import { Layout } from '../../components'\nimport BasicPageWithSidebar from '../BasicPageWithSidebar/BasicPageWithSidebar'\nimport ContactForm from './ContactForm'\n\nconst Contact = () => {\n  return (\n    <Layout>\n      <BasicPageWithSidebar>\n        <ContactForm />\n      </BasicPageWithSidebar>\n    </Layout>\n  )\n}\n\nexport default Contact\n"],"sourceRoot":""}