{"version":3,"sources":["hooks/index.js","pages/ProductDetail/ProductDetail.js"],"names":["skuCodesToSkuIds","params","productOptionGroups","parsedOptions","queryString","parse","arrayFormat","arrayFormatSeparator","Object","keys","map","optionGroupCode","optionGroup","optCount","options","filter","option","optionCode","optionID","join","ProductDetail","props","location","useLocation","history","useHistory","useGetProductAvailableSkuOptions","skuOptions","getSkuOptionsRequest","useGetEntityByUrlTitle","newproduct","getPublicProduct","useState","pathname","currentPath","setCurrentPath","productTypeRoute","useSelector","getProductTypeRoute","search","productTypeBase","state","configuration","filtering","useEffect","isLoaded","length","console","log","cals","idList","data","defaultSelectedOptions","optionGroups","includes","payload","flat","push","stringify","assign","isFetching","urlTitle","split","reverse","error","entity","makeRequest","selectedOptionIDList","productID","skuID","skuid","unload","listen","loc","sku","window","scrollTo","top","behavior","to","className","title","productSeries","crumbs","breadcrumbs","crumb","productTypeName","settings","productHTMLTitleString","attributeSets","product","availableSkuOptions","productOptions"],"mappings":"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","file":"static/js/9.08ce5800.chunk.js","sourcesContent":["import useFormatCurrency from './useFormatCurrency'\nexport { useGetEntityByUrlTitle, useGetAccountCartsAndQuotes, useGetProductsByEntity, useResizedImageByProfileName, useGetSkuOptionDetails, useGetEntity, useGetEntityByID, useGetSku, useGetProductDetails, useGetBrand, useGetBrands, useGetProductList, useGetProducts, useGetAvailableShippingMethods, useGetAvailablePaymentMethods, useAddWishlistItem, useGetOrderDetails, useGetAllOrders, useAddOrderShippingAddress, useGetFavouriteProducts, useGetSkuList, useGetProductSkus, useGetProductAvailableSkuOptions, useGetProductSkuSelected, useGetProductImageGallery } from './useAPI'\nexport { useFormatDate, useFormatDateTime, useFormatTime } from './useFormatDate'\nexport { useRedirect, usePush } from './useRedirect'\nexport { useFormatCurrency }\n","// import PropTypes from 'prop-types'\nimport React, { useEffect, useState } from 'react'\n\nimport { BreadCrumb, Layout, RelatedProductsSlider, ProductPageHeader, ProductPageContent } from '../../components'\nimport { Redirect, useHistory, useLocation } from 'react-router-dom'\nimport { useGetProductAvailableSkuOptions, useGetEntityByUrlTitle } from '../../hooks'\nimport queryString from 'query-string'\nimport { Helmet } from 'react-helmet'\nimport { useSelector } from 'react-redux'\nimport { getProductTypeRoute } from '../../selectors'\nconst skuCodesToSkuIds = (params, productOptionGroups) => {\n  const parsedOptions = queryString.parse(params, { arrayFormat: 'separator', arrayFormatSeparator: ',' })\n  const temp = Object.keys(parsedOptions).map(optionGroupCode => {\n    return productOptionGroups\n      .map(optionGroup => {\n        const optCount = optionGroup.options.filter(option => {\n          return option.optionCode === parsedOptions[optionGroupCode]\n        })[0]\n        return optCount ? optCount.optionID : null\n      })\n      .filter(option => option)\n  })\n  return temp.join()\n}\n\nconst skuIdsToSkuCodes = (idList, productOptionGroups) => {\n  return productOptionGroups\n    .map(optionGroup =>\n      optionGroup.options\n        .filter(option => {\n          return idList.includes(option.optionID)\n        })\n        .map(option => {\n          let payload = {}\n          payload[optionGroup.optionGroupCode] = option.optionCode\n          return payload\n        })\n    )\n    .flat()\n}\nconst ProductDetail = props => {\n  let location = useLocation()\n  let history = useHistory()\n  let [skuOptions, getSkuOptionsRequest] = useGetProductAvailableSkuOptions()\n  let [newproduct, getPublicProduct] = useGetEntityByUrlTitle()\n  const [currentPath, setCurrentPath] = useState(location.pathname)\n  const productTypeRoute = useSelector(getProductTypeRoute)\n  const params = queryString.parse(location.search, { arrayFormat: 'separator', arrayFormatSeparator: ',' })\n  const productTypeBase = useSelector(state => state.configuration.filtering.productTypeBase)\n\n  useEffect(() => {\n    // Redirect to default sku if not provided\n    if (newproduct.isLoaded && !Object.keys(params).length) {\n      console.log('Redirect to Default Sku')\n      const cals = skuIdsToSkuCodes(newproduct.data.defaultSelectedOptions, newproduct.data.optionGroups)\n      history.push({\n        pathname: location.pathname,\n        search: queryString.stringify(Object.assign(...cals), { arrayFormat: 'comma' }),\n      })\n    }\n  }, [history, params, location.pathname, newproduct])\n  useEffect(() => {\n    if (!newproduct.isFetching && !newproduct.isLoaded) {\n      console.log('First and only product request')\n      const urlTitle = location.pathname.split('/').reverse()\n      getPublicProduct({\n        data: [],\n        error: '',\n        entity: 'product',\n        params: {\n          urlTitle: urlTitle[0],\n        },\n        makeRequest: true,\n        isFetching: true,\n        isLoaded: false,\n      })\n    }\n  }, [location.pathname, getPublicProduct, newproduct.isFetching, newproduct.isLoaded])\n\n  useEffect(() => {\n    // get the sku\n    if (newproduct.isLoaded && !skuOptions.isFetching && !skuOptions.isLoaded && !skuOptions.isFetching) {\n      console.log('First and only option request')\n      const selectedOptionIDList = skuCodesToSkuIds(location.search, newproduct.data.optionGroups)\n      getSkuOptionsRequest({\n        ...skuOptions,\n        isFetching: true,\n        isLoaded: false,\n        params: {\n          productID: newproduct.data.productID,\n          skuID: params.skuid,\n          // Accounts for First Load\n          selectedOptionIDList: selectedOptionIDList.length ? selectedOptionIDList : newproduct.data.defaultSelectedOptions,\n        },\n        makeRequest: true,\n      })\n    }\n  }, [getSkuOptionsRequest, skuOptions, params.skuid, location.search, newproduct])\n\n  // this will only get called on change\n  useEffect(() => {\n    const unload = history.listen(loc => {\n      if (currentPath !== loc.pathname) {\n        console.log('product change')\n        const urlTitle = loc.pathname.split('/').reverse()\n        setCurrentPath(loc.pathname)\n        getPublicProduct({\n          data: [],\n          error: '',\n          entity: 'product',\n          params: {\n            urlTitle: urlTitle[0],\n          },\n          makeRequest: true,\n          isFetching: true,\n          isLoaded: false,\n        })\n        getSkuOptionsRequest({\n          data: { sku: {} },\n          error: '',\n          params: {},\n          makeRequest: false,\n          isFetching: false,\n          isLoaded: false,\n        })\n        window.scrollTo({\n          top: 0,\n          behavior: 'smooth',\n        })\n      } else if (!newproduct.isFetching && newproduct.isLoaded && !skuOptions.isLoaded && !skuOptions.isFetching) {\n        console.log('option change')\n        const selectedOptionIDList = skuCodesToSkuIds(loc.search, newproduct.data.optionGroups)\n        getSkuOptionsRequest({\n          data: { sku: {} },\n          error: '',\n          isFetching: true,\n          isLoaded: false,\n          params: {\n            productID: newproduct.data.productID,\n            // Accounts for First Load\n            selectedOptionIDList,\n          },\n          makeRequest: true,\n        })\n      }\n    })\n    return () => {\n      unload()\n    }\n  }, [currentPath, setCurrentPath, history, getPublicProduct, newproduct, getSkuOptionsRequest, skuOptions])\n\n  // Do we have a valid product?\n  if (!newproduct.isFetching && newproduct.isLoaded && newproduct.data && Object.keys(newproduct.data).length === 0) {\n    return <Redirect to=\"/404\" />\n  }\n\n  return (\n    <Layout>\n      <div className=\"bg-light p-0\">\n        {newproduct.isLoaded && (\n          <ProductPageHeader title={newproduct.data.productSeries}>\n            <BreadCrumb\n              crumbs={newproduct.data.breadcrumbs\n                .map(crumb => {\n                  return { title: crumb.productTypeName, urlTitle: `/${productTypeRoute}/${crumb.urlTitle}` }\n                })\n                .filter(crumb => crumb.urlTitle !== `/${productTypeRoute}/${productTypeBase}`)}\n            />\n          </ProductPageHeader>\n        )}\n        {newproduct.isLoaded && <Helmet title={newproduct.data.settings.productHTMLTitleString} />}\n        {newproduct.isLoaded && newproduct.data.productID && skuOptions.isLoaded && <ProductPageContent attributeSets={newproduct.attributeSets} product={newproduct.data} sku={skuOptions.data.sku[0]} skuID={skuOptions.data.skuID} availableSkuOptions={skuOptions.data.availableSkuOptions} productOptions={newproduct.data.optionGroups} isFetching={skuOptions.isFetching || newproduct.isFetching} />}\n        {newproduct.isLoaded && newproduct.data.productID && <RelatedProductsSlider productID={newproduct.data.productID} />}\n      </div>\n    </Layout>\n  )\n}\n\nexport default ProductDetail\n"],"sourceRoot":""}