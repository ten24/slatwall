{"version":3,"sources":["components/Account/AccountLayout/AccountLayout.js","hooks/useRedirect.js","components/SWForm/SWForm.js","components/Account/CreateAccount/CreateAccount.js","components/Account/ForgotPassword/ForgotPassword.js","pages/MyAccount/MyAccount.js","pages/Account/Account.js"],"names":["AccountSidebar","t","useTranslation","user","useSelector","state","userReducer","dispatch","useDispatch","className","firstName","lastName","type","onClick","logout","to","AccountHeader","loc","useLocation","title","content","pathname","substring","PromptLayout","children","AccountLayout","useRedirect","shouldRedirect","location","time","history","useHistory","useState","redirect","setRedirect","useEffect","timer","setTimeout","push","clearTimeout","usePush","defaults","search","SWForm","formik","subTitle","primaryButtontext","event","preventDefault","target","getAttribute","dangerouslySetInnerHTML","__html","onSubmit","handleSubmit","SWInput","token","label","wrapperClasses","showErrors","htmlFor","id","value","values","onChange","handleChange","errors","CreateAccount","signupSchema","Yup","shape","required","phoneNumber","password","passwordConfirm","emailAddress","email","emailAddressConfirm","useFormik","initialValues","returnTokenFlag","createAuthenticationFlag","validationSchema","SlatwalApiService","account","create","then","response","isSuccess","success","failureActions","length","toast","error","JSON","stringify","ForgotPassword","forgotPassword","AccountLogin","React","lazy","AccountOverview","AccountProfile","AccountFavorites","AccountAddresses","CreateOrEditAccountAddress","AccountOrderDetail","AccountPaymentMethods","AccountOrderHistory","CreateOrEditAccountPaymentMethod","MyAccount","match","useRouteMatch","isAuthenticated","isFetching","accountID","getUser","includes","params","queryString","parse","path","split","reverse","forwardState","Account"],"mappings":"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","file":"static/js/10.5e109f2a.chunk.js","sourcesContent":["import { Link, useLocation } from 'react-router-dom'\nimport { BreadCrumb } from '../..'\nimport { logout } from '../../../actions/authActions'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\n\nconst AccountSidebar = () => {\n  const { t } = useTranslation()\n  // const contentStore = useSelector(state => state.content)\n  const user = useSelector(state => state.userReducer)\n\n  // const pages = getAccountData(contentStore)\n  const dispatch = useDispatch()\n  return (\n    <aside className=\"col-lg-4 pt-4 pt-lg-0\">\n      <div className=\"cz-sidebar-static rounded-lg box-shadow-lg px-0 pb-0 mb-5 mb-lg-0\">\n        <div className=\"px-4 mb-4\">\n          <div className=\"media align-items-center\">\n            <div className=\"media-body\">\n              <h3 className=\"font-size-base mb-0\">{`${user.firstName} ${user.lastName}`}</h3>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  dispatch(logout())\n                }}\n                className=\"link-button text-accent font-size-sm\"\n              >\n                {t('frontend.core.logout')}\n              </button>\n              <br />\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-secondary px-4 py-3\">\n          <h3 className=\"font-size-sm mb-0 text-muted\">\n            <Link to=\"/my-account\" className=\"nav-link-style active\">\n              {t('frontend.account.overview')}\n            </Link>\n          </h3>\n        </div>\n        <ul className=\"list-unstyled mb-0\">\n          <li className=\"border-bottom mb-0\">\n            <Link to=\"/my-account/orders\" className=\"nav-link-style d-flex align-items-center px-4 py-3\">\n              <i className=\"far fa-shopping-bag pr-2\" /> {t('frontend.account.order_history')}\n            </Link>\n          </li>\n          <li className=\"border-bottom mb-0\">\n            <Link to=\"/my-account/profile\" className=\"nav-link-style d-flex align-items-center px-4 py-3\">\n              <i className=\"far fa-user pr-2\" /> {t('frontend.account.profile_info')}\n            </Link>\n          </li>\n          <li className=\"border-bottom mb-0\">\n            <Link to=\"/my-account/favorites\" className=\"nav-link-style d-flex align-items-center px-4 py-3\">\n              <i className=\"far fa-heart pr-2\" /> {t('frontend.account.favorties')}\n            </Link>\n          </li>\n          <li className=\"border-bottom mb-0\">\n            <Link to=\"/my-account/addresses\" className=\"nav-link-style d-flex align-items-center px-4 py-3\">\n              <i className=\"far fa-map-marker-alt pr-2\" /> {t('frontend.account.addresses')}\n            </Link>\n          </li>\n          <li className=\"mb-0\">\n            <Link to=\"/my-account/cards\" className=\"nav-link-style d-flex align-items-center px-4 py-3\">\n              <i className=\"far fa-credit-card pr-2\" />\n              {t('frontend.account.payment_methods')}\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </aside>\n  )\n}\n\nconst AccountHeader = () => {\n  let loc = useLocation()\n  const content = useSelector(state => state.content[loc.pathname.substring(1)])\n  const { title } = content || {}\n  return (\n    <div className=\"page-title-overlap bg-lightgray pt-4\">\n      <div className=\"container d-lg-flex justify-content-between py-2 py-lg-3\">\n        <div className=\"order-lg-2 mb-3 mb-lg-0 pt-lg-2\">\n          <BreadCrumb />\n        </div>\n        <div className=\"order-lg-1 pr-lg-4 text-center text-lg-left\">\n          <h1 className=\"h3 mb-0\">{title}</h1>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst MyAccountLayout = ({ children }) => {\n  return (\n    <>\n      <AccountHeader />\n      <div className=\"container pb-5 mb-2 mb-md-3\">\n        <div className=\"row\">\n          <AccountSidebar />\n          <section className=\"col-lg-8\">{children}</section>\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst PromptLayout = ({ children }) => {\n  return (\n    <div className=\"container py-4 py-lg-5 my-4\">\n      <div className=\"row d-flex justify-content-center\">\n        <div className=\"col-md-6\">\n          <div className=\"card box-shadow\">\n            <div className=\"card-body\">{children}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst AccountLayout = MyAccountLayout\nexport { AccountLayout, PromptLayout }\n","import { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nconst useRedirect = ({ shouldRedirect = false, location = '/', time = 2000 }) => {\n  const history = useHistory()\n  const [redirect, setRedirect] = useState(shouldRedirect)\n\n  useEffect(() => {\n    if (redirect) {\n      const timer = setTimeout(() => {\n        history.push(location)\n      }, time)\n      return () => clearTimeout(timer)\n    }\n  }, [history, redirect, location, time])\n  return [redirect, setRedirect]\n}\nexport default useRedirect\n\nexport const usePush = defaults => {\n  const history = useHistory()\n  const [redirect, setRedirect] = useState({ shouldRedirect: false, location: '/', search: '', time: 2000, ...defaults })\n\n  useEffect(() => {\n    if (redirect.shouldRedirect) {\n      const timer = setTimeout(() => {\n        history.push({\n          pathname: redirect.location,\n          search: redirect.search,\n        })\n      }, redirect.time)\n      return () => clearTimeout(timer)\n    }\n  }, [history, redirect])\n  return [redirect, setRedirect]\n}\n","import { useHistory } from 'react-router'\n\nconst SWForm = ({ formik, children, title = '', subTitle = '', primaryButtontext = '' }) => {\n  let history = useHistory()\n\n  return (\n    <>\n      <h2 className=\"h4 mb-1\">{title}</h2>\n      <p\n        className=\"font-size-sm text-muted mb-4\"\n        onClick={event => {\n          event.preventDefault()\n          if (event.target.getAttribute('href')) {\n            history.push(event.target.getAttribute('href'))\n          }\n        }}\n        dangerouslySetInnerHTML={{\n          __html: subTitle,\n        }}\n      />\n      <form onSubmit={formik.handleSubmit}>\n        {children}\n        <hr className=\"mt-4\" />\n        <div className=\"text-right pt-4\">\n          <button className=\"btn btn-primary\" type=\"submit\">\n            {primaryButtontext}\n          </button>\n        </div>\n      </form>\n    </>\n  )\n}\n\nconst SWInput = ({ formik, token = '', label = '', wrapperClasses = 'row', type = 'text', showErrors = true }) => {\n  return (\n    <div className={wrapperClasses}>\n      <div className=\"col form-group\">\n        <label className=\"control-label\" htmlFor={token}>\n          {label}\n        </label>\n        <input className=\"form-control\" type={type} id={token} value={formik.values[token]} onChange={formik.handleChange} />\n        {showErrors && formik.errors[token] && <span className=\"form-error-msg\">{formik.errors[token]}</span>}\n      </div>\n    </div>\n  )\n}\n\nexport { SWForm, SWInput }\n","import { useFormik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { SlatwalApiService } from '../../../services'\nimport { SWForm, SWInput } from '../../SWForm/SWForm'\nimport { PromptLayout } from '../AccountLayout/AccountLayout'\nimport useRedirect from '../../../hooks/useRedirect'\nimport * as Yup from 'yup'\n\nconst CreateAccount = () => {\n  // eslint-disable-next-line no-unused-vars\n  const [redirect, setRedirect] = useRedirect({ location: '/my-account' })\n  const signupSchema = Yup.object().shape({\n    firstName: Yup.string().required('Required'),\n    lastName: Yup.string().required('Required'),\n    phoneNumber: Yup.string().required('Required'),\n    password: Yup.string().required('Required'),\n    passwordConfirm: Yup.string().required('Required'),\n    emailAddress: Yup.string().email('Invalid email').required('Required'),\n    emailAddressConfirm: Yup.string().email('Invalid email').required('Required'),\n  })\n\n  const formik = useFormik({\n    initialValues: {\n      returnTokenFlag: '1',\n      createAuthenticationFlag: '1',\n      firstName: '',\n      lastName: '',\n      phoneNumber: '',\n      emailAddress: '',\n      emailAddressConfirm: '',\n      password: '',\n      passwordConfirm: '',\n    },\n    validationSchema: signupSchema,\n    onSubmit: values => {\n      SlatwalApiService.account.create(values).then(response => {\n        if (response.isSuccess()) {\n          if (!response.success().failureActions.length) {\n            toast.success('Success')\n            setRedirect({ shouldRedirect: true })\n          }\n          toast.error(JSON.stringify(response.success().errors))\n        } else {\n          toast.success('Error')\n        }\n      })\n    },\n  })\n  return (\n    <PromptLayout>\n      <SWForm formik={formik} primaryButtontext=\"Create Account & Continue\" title=\"Create Account\">\n        <div className=\"row\">\n          <SWInput formik={formik} token=\"firstName\" label=\"First Name\" wrapperClasses=\"\" />\n          <SWInput formik={formik} token=\"lastName\" label=\"Last Name\" wrapperClasses=\"\" />\n        </div>\n        <SWInput formik={formik} token=\"phoneNumber\" label=\"Phone Number\" type=\"phone\" />\n        <SWInput formik={formik} token=\"emailAddress\" label=\"Email Address\" type=\"email\" />\n        <SWInput formik={formik} token=\"emailAddressConfirm\" label=\"Confirm Email Address\" type=\"email\" />\n        <SWInput formik={formik} token=\"password\" label=\"Password\" type=\"password\" />\n        <SWInput formik={formik} token=\"passwordConfirm\" label=\"Confirm Password\" type=\"password\" />\n      </SWForm>\n    </PromptLayout>\n  )\n}\n\nexport default CreateAccount\n","import { useFormik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { SlatwalApiService } from '../../../services'\nimport { SWForm, SWInput } from '../../SWForm/SWForm'\nimport { PromptLayout } from '../AccountLayout/AccountLayout'\nimport useRedirect from '../../../hooks/useRedirect'\n\nconst ForgotPassword = () => {\n  // eslint-disable-next-line no-unused-vars\n  const [redirect, setRedirect] = useRedirect({ location: '/my-account' })\n\n  const formik = useFormik({\n    initialValues: {\n      emailAddress: '',\n    },\n    onSubmit: values => {\n      SlatwalApiService.account.forgotPassword(values).then(response => {\n        if (response.isSuccess()) {\n          if (!response.success().failureActions.length) {\n            toast.success('Success')\n            setRedirect({ shouldRedirect: true })\n          }\n          toast.error(JSON.stringify(response.success().errors))\n        } else {\n          toast.success('Failure')\n        }\n      })\n    },\n  })\n  return (\n    <PromptLayout>\n      <SWForm formik={formik} title=\"Forgot Password\" primaryButtontext=\"Send Me Reset Email\">\n        <SWInput formik={formik} token=\"emailAddress\" label=\"Email Address\" type=\"email\" />\n      </SWForm>\n    </PromptLayout>\n  )\n}\n//\nexport default ForgotPassword\n","import React, { useEffect } from 'react'\nimport { Layout } from '../../components'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Switch, Route, useRouteMatch, useLocation, Redirect } from 'react-router-dom'\nimport { getUser } from '../../actions/userActions'\nimport CreateAccount from '../../components/Account/CreateAccount/CreateAccount'\nimport ForgotPassword from '../../components/Account/ForgotPassword/ForgotPassword'\nimport { isAuthenticated } from '../../utils'\nimport queryString from 'query-string'\n\n// I think we should be prelaoding these https://medium.com/maxime-heckel/react-lazy-a-take-on-preloading-views-cc90be869f14\nconst AccountLogin = React.lazy(() => import('../../components/Account/AccountLogin/AccountLogin'))\nconst AccountOverview = React.lazy(() => import('../../components/Account/AccountOverview/AccountOverview'))\nconst AccountProfile = React.lazy(() => import('../../components/Account/AccountProfile/AccountProfile'))\nconst AccountFavorites = React.lazy(() => import('../../components/Account/AccountFavorites/AccountFavorites'))\nconst AccountAddresses = React.lazy(() => import('../../components/Account/AccountAddresses/AccountAddresses'))\nconst CreateOrEditAccountAddress = React.lazy(() => import('../../components/Account/AccountAddresses/CreateOrEditAccountAddress'))\nconst AccountOrderDetail = React.lazy(() => import('../../components/Account/AccountOrderDetail/AccountOrderDetail'))\nconst AccountPaymentMethods = React.lazy(() => import('../../components/Account/AccountPaymentMethods/AccountPaymentMethods'))\nconst AccountOrderHistory = React.lazy(() => import('../../components/Account/AccountOrderHistory/AccountOrderHistory'))\nconst CreateOrEditAccountPaymentMethod = React.lazy(() => import('../../components/Account/AccountPaymentMethods/CreateOrEditAccountPaymentMethod'))\n// eslint-disable-next-line no-unused-vars\nconst pageComponents = {\n  AccountLogin,\n  AccountOverview,\n  AccountProfile,\n  AccountFavorites,\n  AccountAddresses,\n  CreateOrEditAccountAddress,\n  AccountOrderDetail,\n  AccountPaymentMethods,\n  AccountOrderHistory,\n  CreateOrEditAccountPaymentMethod,\n}\nconst MyAccount = () => {\n  let match = useRouteMatch()\n  let loc = useLocation()\n  const dispatch = useDispatch()\n  const user = useSelector(state => state.userReducer)\n\n  useEffect(() => {\n    if (isAuthenticated() && !user.isFetching && !user.accountID.length) {\n      dispatch(getUser())\n    }\n  }, [dispatch, user])\n  if (isAuthenticated() && loc.search.includes('redirect=')) {\n    const params = queryString.parse(loc.search)\n    return <Redirect to={params.redirect} />\n  }\n\n  const path = loc.pathname.split('/').reverse()\n  return (\n    <Layout>\n      {isAuthenticated() && (\n        <Switch>\n          <Route path={`${match.path}/addresses/:id`}>\n            <CreateOrEditAccountAddress path={path[0]} />\n          </Route>\n          <Route path={`${match.path}/addresses`}>\n            <AccountAddresses />\n          </Route>\n          <Route path={`${match.path}/cards/:id`}>\n            <CreateOrEditAccountPaymentMethod path={path[0]} />\n          </Route>\n          <Route path={`${match.path}/cards`}>\n            <AccountPaymentMethods />\n          </Route>\n          <Route path={`${match.path}/favorites`}>\n            <AccountFavorites />\n          </Route>\n          <Route path={`${match.path}/orders/:id`}>\n            <AccountOrderDetail path={path[0]} forwardState={loc.state} />\n          </Route>\n          <Route path={`${match.path}/orders`}>\n            <AccountOrderHistory />\n          </Route>\n          <Route path={`${match.path}/profile`}>\n            <AccountProfile />\n          </Route>\n          <Route path={match.path}>{isAuthenticated() && <AccountOverview />}</Route>\n        </Switch>\n      )}\n      {!isAuthenticated() && (\n        <Switch>\n          <Route path={`${match.path}/createAccount`}>\n            <CreateAccount />\n          </Route>\n          <Route path={`${match.path}/forgotPassword`}>\n            <ForgotPassword />\n          </Route>\n          <Route path={match.path}>\n            <AccountLogin />\n          </Route>\n        </Switch>\n      )}\n    </Layout>\n  )\n}\n\nexport default MyAccount\n","import MyAccount from '../MyAccount/MyAccount'\n\nconst Account = () => {\n  return <MyAccount />\n}\n\nexport default Account\n"],"sourceRoot":""}