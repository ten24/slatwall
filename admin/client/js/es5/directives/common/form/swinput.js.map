{"version":3,"names":[],"mappings":"","sources":["directives/common/form/swinput.js"],"sourcesContent":["/**\n * This validate directive will look at the current element, figure out the context (save, edit, delete) and\n * validate based on that context as defined in the validation properties object.\n */\n'use strict';\nangular.module('slatwalladmin').directive('swInput', ['$log', '$compile', 'utilityService', function ($log, $compile, utilityService) {\n    var getValidationDirectives = function (propertyDisplay) {\n        var spaceDelimitedList = '';\n        var name = propertyDisplay.property;\n        var form = propertyDisplay.form.$$swFormInfo;\n        $log.debug(\"Name is:\" + name + \" and form is: \" + form);\n        var validations = propertyDisplay.object.validations.properties[propertyDisplay.property];\n        $log.debug(\"Validations: \");\n        var validationsForContext = [];\n        //get the form context and the form name.\n        var formContext = propertyDisplay.form.$$swFormInfo.context;\n        var formName = propertyDisplay.form.$$swFormInfo.name;\n        $log.debug(\"Form context is: \");\n        $log.debug(formContext);\n        $log.debug(\"Form Name: \");\n        $log.debug(formName);\n        //get the validations for the current element.\n        var propertyValidations = propertyDisplay.object.validations.properties[name];\n        /*\n         * Investigating why number inputs are not working.\n         * */\n        //check if the contexts match.\n        if (angular.isObject(propertyValidations)) {\n            //if this is a procesobject validation then the context is implied\n            if (angular.isUndefined(propertyValidations[0].contexts) && propertyDisplay.object.metaData.isProcessObject) {\n                propertyValidations[0].contexts = propertyDisplay.object.metaData.className.split('_')[1];\n            }\n            if (propertyValidations[0].contexts === formContext) {\n                $log.debug(\"Matched\");\n                for (var prop in propertyValidations[0]) {\n                    if (prop != \"contexts\" && prop !== \"conditions\") {\n                        spaceDelimitedList += (\" swvalidation\" + prop.toLowerCase() + \"='\" + propertyValidations[0][prop] + \"'\");\n                    }\n                }\n            }\n            $log.debug(spaceDelimitedList);\n        }\n        //loop over validations that are required and create the space delimited list\n        $log.debug(validations);\n        //get all validations related to the form context;\n        $log.debug(form);\n        $log.debug(propertyDisplay);\n        angular.forEach(validations, function (validation, key) {\n            if (utilityService.listFind(validation.contexts.toLowerCase(), form.context.toLowerCase()) !== -1) {\n                $log.debug(\"Validations for context\");\n                $log.debug(validation);\n                validationsForContext.push(validation);\n            }\n        });\n        //now that we have all related validations for the specific form context that we are working with collection the directives we need\n        //getValidationDirectiveByType();\n        return spaceDelimitedList;\n    };\n    var getTemplate = function (propertyDisplay) {\n        var template = '';\n        var validations = '';\n        if (!propertyDisplay.noValidate) {\n            validations = getValidationDirectives(propertyDisplay);\n        }\n        if (propertyDisplay.fieldType === 'text') {\n            template = '<input type=\"text\" class=\"form-control\" ' + 'ng-model=\"propertyDisplay.object.data[propertyDisplay.property]\" ' + 'ng-disabled=\"!propertyDisplay.editable\" ' + 'ng-show=\"propertyDisplay.editing\" ' + 'name=\"' + propertyDisplay.property + '\" ' + validations + 'id=\"swinput' + utilityService.createID(26) + '\"' + ' />';\n        }\n        else if (propertyDisplay.fieldType === 'password') {\n            template = '<input type=\"password\" class=\"form-control\" ' + 'ng-model=\"propertyDisplay.object.data[propertyDisplay.property]\" ' + 'ng-disabled=\"!propertyDisplay.editable\" ' + 'ng-show=\"propertyDisplay.editing\" ' + 'name=\"' + propertyDisplay.property + '\" ' + validations + 'id=\"swinput' + utilityService.createID(26) + '\"' + ' />';\n        }\n        /*else if(propertyDisplay.fieldType === \"number\"){\n            console.info(\"Found Number Input\");\n            template = '<input type=\"number\" class=\"form-control\" '+\n            'ng-model=\"propertyDisplay.object.data[propertyDisplay.property]\" '+\n            'ng-disabled=\"!propertyDisplay.editable\" '+\n            'ng-show=\"propertyDisplay.editing\" '+\n            'name=\"'+propertyDisplay.property+'\" ' +\n            validations+\n            'id=\"swinput'+utilityService.createID(26)+'\"'+\n            ' />';\n            $log.debug(template);\n            $log.debug(validations);\n        }*/\n        return template;\n    };\n    return {\n        require: '^form',\n        scope: {\n            propertyDisplay: \"=\"\n        },\n        restrict: \"E\",\n        //adding model and form controller\n        link: function (scope, element, attr, formController) {\n            //renders the template and compiles it\n            element.html(getTemplate(scope.propertyDisplay));\n            $compile(element.contents())(scope);\n        }\n    };\n}]);\n\n//# sourceMappingURL=../../../directives/common/form/swinput.js.map"],"file":"directives/common/form/swinput.js","sourceRoot":"/source/"}