<?xml version="1.0"?>
<!--<
This ANT build can be used to execute your tests with automation using our included runner.cfm.
You can executes directories, bundles and so much more.  It can also produce JUnit reports using the
ANT junitreport tag.  This is meant to be a template for you to spice up.

There are two targets you can use: run and run-junit

Execute the default 'run' target
ant -f test.xml
OR
ant -f test.xml run

Execute the 'run-junit' target
ant -f test.xml run-junit

PLEASE NOTE THAT YOU MUST ALTER THE RUNNER'S URL ACCORDING TO YOUR ENVIRONMENT.
-->
<project name="Slatwall" basedir="." default="run-junit">

	<exec executable="hostname" outputproperty="computer.hostname"/>

	<!-- what's the name of the directory where your tests live? Note: this is just the name of the directory, not the full path-->
	<property name="slatwall.test.dir.name" value="meta/tests/test-runner" />

	<!-- where do your tests live, relative to this build file? test.dir.location will be a full path to a directory -->
	<property name="slatwall.test.dir.location" location="./" />

	<!-- what is the cfc dot-notation path to that directory, as ColdFusion sees it? -->
	<property name="slatwall.test.cfcpath" value="Slatwall.meta.tests" />

	<!-- what server and port should your tests run against? These defaults only apply if the properties are not set in $user.name}.properties -->
	<property name="slatwall.test.server" value="${computer.hostname}" />
	<property name="slatwall.test.serverport" value="8888" />
	<property name="slatwall.test.datasource" value="Slatwall" />
	<property name="slatwall.outputfile" value="results"/>
	

	<!-- what "runner" URL should the tests hit. In this example, you'd be hitting http://localhost:80/DirectoryNameOfYourProject/test/HttpAntRunner.cfc  Simply copy mxunit/samples/HttpAntRunner.cfc into your test directory! -->
	<property name="slatwall.test.runner" value="/${slatwall.test.dir.name}/index.cfm" />

	<!-- this is where the xml and html will live for the report generator and Jenkins -->
	<property name="slatwall.test.output" location="testresults" />
	<property name="slatwall.test.output.xml" location="${slatwall.test.output}/xml" />
	<property name="slatwall.test.output.html" location="${slatwall.test.output}/html" />

	<!-- dump the properties -->
	<echoproperties />
	

     <!-- <THE URL TO THE RUNNER, PLEASE CHANGE ACCORDINGLY-->
     <!--<property name="url.runner"             value="cf10.localhost${slatwall.test.runner}"/>-->
     <property name="url.runner"             value="${slatwall.test.server}:${slatwall.test.serverport}${slatwall.test.runner}"/>
     <!-- <FILL OUT THE BUNDLES TO TEST, CAN BE A LIST OF CFC PATHS -->
     <property name="test.bundles"      value="" />
    <!-- <FILL OUT THE DIRECTORY MAPPING TO TEST -->
     <property name="test.directory"         value="meta.tests.unit" />
    <!-- <FILL OUT IF YOU WANT THE DIRECTORY RUNNER TO RECURSE OR NOT -->
     <property name="test.recurse"      value="true" />
    <!-- <FILL OUT THE LABELS YOU WANT TO APPLY TO THE TESTS -->
     <property name="test.labels"       value="" />
    <!-- <FILL OUT THE TEST REPORTER YOU WANT, AVAILABLE REPORTERS ARE: ANTJunit, Codexwiki, console, dot, doc, json, junit, min, raw, simple, tap, text, xml -->
     <property name="test.reporter"          value="JUnit" />
    <!-- <FILL OUT WHERE REPORTING RESULTS ARE STORED -->
     <property name="report.dir"        value="${basedir}/results" />
     <property name="junitreport.dir"   value="${report.dir}/junitreport" />

     <target name="init" description="Init the tests">
          <mkdir dir="${slatwall.test.output.xml}/unit" />
          <tstamp prefix="start">
               <format property="TODAY" pattern="MM-dd-YYYY hh:mm:ss aa"/>
          </tstamp>
          <concat destfile="${slatwall.test.output.xml}/unit/latestrun.log">Tests ran at ${start.TODAY}</concat>
     </target>
     
     <target name="buildDocsAndTests" depends="init">

		<!-- Setup test output directory -->
		<delete dir="${slatwall.test.output.xml}/build" failonerror="false"/>
		<mkdir dir="${slatwall.test.output.xml}/build" />
		<delete dir="${slatwall.test.output.html}/build" failonerror="false"/>
		<mkdir dir="${slatwall.test.output.html}/build" />

		<!-- Run the tests -->
		<runTestDirectory directoryName="build" excludes=""/>

		<!-- Update test reports -->
		<junitreport todir="${slatwall.test.output.html}/build">
		  <fileset dir="${slatwall.test.output.xml}/build">
		    <include name="*.xml"/>
		  </fileset>
		  <report format="frames" todir="${slatwall.test.output.html}/build"/>
		</junitreport>

		<!-- Fail Build if not all unit tests pass -->
		<fail message="Not All Unit Tests Passed">
			<condition>
				<istrue value="${tests.bombed}"/>
			</condition>
		</fail>

	</target>

     <target name="run" depends="init" description="Run our tests and produce awesome results">

         <!-- <Directory Runner
               Executes recursively all tests in the passed directory and stores the results in the
               'dest' param.  So if you want to rename the file, do so here.

                Available params for directory runner:
                - Reporter
                - Directory
                - Recurse
                - Labels
          -->
          <get dest="${report.dir}/results.html"
                src="${url.runner}?&amp;opt_run=true&amp;target=${test.directory}&amp;recurse=${test.recurse}&amp;reporter=${test.reporter}&amp;labels=${test.labels}"
                verbose="true"/>

         <!-- <Bundles Runner
               You can also run tests for specific bundles by using the runner with the bundles params

               Available params for runner:
                - Reporter
                - Bundles
                - Labels

          <get dest="${report.dir}/results.html"
                src="${url.runner}&amp;bundles=${test.bundles}&amp;reporter=${test.reporter}&amp;labels=${test.labels}"
                verbose="true"/>
           -->

     </target>
     
     <target name="testfile">
     	<fail message="Failure Found...failing">
			
		    <condition>
		    	<and>
			    	<not>
			        	<resourcecontains resource="${slatwall.test.output.xml}/unit/results.txt" substring='failures:0,errors:0'/>
			   		</not>
		   		</and>
		    </condition>
			    
		</fail>
		
     </target>

     <target name="run-junit" depends="init" description="Run our tests and produce ANT JUnit reports">

         <!-- <Directory Runner
               Executes recursively all tests in the passed directory and stores the results in the
               'dest' param.  So if you want to rename the file, do so here.

                Available params for directory runner:
                - Reporter = ANTJunit fixed
                - Directory
                - Recurse
                - Labels
                - ReportPath : The path where reports will be stored, by default it is the ${report.dir} directory.
          -->
          <get dest="${slatwall.test.output.xml}/index${slatwall.outputfile}.xml"
                src="http://${slatwall.test.server}:${slatwall.test.serverport}"
                verbose="true"/>
          <get dest="${slatwall.test.output.xml}/unit/core${slatwall.outputfile}.xml"
                src="http://${url.runner}?&amp;opt_run=true&amp;target=${test.directory}.core&amp;recurse=${test.recurse}&amp;reporter=antjunit&amp;labels=${test.labels}"
                verbose="true"/>
                
          <get dest="${slatwall.test.output.xml}/unit/entity${slatwall.outputfile}.xml"
                src="http://${url.runner}?&amp;opt_run=true&amp;target=${test.directory}.entity&amp;recurse=${test.recurse}&amp;reporter=antjunit&amp;labels=${test.labels}"
                verbose="true"/>
                
           <get dest="${slatwall.test.output.xml}/unit/dao${slatwall.outputfile}.xml"
                src="http://${url.runner}?&amp;opt_run=true&amp;target=${test.directory}.dao&amp;recurse=${test.recurse}&amp;reporter=antjunit&amp;labels=${test.labels}"
                verbose="true"/>
                
           <get dest="${slatwall.test.output.xml}/unit/process${slatwall.outputfile}.xml"
                src="http://${url.runner}?&amp;opt_run=true&amp;target=${test.directory}.process&amp;recurse=${test.recurse}&amp;reporter=antjunit&amp;labels=${test.labels}"
                verbose="true"/>
            
            <get dest="${slatwall.test.output.xml}/unit/service${slatwall.outputfile}.xml"
                src="http://${url.runner}?&amp;opt_run=true&amp;target=${test.directory}.service&amp;recurse=${test.recurse}&amp;reporter=antjunit&amp;labels=${test.labels}"
                verbose="true"/>
            
            <get dest="${slatwall.test.output.xml}/unit/transient${slatwall.outputfile}.xml"
                src="http://${url.runner}?&amp;opt_run=true&amp;target=${test.directory}.transient&amp;recurse=${test.recurse}&amp;reporter=antjunit&amp;labels=${test.labels}"
                verbose="true"/>
        	
        	
                
          

         <!-- <Bundles Runner
               You can also run tests for specific bundles by using the runner with the bundles params

               Available params for runner:
                - Reporter
                - Bundles
                - Labels

          <get dest="${report.dir}/results.html"
                src="${url.runner}&amp;bundles=${test.bundles}&amp;reporter=${test.reporter}&amp;labels=${test.labels}"
                verbose="true"/>
           -->
           
			
          <!-- <Create fancy junit reports -->
          <junitreport todir="${slatwall.test.output.xml}/unit">
               <fileset dir="${slatwall.test.output.xml}/unit">
                    <include name="*.xml"/>
               </fileset>
               <report format="frames" todir="${slatwall.test.output.xml}/unit">
                    <param name="TITLE" expression="My Awesome TestBox Results"/>
               </report>
          </junitreport>
          
		<fail message="Failure Found...failing">
		    <condition>
		    	<not>
		        	<resourcecontains resource="${slatwall.test.output.xml}/unit/results.txt" substring='{"failures":0,"errors":0}'/>
		   		</not>
		    </condition>
		</fail>
     </target>
</project>