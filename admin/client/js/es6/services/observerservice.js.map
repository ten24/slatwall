{"version":3,"sources":["services/observerservice.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,AAQA;;;;;;;GADG;AACH,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAC5B,OAAO,CAAC,iBAAiB,EAAE,CAAE;IAC5B,AACA,kCADkC;QAC9B,gBAAgB,GAAE,EAAE,CAAC;IAEzB,AAOA;;;;;;OADG;IACH,gBAAgB,CAAC,SAAS,GAAG,EAAE,CAAC;IAEhC,AAUA,qBAVqB;IACrB;;;;;;;;OAQG;IACH,gBAAgB,CAAC,MAAM,GAAG,UAAS,QAAQ,EAAE,KAAK,EAAE,EAAE;QACpD,EAAE,CAAA,CAAC,EAAE,CAAC,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvC,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;YACzC,CAAC;YAED,EAAE,CAAA,CAAC,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;gBACxC,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;YAE7C,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvD,CAAC;IACH,CAAC,CAAC;IAGF,AAOA;;;;;;OADG;IACH,gBAAgB,CAAC,UAAU,GAAG,UAAS,EAAE;QACvC,GAAG,CAAA,CAAC,GAAG,CAAC,KAAK,IAAI,gBAAgB,CAAC,SAAS,CAAC,CAC5C,CAAC;YACC,gBAAgB,CAAC,kBAAkB,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjD,CAAC;IACH,CAAC,CAAC;IAEF,AAOA;;;;;;OADG;IACH,gBAAgB,CAAC,aAAa,GAAG,UAAS,KAAK;QAC7C,EAAE,CAAA,CAAC,KAAK,IAAI,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;YACvC,OAAO,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC,CAAC;IAEF,AAQA;;;;;;;OADG;IACH,gBAAgB,CAAC,kBAAkB,GAAG,UAAS,KAAK,EAAE,EAAE;QACtD,EAAE,CAAA,CAAC,KAAK,IAAI,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;YACvC,EAAE,CAAA,CAAC,EAAE,IAAI,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC3C,OAAO,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC;IACH,CAAC,CAAC;IAEF,AAQA;;;;;;;OADG;IACH,gBAAgB,CAAC,MAAM,GAAG,UAAS,KAAK,EAAE,UAAU;QAClD,GAAG,CAAA,CAAC,GAAG,CAAC,EAAE,IAAI,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChD,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,QAAQ;gBACvE,QAAQ,CAAC,UAAU,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC;IAEF,MAAM,CAAC,gBAAgB,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC","file":"services/observerservice.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc service\n * @name sdt.models:ObserverService\n * @description\n * # ObserverService\n * Manages all events inside the application\n *\n */\nangular.module('slatwalladmin')\n  .factory('observerService', [ function() {\n    /* Initialize list of observers */\n    var _observerService= {};\n\n    /**\n     * @ngdoc property\n     * @name ObserverService#observers\n     * @propertyOf sdt.models:ObserverService\n     * @description object to store all observers in\n     * @returns {object} object\n     */\n    _observerService.observers = {};\n\n    /* Declare methods */\n    /**\n     * @ngdoc method\n     * @name ObserverService#attach\n     * @methodOf sdt.models:ObserverService\n     * @param {function} callback the callback function to fire\n     * @param {string} event name of the event\n     * @param {string} id unique id for the object that is listening i.e. namespace\n     * @description adds events listeners\n     */\n    _observerService.attach = function(callback, event, id) {\n      if(id) {\n        if (!_observerService.observers[event]) {\n          _observerService.observers[event] = {};\n        }\n\n        if(!_observerService.observers[event][id])\n          _observerService.observers[event][id] = [];\n\n        _observerService.observers[event][id].push(callback);\n      }\n    };\n\n\n    /**\n     * @ngdoc method\n     * @name ObserverService#detachById\n     * @methodOf sdt.models:ObserverService\n     * @param {string} id unique id for the object that is listening i.e. namespace\n     * @description removes all events for a specific id from the observers object\n     */\n    _observerService.detachById = function(id) {\n      for(var event in _observerService.observers)\n      {\n        _observerService.detachByEventAndId(event, id);\n      }\n    };\n\n    /**\n     * @ngdoc method\n     * @name ObserverService#detachById\n     * @methodOf sdt.models:ObserverService\n     * @param {string} event name of the event\n     * @description removes removes all the event from the observer object\n     */\n    _observerService.detachByEvent = function(event) {\n      if(event in _observerService.observers) {\n        delete _observerService.observers[event];\n      }\n    };\n\n    /**\n     * @ngdoc method\n     * @name ObserverService#detachByEventAndId\n     * @methodOf sdt.models:ObserverService\n     * @param {string} event name of the event\n     * @param {string} id unique id for the object that is listening i.e. namespace\n     * @description removes removes all callbacks for an id in a specific event from the observer object\n     */\n    _observerService.detachByEventAndId = function(event, id) {\n      if(event in _observerService.observers) {\n        if(id in _observerService.observers[event]) {\n          delete _observerService.observers[event][id];\n        }\n      }\n    };\n\n    /**\n     * @ngdoc method\n     * @name ObserverService#notify\n     * @methodOf sdt.models:ObserverService\n     * @param {string} event name of the event\n     * @param {string|object|array|number} parameters pass whatever your listener is expecting\n     * @description notifies all observers of a specific event\n     */\n    _observerService.notify = function(event, parameters) {\n      for(var id in _observerService.observers[event]) {\n        angular.forEach(_observerService.observers[event][id], function (callback) {\n          callback(parameters);\n        });\n      }\n    };\n\n    return _observerService;\n  }]);"],"sourceRoot":"/source/"}