{"version":3,"sources":["pages/Search/Search.js"],"names":["Search","loc","useLocation","params","queryString","parse","search","arrayFormat","arrayFormatSeparator","history","useHistory","useGetProductType","request","setRequest","productTypeBase","useSelector","state","configuration","filtering","productTypeUrl","useEffect","isFetching","isLoaded","urlTitle","makeRequest","Object","keys","data","length","to","listen","location","title","childProductTypes","onSelect","push","pathname","stringify","showProducts","preFilter","productType_id","productTypeID","hide"],"mappings":"8MAkDeA,UAzCA,WAAO,IAAD,EACbC,EAAMC,cACRC,EAASC,IAAYC,MAAMJ,EAAIK,OAAQ,CAAEC,YAAa,YAAaC,qBAAsB,MAEvFC,EAAUC,cAJG,EAMWC,cANX,mBAMZC,EANY,KAMHC,EANG,KAObC,EAAkBC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cAAcC,UAAUJ,mBACrEK,EAAiBhB,EAAM,KAAWW,EAQxC,OANAM,qBAAU,WACHR,EAAQS,YAAeT,EAAQU,UAClCT,EAAW,2BAAKD,GAAN,IAAeS,YAAY,EAAMC,UAAU,EAAOnB,OAAQ,CAAEoB,SAAUJ,GAAkBK,aAAa,OAEhH,CAACZ,EAASC,EAAYM,KAEpBP,EAAQS,YAAcT,EAAQU,UAAiD,IAArCG,OAAOC,KAAKd,EAAQe,MAAMC,OAChE,cAAC,IAAD,CAAUC,GAAG,UAEtBpB,EAAQqB,QAAO,SAAAC,GACb,IAAI5B,EAASC,IAAYC,MAAM0B,EAASzB,OAAQ,CAAEC,YAAa,YAAaC,qBAAsB,MAClGK,EAAW,2BAAKD,GAAN,IAAee,KAAM,GAAIN,YAAY,EAAMC,UAAU,EAAOnB,OAAQ,CAAEoB,SAAUpB,EAAM,KAAWW,GAAmBU,aAAa,QAI3I,eAAC,IAAD,WACE,cAAC,IAAD,CAAQQ,MAAK,mBAAc7B,EAAM,YAChC,UAAAS,EAAQe,KAAKM,yBAAb,eAAgCL,QAAS,GACxC,cAAC,IAAD,CACED,KAAMf,EAAQe,KACdO,SAAU,SAAAX,GACRpB,EAAM,IAAUoB,EAChBd,EAAQ0B,KAAR,UAAgBlC,EAAImC,SAApB,YAAgChC,IAAYiC,UAAUlC,EAAQ,CAAEI,YAAa,eAIlFK,EAAQe,KAAKW,cAAgB,cAAC,IAAD,CAAaC,UAAW,CAAEC,eAAgB5B,EAAQe,KAAKc,eAAiBC,KAAM,CAAC","file":"static/js/21.ace8fa9a.chunk.js","sourcesContent":["import { Helmet } from 'react-helmet'\nimport { Layout, ProductTypeList } from '../../components'\nimport ListingPage from '../../components/Listing/Listing'\nimport { Redirect, useHistory, useLocation } from 'react-router'\nimport { useGetProductType } from '../../hooks/useAPI'\nimport { useSelector } from 'react-redux'\nimport queryString from 'query-string'\nimport { useEffect } from 'react'\n\nconst Search = () => {\n  const loc = useLocation()\n  let params = queryString.parse(loc.search, { arrayFormat: 'separator', arrayFormatSeparator: ',' })\n\n  const history = useHistory()\n\n  const [request, setRequest] = useGetProductType()\n  const productTypeBase = useSelector(state => state.configuration.filtering.productTypeBase)\n  const productTypeUrl = params['key'] || productTypeBase\n\n  useEffect(() => {\n    if (!request.isFetching && !request.isLoaded) {\n      setRequest({ ...request, isFetching: true, isLoaded: false, params: { urlTitle: productTypeUrl }, makeRequest: true })\n    }\n  }, [request, setRequest, productTypeUrl])\n\n  if (!request.isFetching && request.isLoaded && Object.keys(request.data).length === 0) {\n    return <Redirect to=\"/404\" />\n  }\n  history.listen(location => {\n    let params = queryString.parse(location.search, { arrayFormat: 'separator', arrayFormatSeparator: ',' })\n    setRequest({ ...request, data: {}, isFetching: true, isLoaded: false, params: { urlTitle: params['key'] || productTypeBase }, makeRequest: true })\n  })\n\n  return (\n    <Layout>\n      <Helmet title={`Search - ${params['keyword']}`} />\n      {request.data.childProductTypes?.length > 0 && (\n        <ProductTypeList\n          data={request.data}\n          onSelect={urlTitle => {\n            params['key'] = urlTitle\n            history.push(`${loc.pathname}?${queryString.stringify(params, { arrayFormat: 'comma' })}`)\n          }}\n        />\n      )}\n      {request.data.showProducts && <ListingPage preFilter={{ productType_id: request.data.productTypeID }} hide={['productType']} />}\n    </Layout>\n  )\n}\n\nexport default Search\n"],"sourceRoot":""}