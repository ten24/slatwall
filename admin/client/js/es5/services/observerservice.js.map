{"version":3,"names":[],"mappings":"","sources":["services/observerservice.js"],"sourcesContent":["'use strict';\n/**\n * @ngdoc service\n * @name sdt.models:ObserverService\n * @description\n * # ObserverService\n * Manages all events inside the application\n *\n */\nangular.module('slatwalladmin').factory('observerService', [function () {\n    /* Initialize list of observers */\n    var _observerService = {};\n    /**\n     * @ngdoc property\n     * @name ObserverService#observers\n     * @propertyOf sdt.models:ObserverService\n     * @description object to store all observers in\n     * @returns {object} object\n     */\n    _observerService.observers = {};\n    /* Declare methods */\n    /**\n     * @ngdoc method\n     * @name ObserverService#attach\n     * @methodOf sdt.models:ObserverService\n     * @param {function} callback the callback function to fire\n     * @param {string} event name of the event\n     * @param {string} id unique id for the object that is listening i.e. namespace\n     * @description adds events listeners\n     */\n    _observerService.attach = function (callback, event, id) {\n        if (id) {\n            if (!_observerService.observers[event]) {\n                _observerService.observers[event] = {};\n            }\n            if (!_observerService.observers[event][id])\n                _observerService.observers[event][id] = [];\n            _observerService.observers[event][id].push(callback);\n        }\n    };\n    /**\n     * @ngdoc method\n     * @name ObserverService#detachById\n     * @methodOf sdt.models:ObserverService\n     * @param {string} id unique id for the object that is listening i.e. namespace\n     * @description removes all events for a specific id from the observers object\n     */\n    _observerService.detachById = function (id) {\n        for (var event in _observerService.observers) {\n            _observerService.detachByEventAndId(event, id);\n        }\n    };\n    /**\n     * @ngdoc method\n     * @name ObserverService#detachById\n     * @methodOf sdt.models:ObserverService\n     * @param {string} event name of the event\n     * @description removes removes all the event from the observer object\n     */\n    _observerService.detachByEvent = function (event) {\n        if (event in _observerService.observers) {\n            delete _observerService.observers[event];\n        }\n    };\n    /**\n     * @ngdoc method\n     * @name ObserverService#detachByEventAndId\n     * @methodOf sdt.models:ObserverService\n     * @param {string} event name of the event\n     * @param {string} id unique id for the object that is listening i.e. namespace\n     * @description removes removes all callbacks for an id in a specific event from the observer object\n     */\n    _observerService.detachByEventAndId = function (event, id) {\n        if (event in _observerService.observers) {\n            if (id in _observerService.observers[event]) {\n                delete _observerService.observers[event][id];\n            }\n        }\n    };\n    /**\n     * @ngdoc method\n     * @name ObserverService#notify\n     * @methodOf sdt.models:ObserverService\n     * @param {string} event name of the event\n     * @param {string|object|array|number} parameters pass whatever your listener is expecting\n     * @description notifies all observers of a specific event\n     */\n    _observerService.notify = function (event, parameters) {\n        for (var id in _observerService.observers[event]) {\n            angular.forEach(_observerService.observers[event][id], function (callback) {\n                callback(parameters);\n            });\n        }\n    };\n    return _observerService;\n}]);\n\n//# sourceMappingURL=../services/observerservice.js.map"],"file":"services/observerservice.js","sourceRoot":"/source/"}