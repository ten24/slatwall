{"version":3,"sources":["pages/Checkout/SlideNavigation.js","pages/Checkout/ShippingAddressForm.js","pages/Checkout/AccountAddress.js","pages/Checkout/Shipping.js","pages/Checkout/CreditCardDetails.js","pages/Checkout/Payment.js","pages/Checkout/Review.js","pages/Checkout/steps.js","pages/Checkout/Checkout.js"],"names":["SlideNavigation","currentStep","nextActive","history","useHistory","className","to","previous","next","length","disabled","onClick","e","preventDefault","push","ShippingAddressForm","formik","isEdit","countryCodeOptions","stateCodeOptions","dispatch","useDispatch","htmlFor","type","id","value","values","accountAddressName","onChange","handleChange","name","streetAddress","street2Address","city","SwSelect","countryCode","getStateCodeOptionsByCountryCode","target","options","stateCode","postalCode","ShippingAddress","onSave","isFetching","useSelector","state","content","useState","setEdit","useFormik","enableReinitialize","initialValues","company","saveAddress","blindShip","onSubmit","useEffect","getCountries","handleSubmit","AccountAddress","onSelect","selectedAccountID","addressTitle","accountAddresses","userReducer","showAddress","setShowAddress","label","map","accountAddressID","address","newLabel","selectedValue","displayNew","FulfillmentPicker","cart","eligibleFulfillmentMethods","orderItems","selectedFulfillmentMethod","fulfillmentMethodSelector","fulfillmentMethodID","orderItemIDList","orderItem","orderItemID","join","changeOrderFulfillment","ShippingMethodPicker","orderFulfillments","selectedShippingMethod","shippingMethodSelector","orderFulfillment","fulfillmentSelector","shippingMethodOptions","addShippingMethod","shippingMethodID","fulfillmentID","orderFulfillmentID","PickupLocationPicker","pickupLocations","pickupLocationOptions","selectedLocation","pickupLocation","estimatedShippingDate","selected","Date","showTimeSelect","timeIntervals","timeCaption","dateFormat","pickupDate","setPickupDate","toLocaleString","replace","addPickupLocation","locationID","ShippingSlide","orderRequirementsList","accountAddressSelector","getEligibleFulfillmentMethods","getPickupLocations","fulfillmentMethod","fulfillmentMethodType","addShippingAddressUsingAccountAddress","addAddressAndAttachAsShipping","includes","months","Array","from","_","i","key","years","fill","getFullYear","year","index","CreditCardDetails","t","useTranslation","billingAccountAddress","creditCardNumber","nameOnCreditCard","expirationMonth","getMonth","expirationYear","toString","substring","securityCode","accountPaymentMethodName","saveShippingAsBilling","returnJSONObjects","payload","paymentMethodType","newOrderPayment","addPaymentMethod","setFieldValue","addNewAccountAndSetAsBilling","checked","CreditCardPayemnt","paymentMethods","accountPaymentMethods","setNewOrderPayment","orderPayment","accountPaymentMethod","accountPaymentMethodID","addPayment","GiftCardPayemnt","TermPayment","method","setAccountAddressID","purchaseOrderNumber","termOrderNumber","setTermOrderNumber","billingAccountAddressSelector","paymentMethod","paymentMethodID","PaymentSlide","eligiblePaymentMethodDetails","eligiblePaymentMethodDetailSelector","selectedPaymentMethod","setSelectedPaymentMethod","paymentMethodOnOrder","setPaymentMethodOnOrder","ReviewSlide","payment","shippingAddress","shippingAddressSelector","billingNickname","billingAddressNickname","shippingAddressNickname","shippingAddressNicknameSelector","isPlaced","creditCardPayment","termPayment","isDisabled","REVIEW","checkOutSteps","progress","icon","getCurrentStep","path","filter","step","StepsHeader","loc","useLocation","pathname","split","reverse","toLowerCase","current","progressSate","href","link","CheckoutSideBar","total","taxTotal","subtotal","discountTotal","fulfillmentChargeAfterDiscountTotal","useFormatCurrency","formatCurrency","event","placeOrder","Checkout","match","useRouteMatch","verifiedAccountFlag","enforceVerifiedAccountFlag","configuration","isAuthenticated","PageHeader","Shipping","Payment","Review"],"mappings":"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","file":"static/js/4.229d8b5b.chunk.js","sourcesContent":["import { Link, useHistory } from 'react-router-dom'\n\nconst SlideNavigation = ({ currentStep, nextActive = true }) => {\n  let history = useHistory()\n\n  return (\n    <>\n      <div className=\"d-lg-flex pt-4 mt-3\">\n        <div className=\"w-50 pr-3\">\n          <Link className=\"btn btn-secondary btn-block\" to={currentStep.previous}>\n            <i className=\"far fa-chevron-left\"></i> <span className=\"d-none d-sm-inline\">Back</span>\n            <span className=\"d-inline d-sm-none\">Back</span>\n          </Link>\n        </div>\n        {currentStep.next.length > 0 && (\n          <div className=\"w-50 pl-2\">\n            <button\n              className=\"btn btn-primary btn-block\"\n              disabled={!nextActive}\n              onClick={e => {\n                e.preventDefault()\n                history.push(currentStep.next)\n              }}\n            >\n              <span className=\"d-none d-sm-inline\">Continue</span>\n              <span className=\"d-inline d-sm-none\">Next</span> <i className=\"far fa-chevron-right\"></i>\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default SlideNavigation\n","import SwSelect from '../../components/SwSelect/SwSelect'\nimport { useDispatch } from 'react-redux'\nimport { getStateCodeOptionsByCountryCode } from '../../actions/contentActions'\n\nconst ShippingAddressForm = ({ formik, isEdit, countryCodeOptions, stateCodeOptions = [] }) => {\n  const dispatch = useDispatch()\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"accountAddressName\">Nickname</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"accountAddressName\" value={formik.values.accountAddressName} onChange={formik.handleChange} />\n          </div>\n        </div>\n        <div className=\"col-sm-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"name\" value={formik.values.name} onChange={formik.handleChange} />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"streetAddress\">Address 1</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"streetAddress\" value={formik.values.streetAddress} onChange={formik.handleChange} />\n          </div>\n        </div>\n        <div className=\"col-sm-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"street2Address\">Address 2</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"street2Address\" value={formik.values.street2Address} onChange={formik.handleChange} />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-4\">\n          <div className=\"form-group\">\n            <label htmlFor=\"city\">City</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"city\" value={formik.values.city} onChange={formik.handleChange} />\n          </div>\n        </div>\n        <div className=\"col-sm-3\">\n          <div className=\"form-group\">\n            <label htmlFor=\"checkout-country\">Country</label>\n            <SwSelect\n              id=\"countryCode\"\n              disabled={!isEdit}\n              value={formik.values.countryCode}\n              onChange={e => {\n                e.preventDefault()\n                dispatch(getStateCodeOptionsByCountryCode(e.target.value))\n                formik.handleChange(e)\n              }}\n              options={countryCodeOptions}\n            />\n          </div>\n        </div>\n        {stateCodeOptions.length > 0 && (\n          <div className=\"col-sm-3\">\n            <div className=\"form-group\">\n              <label htmlFor=\"stateCode\">State</label>\n              <SwSelect\n                id=\"stateCode\"\n                disabled={!isEdit}\n                value={formik.values.stateCode}\n                onChange={e => {\n                  e.preventDefault()\n                  formik.handleChange(e)\n                }}\n                options={stateCodeOptions}\n              />\n            </div>\n          </div>\n        )}\n\n        <div className=\"col-sm-2\">\n          <div className=\"form-group\">\n            <label htmlFor=\"postalCode\">ZIP Code</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"postalCode\" value={formik.values.postalCode} onChange={formik.handleChange} />\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\nexport default ShippingAddressForm\n","import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getCountries, getStateCodeOptionsByCountryCode } from '../../actions/contentActions'\nimport { useFormik } from 'formik'\nimport { SwRadioSelect } from '../../components'\nimport ShippingAddressForm from './ShippingAddressForm'\nconst ShippingAddress = ({ onSave }) => {\n  const dispatch = useDispatch()\n  const isFetching = useSelector(state => state.content.isFetching)\n  const countryCodeOptions = useSelector(state => state.content.countryCodeOptions)\n  const stateCodeOptions = useSelector(state => state.content.stateCodeOptions)\n  const [isEdit, setEdit] = useState(true)\n\n  let initialValues = {\n    name: '',\n    company: '',\n    streetAddress: '',\n    street2Address: '',\n    city: '',\n    stateCode: '',\n    postalCode: '',\n    countryCode: 'US',\n    accountAddressName: '',\n    saveAddress: true,\n    blindShip: false,\n  }\n\n  const formik = useFormik({\n    enableReinitialize: false,\n    initialValues: initialValues,\n    onSubmit: values => {\n      setEdit(!isEdit)\n      onSave(values)\n    },\n  })\n  useEffect(() => {\n    if (countryCodeOptions.length === 0 && !isFetching) {\n      dispatch(getCountries())\n    }\n    if (!stateCodeOptions[formik.values.countryCode] && !isFetching) {\n      dispatch(getStateCodeOptionsByCountryCode(formik.values.countryCode))\n    }\n  }, [dispatch, formik, stateCodeOptions, countryCodeOptions, isFetching])\n\n  return (\n    <>\n      <form onSubmit={formik.handleSubmit}>\n        <ShippingAddressForm formik={formik} isEdit={isEdit} countryCodeOptions={countryCodeOptions} stateCodeOptions={stateCodeOptions[formik.values.countryCode]} />\n        <div className=\"d-lg-flex pt-4 mt-3\">\n          <div className=\"w-50 pr-3\"></div>\n          <div className=\"w-50 pl-2\">\n            <button className=\"btn btn-outline-primary btn-block\" onClick={formik.handleSubmit}>\n              <span className=\"d-none d-sm-inline\">Save</span>\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  )\n}\n\nconst AccountAddress = ({ onSelect, onSave, selectedAccountID, addressTitle = 'Addresses' }) => {\n  const accountAddresses = useSelector(state => state.userReducer.accountAddresses)\n  const [showAddress, setShowAddress] = useState(false)\n  if (showAddress) {\n    selectedAccountID = 'new'\n  }\n  return (\n    <>\n      <h2 className=\"h6 pt-1 pb-3 mb-3 border-bottom\">{addressTitle}</h2>\n      {accountAddresses && (\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <SwRadioSelect\n              label=\"Account Address\"\n              options={accountAddresses.map(({ accountAddressName, accountAddressID, address: { streetAddress } }) => {\n                return { name: `${accountAddressName} - ${streetAddress}`, value: accountAddressID }\n              })}\n              onChange={value => {\n                if (value === 'new') {\n                  setShowAddress(true)\n                } else {\n                  setShowAddress(false)\n                  onSelect(value)\n                }\n              }}\n              newLabel=\"Add Account Address\"\n              selectedValue={selectedAccountID}\n              displayNew={true}\n            />\n          </div>\n        </div>\n      )}\n      {showAddress && (\n        <ShippingAddress\n          setShowAddress={showAddress}\n          onSave={values => {\n            setShowAddress(false)\n            onSave(values)\n          }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default AccountAddress\n","import { useDispatch, useSelector } from 'react-redux'\nimport { addAddressAndAttachAsShipping, addPickupLocation, addShippingAddressUsingAccountAddress, addShippingMethod, changeOrderFulfillment, getEligibleFulfillmentMethods, getPickupLocations, setPickupDate } from '../../actions/cartActions'\nimport SlideNavigation from './SlideNavigation'\nimport { SwRadioSelect } from '../../components'\nimport AccountAddress from './AccountAddress'\nimport { useEffect } from 'react'\nimport { accountAddressSelector, fulfillmentMethodSelector, fulfillmentSelector, pickupLocation, pickupLocationOptions, shippingMethodSelector } from '../../selectors/orderSelectors'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nconst FulfillmentPicker = () => {\n  const dispatch = useDispatch()\n  const { eligibleFulfillmentMethods, orderItems } = useSelector(state => state.cart)\n  let selectedFulfillmentMethod = useSelector(fulfillmentMethodSelector)\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col-sm-12\">\n        {eligibleFulfillmentMethods && eligibleFulfillmentMethods.length > 0 && (\n          <SwRadioSelect\n            label=\"How do you want to recieve your items?\"\n            options={eligibleFulfillmentMethods}\n            onChange={fulfillmentMethodID => {\n              const orderItemIDList = orderItems\n                .map(orderItem => {\n                  return orderItem.orderItemID\n                })\n                .join()\n              dispatch(changeOrderFulfillment({ fulfillmentMethodID, orderItemIDList }))\n            }}\n            selectedValue={selectedFulfillmentMethod.fulfillmentMethodID}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst ShippingMethodPicker = () => {\n  const dispatch = useDispatch()\n  const orderFulfillments = useSelector(state => state.cart.orderFulfillments)\n  const selectedShippingMethod = useSelector(shippingMethodSelector)\n  const orderFulfillment = useSelector(fulfillmentSelector)\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col-sm-12\">\n        {orderFulfillments.length > 0 && (\n          <SwRadioSelect\n            label=\"How do you want to recieve your items?\"\n            options={orderFulfillment.shippingMethodOptions}\n            onChange={value => {\n              dispatch(\n                addShippingMethod({\n                  shippingMethodID: value,\n                  fulfillmentID: orderFulfillment.orderFulfillmentID,\n                })\n              )\n            }}\n            selectedValue={selectedShippingMethod.shippingMethodID}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst PickupLocationPicker = () => {\n  const dispatch = useDispatch()\n  const pickupLocations = useSelector(pickupLocationOptions)\n  const selectedLocation = useSelector(pickupLocation)\n  const { orderFulfillmentID, estimatedShippingDate } = useSelector(fulfillmentSelector)\n\n  return (\n    <>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          <div className=\"form-group\">\n            <label htmlFor=\"locationPickupDate\">Pickup Date</label>\n            <br />\n            <DatePicker\n              id=\"locationPickupDate\"\n              selected={estimatedShippingDate ? new Date(estimatedShippingDate) : ''}\n              showTimeSelect\n              timeIntervals={60}\n              timeCaption=\"Time\"\n              dateFormat=\"MM/dd/yyyy h:mm aa\"\n              onChange={pickupDate => {\n                dispatch(\n                  setPickupDate({\n                    pickupDate: pickupDate.toLocaleString().replace(',', ''),\n                    orderFulfillmentID,\n                  })\n                )\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          {pickupLocations.length > 0 && (\n            <SwRadioSelect\n              label=\"Which Location would you like to pickup from?\"\n              options={pickupLocations}\n              onChange={value => {\n                dispatch(\n                  addPickupLocation({\n                    value,\n                  })\n                )\n              }}\n              selectedValue={selectedLocation.locationID}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst ShippingSlide = ({ currentStep }) => {\n  const dispatch = useDispatch()\n  const { orderRequirementsList } = useSelector(state => state.cart)\n  let selectedFulfillmentMethod = useSelector(fulfillmentSelector)\n  let selectedAccountID = useSelector(accountAddressSelector)\n  const orderFulfillment = useSelector(fulfillmentSelector)\n\n  useEffect(() => {\n    dispatch(getEligibleFulfillmentMethods())\n    dispatch(getPickupLocations())\n  }, [dispatch])\n\n  return (\n    <>\n      <FulfillmentPicker />\n      {selectedFulfillmentMethod.fulfillmentMethod.fulfillmentMethodType === 'pickup' && <PickupLocationPicker />}\n      {selectedFulfillmentMethod.fulfillmentMethod.fulfillmentMethodType === 'shipping' && (\n        <AccountAddress\n          addressTitle={'Shipping address'}\n          selectedAccountID={selectedAccountID}\n          onSelect={value => {\n            dispatch(\n              addShippingAddressUsingAccountAddress({\n                accountAddressID: value,\n                fulfillmentID: orderFulfillment.orderFulfillmentID,\n              })\n            )\n          }}\n          onSave={values => {\n            dispatch(addAddressAndAttachAsShipping({ ...values }))\n          }}\n        />\n      )}\n      {selectedFulfillmentMethod.fulfillmentMethod.fulfillmentMethodType === 'shipping' && selectedAccountID.length > 0 && <ShippingMethodPicker />}\n      <SlideNavigation currentStep={currentStep} nextActive={!orderRequirementsList.includes('fulfillment')} />\n    </>\n  )\n}\n\nexport default ShippingSlide\n","import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useFormik } from 'formik'\nimport SwSelect from '../../components/SwSelect/SwSelect'\nimport { useTranslation } from 'react-i18next'\nimport { addNewAccountAndSetAsBilling } from '../../actions/cartActions'\nimport { getCountries, getStateCodeOptionsByCountryCode } from '../../actions/contentActions'\nimport AccountAddress from './AccountAddress'\nimport { addPaymentMethod } from '../../actions/userActions'\n\nexport const CREDIT_CARD = '444df303dedc6dab69dd7ebcc9b8036a'\nexport const GIFT_CARD = '50d8cd61009931554764385482347f3a'\n\nconst months = Array.from({ length: 12 }, (_, i) => {\n  return { key: i + 1, value: i + 1 }\n})\nconst years = Array(10)\n  .fill(new Date().getFullYear())\n  .map((year, index) => {\n    return { key: year + index, value: year + index }\n  })\n\nconst CreditCardDetails = ({ onSubmit }) => {\n  const [isEdit, setEdit] = useState(true)\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const billingAccountAddress = useSelector(state => state.cart.billingAccountAddress)\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      creditCardNumber: '',\n      nameOnCreditCard: '',\n      expirationMonth: new Date().getMonth() + 1,\n      expirationYear: new Date().getFullYear().toString().substring(2),\n      securityCode: '',\n      accountPaymentMethodName: '',\n      accountAddressID: billingAccountAddress ? billingAccountAddress.accountAddressID : '',\n      saveShippingAsBilling: false,\n      returnJSONObjects: 'cart',\n    },\n    onSubmit: values => {\n      let payload = {\n        accountPaymentMethodName: values.accountPaymentMethodName,\n        paymentMethodType: 'creditCard',\n        nameOnCreditCard: values.nameOnCreditCard,\n        creditCardNumber: values.creditCardNumber,\n        expirationMonth: values.expirationMonth,\n        expirationYear: values.expirationYear,\n        securityCode: values.securityCode,\n        billingAccountAddress: {\n          accountAddressID: values.accountAddressID,\n        },\n      }\n      if (values.saveShippingAsBilling) {\n        payload.newOrderPayment['saveShippingAsBilling'] = 1\n        delete payload.newOrderPayment.accountAddressID\n      }\n      dispatch(addPaymentMethod(payload))\n      setEdit(!isEdit)\n      onSubmit()\n    },\n  })\n\n  useEffect(() => {\n    dispatch(getCountries())\n    dispatch(getStateCodeOptionsByCountryCode(formik.values.countryCode))\n  }, [dispatch, formik])\n  return (\n    <>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          {!formik.values.saveShippingAsBilling && (\n            <>\n              <AccountAddress\n                addressTitle={'Billing Address'}\n                selectedAccountID={formik.values.accountAddressID}\n                onSelect={value => {\n                  formik.setFieldValue('accountAddressID', value)\n                }}\n                onSave={values => {\n                  dispatch(addNewAccountAndSetAsBilling({ ...values }))\n                }}\n              />\n            </>\n          )}\n        </div>\n      </div>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          <h2 className=\"h6 pt-1 pb-3 mb-3 border-bottom\">Credit Card Information</h2>\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"accountPaymentMethodName\">{t('frontend.account.payment_method.nickname')}</label>\n                <input className=\"form-control\" type=\"text\" id=\"accountPaymentMethodName\" value={formik.values.accountPaymentMethodName} onChange={formik.handleChange} />{' '}\n              </div>\n            </div>\n\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"nameOnCreditCard\">{t('frontend.account.payment_method.name')}</label>\n                <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"nameOnCreditCard\" value={formik.values.nameOnCreditCard} onChange={formik.handleChange} />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-5\">\n              <div className=\"form-group\">\n                <label htmlFor=\"creditCardNumber\">{t('frontend.account.payment_method.ccn')}</label>\n                <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"creditCardNumber\" value={formik.values.creditCardNumber} onChange={formik.handleChange} />\n              </div>\n            </div>\n            <div className=\"col-sm-2\">\n              <div className=\"form-group\">\n                <label htmlFor=\"securityCode\">{t('frontend.account.payment_method.cvv')}</label>\n                <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"securityCode\" value={formik.values.securityCode} onChange={formik.handleChange} />\n              </div>\n            </div>\n            <div className=\"col-sm-3\">\n              <div className=\"form-group\">\n                <label htmlFor=\"expirationMonth\">{t('frontend.account.payment_method.expiration_month')}</label>\n                <SwSelect disabled={!isEdit} id=\"expirationMonth\" value={formik.values.expirationMonth} onChange={formik.handleChange} options={months} />\n              </div>\n            </div>\n            <div className=\"col-sm-2\">\n              <div className=\"form-group\">\n                <label htmlFor=\"expirationYear\">{t('frontend.account.payment_method.expiration_year')}</label>\n                <SwSelect disabled={!isEdit} id=\"expirationYear\" value={formik.values.expirationYear} onChange={formik.handleChange} options={years} />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"row mb-3\">\n            <div className=\"col-sm-12\">\n              <div className=\"row\">\n                <div className=\"col-sm-12\">\n                  <div className=\"custom-control custom-checkbox\">\n                    <input className=\"custom-control-input\" type=\"checkbox\" id=\"saveShippingAsBilling\" checked={formik.values.saveShippingAsBilling} onChange={formik.handleChange} />\n                    <label className=\"custom-control-label\" htmlFor=\"saveShippingAsBilling\">\n                      Same as shipping address\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {formik.values.accountAddressID !== '' && (\n            <div className=\"d-lg-flex pt-4 mt-3\">\n              <div className=\"w-50 pr-3\"></div>\n              <div className=\"w-50 pl-2\">\n                <button className=\"btn btn-outline-primary btn-block\" onClick={formik.handleSubmit}>\n                  <span className=\"d-none d-sm-inline\">Save</span>\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default CreditCardDetails\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { SwRadioSelect } from '../../components'\nimport SlideNavigation from './SlideNavigation'\nimport { addNewAccountAndSetAsBilling, addPayment } from '../../actions/cartActions'\nimport CreditCardDetails from './CreditCardDetails'\nimport { eligiblePaymentMethodDetailSelector, orderPayment, billingAccountAddressSelector } from '../../selectors/orderSelectors'\nimport { accountPaymentMethods } from '../../selectors/userSelectors'\nimport AccountAddress from './AccountAddress'\n\nexport const CREDIT_CARD = '444df303dedc6dab69dd7ebcc9b8036a'\nexport const GIFT_CARD = '50d8cd61009931554764385482347f3a'\nexport const TERM_PAYMENT = '2c918088783591e3017836350bd21385'\n\nconst CreditCardPayemnt = () => {\n  const paymentMethods = useSelector(accountPaymentMethods)\n  const [newOrderPayment, setNewOrderPayment] = useState(false)\n  const { accountPaymentMethod = { accountPaymentMethodID: '' } } = useSelector(orderPayment)\n  const dispatch = useDispatch()\n\n  return (\n    <>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          <SwRadioSelect\n            label=\"Select Payment\"\n            options={paymentMethods}\n            onChange={value => {\n              if (value === 'new') {\n                setNewOrderPayment('new')\n              } else {\n                setNewOrderPayment(false)\n                dispatch(\n                  addPayment({\n                    accountPaymentMethodID: value,\n                  })\n                )\n              }\n            }}\n            newLabel=\"Add Payment Method\"\n            selectedValue={newOrderPayment ? newOrderPayment : accountPaymentMethod.accountPaymentMethodID}\n            displayNew={true}\n          />\n        </div>\n      </div>\n      {newOrderPayment === 'new' && (\n        <CreditCardDetails\n          onSubmit={() => {\n            setNewOrderPayment(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n\nconst GiftCardPayemnt = () => {\n  return (\n    <>\n      <h1>Gift Cards</h1>\n    </>\n  )\n}\nconst TermPayment = ({ method }) => {\n  const dispatch = useDispatch()\n  const [accountAddressID, setAccountAddressID] = useState('')\n  const { purchaseOrderNumber } = useSelector(orderPayment)\n  const [termOrderNumber, setTermOrderNumber] = useState(purchaseOrderNumber || '')\n  const selectedAccountID = useSelector(billingAccountAddressSelector)\n\n  return (\n    <>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          <div className=\"form-group\">\n            <label htmlFor=\"purchaseOrderNumber\">Purchase Order Number</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id=\"purchaseOrderNumber\"\n              value={termOrderNumber}\n              onChange={e => {\n                e.preventDefault()\n                setTermOrderNumber(e.target.value)\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      {termOrderNumber.length > 0 && (\n        <AccountAddress\n          addressTitle={'Billing Address'}\n          selectedAccountID={selectedAccountID || accountAddressID}\n          onSelect={value => {\n            dispatch(\n              addPayment({\n                accountAddressID: value,\n                newOrderPayment: {\n                  purchaseOrderNumber: termOrderNumber,\n                  paymentMethod: {\n                    paymentMethodID: method,\n                  },\n                },\n              })\n            )\n            setAccountAddressID(value)\n          }}\n          onSave={values => {\n            dispatch(addNewAccountAndSetAsBilling({ ...values }))\n          }}\n        />\n      )}\n    </>\n  )\n}\nconst PaymentSlide = ({ currentStep }) => {\n  const orderRequirementsList = useSelector(state => state.cart.orderRequirementsList)\n  const eligiblePaymentMethodDetails = useSelector(eligiblePaymentMethodDetailSelector)\n  const { paymentMethod } = useSelector(orderPayment)\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('')\n  const [paymentMethodOnOrder, setPaymentMethodOnOrder] = useState(false)\n\n  if (paymentMethod && paymentMethod.paymentMethodID && paymentMethodOnOrder !== paymentMethod.paymentMethodID) {\n    setPaymentMethodOnOrder(paymentMethod.paymentMethodID)\n    setSelectedPaymentMethod(paymentMethod.paymentMethodID)\n  }\n  return (\n    <>\n      {/* <!-- Payment Method --> */}\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          <SwRadioSelect\n            label=\"Select Your Method of Payment\"\n            options={eligiblePaymentMethodDetails}\n            onChange={value => {\n              setSelectedPaymentMethod(value)\n            }}\n            selectedValue={selectedPaymentMethod.length > 0 ? selectedPaymentMethod : paymentMethodOnOrder}\n          />\n        </div>\n      </div>\n      {selectedPaymentMethod === CREDIT_CARD && <CreditCardPayemnt />}\n      {selectedPaymentMethod === GIFT_CARD && <GiftCardPayemnt />}\n      {selectedPaymentMethod === TERM_PAYMENT && <TermPayment method={selectedPaymentMethod} />}\n\n      <SlideNavigation currentStep={currentStep} nextActive={!orderRequirementsList.includes('payment')} />\n    </>\n  )\n}\n\nexport default PaymentSlide\n","import { useSelector } from 'react-redux'\nimport { Redirect } from 'react-router'\nimport { CartLineItem, GiftCardDetails, PickupLocationDetails, ShippingAddressDetails, CreditCardDetails, TermPaymentDetails, BillingAddressDetails } from '../../components'\nimport { fulfillmentSelector, shippingAddressSelector, orderPayment, billingAddressNickname, shippingAddressNicknameSelector } from '../../selectors/orderSelectors'\nimport SlideNavigation from './SlideNavigation'\n\nconst ReviewSlide = ({ currentStep }) => {\n  const cart = useSelector(state => state.cart)\n  const { fulfillmentMethod } = useSelector(fulfillmentSelector)\n  const payment = useSelector(orderPayment)\n  const shippingAddress = useSelector(shippingAddressSelector)\n  let billingNickname = useSelector(billingAddressNickname)\n\n  let shippingAddressNickname = useSelector(shippingAddressNicknameSelector)\n  if (cart.isPlaced) {\n    return <Redirect to={'/order-confirmation'} />\n  }\n\n  return (\n    <>\n      <div className=\"row bg-lightgray pt-3 pr-3 pl-3 rounded mb-5\">\n        {fulfillmentMethod.fulfillmentMethodType === 'shipping' && (\n          <div className=\"col-md-4\">\n            <ShippingAddressDetails shippingAddress={shippingAddress} shippingAddressNickname={shippingAddressNickname} />\n          </div>\n        )}\n        {fulfillmentMethod.fulfillmentMethodType === 'pickup' && (\n          <div className=\"col-md-4\">\n            <PickupLocationDetails pickupLocation={fulfillmentMethod} />\n          </div>\n        )}\n        <div className=\"col-md-4\">\n          <BillingAddressDetails billingAddressNickname={billingNickname} orderPayment={payment} />\n        </div>\n        {payment.paymentMethod.paymentMethodType === 'creditCard' && (\n          <div className=\"col-md-4\">\n            <CreditCardDetails creditCardPayment={payment} />\n          </div>\n        )}\n        {payment.paymentMethod.paymentMethodType === 'giftCard' && (\n          <div className=\"col-md-4\">\n            <GiftCardDetails />\n          </div>\n        )}\n        {payment.paymentMethod.paymentMethodType === 'termPayment' && (\n          <div className=\"col-md-4\">\n            <TermPaymentDetails termPayment={payment} />\n          </div>\n        )}\n      </div>\n\n      <h2 className=\"h6 pt-1 pb-3 mb-3 border-bottom\">Review your order</h2>\n      {cart.orderItems &&\n        cart.orderItems.map(({ orderItemID }) => {\n          return <CartLineItem key={orderItemID} orderItemID={orderItemID} isDisabled={true} /> // this cannot be index or it wont force a rerender\n        })}\n      <SlideNavigation currentStep={currentStep} />\n    </>\n  )\n}\n\nexport default ReviewSlide\n","const CART = 'checkout'\nconst SHIPPING = 'shipping'\nconst PAYMENT = 'payment'\nconst REVIEW = 'review'\n\nconst checkOutSteps = [\n  {\n    key: CART,\n    progress: 1,\n    icon: 'shopping-cart',\n    name: 'frontend.checkout.cart',\n    state: '',\n    previous: '',\n    next: '',\n  },\n  {\n    key: SHIPPING,\n    progress: 2,\n    icon: 'shipping-fast',\n    name: 'frontend.checkout.shipping',\n    state: '',\n    next: 'payment',\n    previous: '/shopping-cart',\n  },\n  {\n    key: PAYMENT,\n    progress: 3,\n    icon: 'credit-card',\n    name: 'frontend.checkout.payment',\n    state: '',\n    previous: 'shipping',\n    next: 'review',\n  },\n  {\n    key: REVIEW,\n    progress: 4,\n    icon: 'check-circle',\n    name: 'frontend.checkout.review',\n    state: '',\n    previous: 'payment',\n    next: '',\n  },\n]\nexport { checkOutSteps, CART, SHIPPING, PAYMENT, REVIEW }\n","import { CartPromoBox, Layout, OrderNotes, PromotionalMessaging } from '../../components'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Redirect, Route, Switch, useHistory, useLocation, useRouteMatch } from 'react-router-dom'\nimport PageHeader from '../../components/PageHeader/PageHeader'\nimport { useTranslation } from 'react-i18next'\nimport './checkout.css'\nimport useFormatCurrency from '../../hooks/useFormatCurrency'\nimport ShippingSlide from './Shipping'\nimport PaymentSlide from './Payment'\nimport ReviewSlide from './Review'\n\nimport { checkOutSteps, REVIEW } from './steps'\nimport { placeOrder } from '../../actions/cartActions'\nimport { isAuthenticated } from '../../utils'\nimport { useEffect } from 'react'\n// https://www.digitalocean.com/community/tutorials/how-to-create-multistep-forms-with-react-and-semantic-ui\n// https://github.com/srdjan/react-multistep/blob/master/react-multistep.js\n// https://www.geeksforgeeks.org/how-to-create-multi-step-progress-bar-using-bootstrap/\n\n//\nconst getCurrentStep = path => {\n  return (checkOutSteps.filter(step => {\n    return step.key === path\n  }) || [checkOutSteps[1]])[0]\n}\n\nconst StepsHeader = () => {\n  const { t } = useTranslation()\n  const loc = useLocation()\n  let history = useHistory()\n\n  const path = loc.pathname.split('/').reverse()[0].toLowerCase()\n  const current = getCurrentStep(path)\n  return (\n    <div className=\"steps steps-dark pt-2 pb-3 mb-5\">\n      {checkOutSteps.map(step => {\n        let progressSate = ''\n        if (step.progress < current.progress) {\n          progressSate = 'active'\n        } else if (step.progress === current.progress) {\n          progressSate = 'active current'\n        }\n        return (\n          <a\n            className={`step-item ${progressSate}`}\n            href={`/${step.name}`}\n            key={step.progress}\n            onClick={e => {\n              e.preventDefault()\n              history.push(step.link)\n            }}\n          >\n            <div className=\"step-progress\">\n              <span className=\"step-count\">{step.progress}</span>\n            </div>\n            <div className=\"step-label\">\n              <i className={`fal fa-${step.icon}`}></i>\n              {t(step.name)}\n            </div>\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nconst CheckoutSideBar = () => {\n  const cart = useSelector(state => state.cart)\n  const { isFetching, total, taxTotal, subtotal, discountTotal, fulfillmentChargeAfterDiscountTotal } = cart\n  const loc = useLocation()\n  const path = loc.pathname.split('/').reverse()[0].toLowerCase()\n  const currentStep = getCurrentStep(path)\n  const [formatCurrency] = useFormatCurrency({})\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n\n  return (\n    <aside className=\"col-lg-4 pt-4 pt-lg-0\">\n      <div className=\"cz-sidebar-static rounded-lg box-shadow-lg ml-lg-auto\">\n        <PromotionalMessaging />\n\n        <div className=\"widget mb-3\">\n          <h2 className=\"widget-title text-center\">Order summary</h2>\n        </div>\n        <ul className=\"list-unstyled font-size-sm pb-2 border-bottom\">\n          <li className=\"d-flex justify-content-between align-items-center\">\n            <span className=\"mr-2\">Subtotal:</span>\n            <span className=\"text-right\">{subtotal > 0 ? formatCurrency(subtotal) : '--'}</span>\n          </li>\n          <li className=\"d-flex justify-content-between align-items-center\">\n            <span className=\"mr-2\">Shipping:</span>\n            <span className=\"text-right\">{fulfillmentChargeAfterDiscountTotal > 0 ? formatCurrency(fulfillmentChargeAfterDiscountTotal) : '--'}</span>\n          </li>\n          <li className=\"d-flex justify-content-between align-items-center\">\n            <span className=\"mr-2\">Taxes:</span>\n            <span className=\"text-right\">{taxTotal > 0 ? formatCurrency(taxTotal) : '--'}</span>\n          </li>\n          <li className=\"d-flex justify-content-between align-items-center\">\n            <span className=\"mr-2\">Discount:</span>\n            <span className=\"text-right\">{discountTotal > 0 ? formatCurrency(discountTotal) : '--'}</span>\n          </li>\n        </ul>\n        <h3 className=\"font-weight-normal text-center my-4\">\n          <span>{total > 0 ? formatCurrency(total) : '--'}</span>\n        </h3>\n        {currentStep.key !== REVIEW && <CartPromoBox />}\n        {currentStep.key === REVIEW && <OrderNotes />}\n        {currentStep.key === REVIEW && (\n          <button\n            className=\"btn btn-primary btn-block mt-4\"\n            type=\"submit\"\n            disabled={isFetching}\n            onClick={event => {\n              dispatch(placeOrder())\n              event.preventDefault()\n            }}\n          >\n            {t('frontend.order.complete')}\n          </button>\n        )}\n      </div>\n    </aside>\n  )\n}\nconst Checkout = () => {\n  let match = useRouteMatch()\n  const loc = useLocation()\n  const history = useHistory()\n  const path = loc.pathname.split('/').reverse()[0].toLowerCase()\n  const currentStep = getCurrentStep(path)\n  const verifiedAccountFlag = useSelector(state => state.userReducer.verifiedAccountFlag)\n  const enforceVerifiedAccountFlag = useSelector(state => state.configuration.enforceVerifiedAccountFlag)\n\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      history.push(`/my-account?redirect=${loc.pathname}`)\n    }\n  }, [history, loc])\n\n  if (enforceVerifiedAccountFlag && !verifiedAccountFlag && isAuthenticated()) {\n    return <Redirect to=\"/account-verification\" />\n  }\n\n  return (\n    <Layout>\n      <PageHeader />\n      <div className=\"container pb-5 mb-2 mb-md-4\">\n        <div className=\"row\">\n          <section className=\"col-lg-8\">\n            {/* <!-- Steps--> */}\n            <StepsHeader />\n            <Route path={`${match.path}/cart`}>\n              <Redirect to=\"/cart\" />\n            </Route>\n\n            <Switch>\n              <Route path={`${match.path}/shipping`}>\n                <ShippingSlide currentStep={currentStep} />\n              </Route>\n\n              <Route path={`${match.path}/payment`}>\n                <PaymentSlide currentStep={currentStep} />\n              </Route>\n              <Route path={`${match.path}/review`}>\n                <ReviewSlide currentStep={currentStep} />\n              </Route>\n              <Route path={match.path}>\n                <Redirect to={`${match.path}/shipping`} />\n              </Route>\n            </Switch>\n          </section>\n          {/* <!-- Sidebar--> */}\n          <CheckoutSideBar />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Checkout\n"],"sourceRoot":""}