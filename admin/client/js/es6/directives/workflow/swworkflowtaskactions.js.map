{"version":3,"sources":["directives/workflow/swworkflowtaskactions.ts"],"names":[],"mappings":"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","file":"directives/workflow/swworkflowtaskactions.js","sourceRoot":"/Users/david/Sites/Slatwall/","sourcesContent":["angular.module('slatwalladmin')\n    .directive('swWorkflowTaskActions', [\n        '$log',\n        '$slatwall',\n        'metadataService',\n        'collectionService',\n        'workflowPartialsPath',\n        function (\n            $log,\n            $slatwall,\n            metadataService,\n            collectionService,\n            workflowPartialsPath\n        ) {\n            return {\n                restrict: 'AE',\n                scope: {\n                    workflowTask: \"=\"\n                },\n                templateUrl: workflowPartialsPath + \"workflowtaskactions.html\",\n                link: function (scope, element, attrs) {\n                    $log.debug('Workflow Task Actions Init');\n                    $log.debug(scope.workflowTask);\n                    scope.openActions = false;\n                    \n                    /**\n                     * Returns the correct object based on the selected object type.\n                     */\n                    var getObjectByActionType = function (workflowTaskAction) {\n                        if (workflowTaskAction.data.actionType === 'email') {\n                            workflowTaskAction.$$getEmailTemplate();\n                        } else if (workflowTaskAction.data.actionType === 'print') {\n                            workflowTaskAction.$$getPrintTemplate();\n                        }\n                    };\n                    /**\n                     * --------------------------------------------------------------------------------------------------------\n                     * Returns workflow task action, and saves them to the scope variable workflowtaskactions\n                     * --------------------------------------------------------------------------------------------------------\n                     */\n                    scope.getWorkflowTaskActions = function () {\n                    \t/***\n \t\t\t\t\t   Note:\n \t\t\t\t\t   This conditional is checking whether or not we need to be retrieving to\n \t\t\t\t\t   items all over again. If we already have them, we won't make another\n \t\t\t\t\t   trip to the database. \n \t\t\t\t\t   \n \t\t\t\t\t***/\n                    \t\tif(angular.isUndefined(scope.workflowTask.data.workflowTaskActions)){   \n                    \t\t\tvar workflowTaskPromise = scope.workflowTask.$$getWorkflowTaskActions();\n                    \t\t\t\tworkflowTaskPromise.then(function () {\n                    \t\t\t\t\tscope.workflowTaskActions = scope.workflowTask.data.workflowTaskActions;\n                    \t\t\t\t\tangular.forEach(scope.workflowTaskActions, function (workflowTaskAction) {\n                            \t\t\tgetObjectByActionType(workflowTaskAction);\n                    \t\t\t\t\t});\n                            \t\t$log.debug(scope.workflowTaskActions);\n                    \t\t\t});\n                    \t\t}else{\n                    \t\t\tscope.workflowTaskActions = scope.workflowTask.data.workflowTaskActions;\n                    \t\t}\n                        if (angular.isUndefined(scope.workflowTask.data.workflowTaskActions)) {\n                            scope.workflowTask.data.workflowTaskActions = [];\n                            scope.workflowTaskActions = scope.workflowTask.data.workflowTaskActions;\n                        }\n                    };\n                    scope.getWorkflowTaskActions();//Call get\n                    \n\n                    /**\n                     * --------------------------------------------------------------------------------------------------------\n                     * Saves the workflow task actions by calling the objects $$save method.\n                     * @param taskAction\n                     * --------------------------------------------------------------------------------------------------------\n                     */\n                    scope.saveWorkflowTaskAction = function (taskAction, context) {\n                    \t     $log.debug(\"Context: \" + context);\n                         $log.debug(\"saving task action and parent task\");\n                         $log.debug(taskAction);\n                        var savePromise = scope.workflowTaskActions.selectedTaskAction.$$save();\n                        savePromise.then(function () {\n                            var taSavePromise = taskAction.$$save;\n                            //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished\n                            if (context == 'add'){\n                        \t\t\t$log.debug(\"Save and New\");\n                        \t\t\tscope.addWorkflowTaskAction(taskAction);\n                        \t\t\tscope.finished = false;\n                            }else if (context == \"finish\"){\n                            \t\tscope.finished = true;\n                            }\n                        }); \n                    }//<--end save\n\n                    /**\n    \t\t\t\t \t* Sets the editing state to show/hide the edit screen.\n    \t\t\t\t \t*/\n    \t\t\t\t\tscope.setHidden = function(task){\n    \t\t\t\t\t\tif(!angular.isObject(task)){ task = {};}\n    \t\t\t\t\t\t\n    \t\t\t\t\t\tif(angular.isUndefined(task.hidden)){\n\n    \t\t\t\t\t\t\ttask.hidden=false;\n    \t\t\t\t\t\t}else{\n    \t\t\t\t\t\t\t$log.debug(\"setHidden()\", \"Setting Hide Value To \" + !task.hidden);\n    \t\t\t\t\t\t\ttask.hidden = !task.hidden;\n    \t\t\t\t\t\t}\n    \t\t\t\t\t};\n                    \n                    /**\n                     * --------------------------------------------------------------------------------------------------------\n                     * Adds workflow action items by calling the workflowTask objects $$addWorkflowTaskAction() method\n                     * and sets the result to scope.\n                     * @param taskAction\n                     * --------------------------------------------------------------------------------------------------------\n                     */\n                    scope.addWorkflowTaskAction = function (taskAction) {\n                        var workflowTaskAction = scope.workflowTask.$$addWorkflowTaskAction();\n                        scope.selectWorkflowTaskAction(workflowTaskAction);\n                        $log.debug(scope.workflow);\n                    };\n                    \n                    /**\n                     * --------------------------------------------------------------------------------------------------------\n                     * Selects a new task action and populates the task action properties.\n                     * --------------------------------------------------------------------------------------------------------\n                     */\n                    scope.selectWorkflowTaskAction = function (workflowTaskAction) {\n                        $log.debug(\"Selecting new task action for editing: \");\n                        $log.debug(workflowTaskAction);\n                        scope.finished = false;\n                        scope.workflowTaskActions.selectedTaskAction = undefined;\n                        var filterPropertiesPromise = $slatwall.getFilterPropertiesByBaseEntityName(scope.workflowTask.data.workflow.data.workflowObject);\n                        filterPropertiesPromise.then(function (value) {\n                            scope.filterPropertiesList = {\n                                baseEntityName: scope.workflowTask.data.workflow.data.workflowObject,\n                                baseEntityAlias: \"_\" + scope.workflowTask.data.workflow.data.workflowObject\n                            };\n                            metadataService.setPropertiesList(value, scope.workflowTask.data.workflow.data.workflowObject);\n                            scope.filterPropertiesList[scope.workflowTask.data.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflowTask.data.workflow.data.workflowObject);\n                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflowTask.data.workflow.data.workflowObject], scope.workflowTask.data.workflow.data.workflowObject);\n                            scope.workflowTaskActions.selectedTaskAction = workflowTaskAction;\n                        });\n                    }; \n                    /**\n                     * Overrides the confirm directive method deleteEntity. This is needed for the modal popup.\n                     */\n                    scope.deleteEntity = function(entity){\n                    \t\tscope.removeWorkflowTaskAction(entity);\n                    };\n                    /**\n                     * --------------------------------------------------------------------------------------------------------\n                     * Removes a workflow task action by calling the selected tasks $$delete method\n                     * and reindexes the list.\n                     * --------------------------------------------------------------------------------------------------------\n                     */\n                    scope.removeWorkflowTaskAction = function (workflowTaskAction) {\n                        var deletePromise = workflowTaskAction.$$delete();\n                        deletePromise.then(function () {\n                            if (workflowTaskAction === scope.workflowTaskActions.selectedTaskAction) {\n                                delete scope.workflowTaskActions.selectedTaskAction;\n                            }\n                            $log.debug(\"removeWorkflowTaskAction\");\n                            $log.debug(workflowTaskAction);\n                            scope.workflowTaskActions.splice(workflowTaskAction.$$actionIndex, 1);\n                            for (var i in scope.workflowTaskActions) {\n                                scope.workflowTaskActions[i].$$actionIndex = i;\n                            }\n                        });\n                    };\n                }\n            };\n        }\n    ]);"]}