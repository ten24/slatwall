{"version":3,"sources":["components/Account/AccountContent/AccountContent.js","components/SwSelect/SwSelect.js","components/Account/AccountAddresses/CreateOrEditAccountAddress.js"],"names":["AccountContent","history","useHistory","loc","useLocation","useSelector","state","content","pathname","substring","customBody","contentTitle","className","onClick","event","preventDefault","target","getAttribute","push","dangerouslySetInnerHTML","__html","SwSelect","id","value","onChange","options","disabled","name","map","index","key","connect","ownProps","accountAddresses","userReducer","filter","address","addressID","path","states","configuration","countries","isEdit","length","accountAddress","initialValues","heading","redirectLocation","action","useRedirect","location","redirect","setRedirect","dispatch","useDispatch","t","useTranslation","accountAddressID","accountAddressName","countryCode","company","phoneNumber","streetAddress","street2Address","city","stateCode","postalCode","formik","useFormik","enableReinitialize","onSubmit","values","updateAccountAddress","addNewAccountAddress","shouldRedirect","title","handleSubmit","htmlFor","handleChange","type"],"mappings":"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","file":"static/js/18.c5d80529.chunk.js","sourcesContent":["import { useSelector } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nconst AccountContent = () => {\n  let history = useHistory()\n  let loc = useLocation()\n  const content = useSelector(state => state.content[loc.pathname.substring(1)])\n  const { customBody = '', contentTitle = '' } = content || {}\n  return (\n    <>\n      <div className=\"d-flex justify-content-between align-items-center pt-lg-2 pb-4 pb-lg-5 mb-lg-3\">\n        <div className=\"d-flex justify-content-between w-100\">\n          <h2 className=\"h3\">{contentTitle}</h2>\n        </div>\n      </div>\n\n      <div\n        onClick={event => {\n          event.preventDefault()\n          if (event.target.getAttribute('href')) {\n            history.push(event.target.getAttribute('href'))\n          }\n        }}\n        dangerouslySetInnerHTML={{\n          __html: customBody,\n        }}\n      />\n    </>\n  )\n}\nexport default AccountContent\n","const SwSelect = ({ id, value, onChange, options, disabled }) => {\n  return (\n    <select disabled={disabled} className=\"form-control custom-select\" id={id} name={`['${id}']`} value={value} onChange={onChange}>\n      {options &&\n        options.map(({ key, name, value }, index) => {\n          return (\n            <option key={index} value={value}>\n              {key || name}\n            </option>\n          )\n        })}\n    </select>\n  )\n}\n\nexport default SwSelect\n","import { connect, useDispatch } from 'react-redux'\nimport SwSelect from '../../SwSelect/SwSelect'\nimport { useFormik } from 'formik'\nimport useRedirect from '../../../hooks/useRedirect'\nimport { AccountLayout } from '../AccountLayout/AccountLayout'\nimport AccountContent from '../AccountContent/AccountContent'\nimport { addNewAccountAddress, updateAccountAddress } from '../../../actions/userActions'\n// TODO: Make this component reusable\nimport { useTranslation } from 'react-i18next'\n\nconst CreateOrEditAccountAddress = ({ isEdit, heading, states, countries, initialValues = {}, accountAddress, redirectLocation = '/my-account/addresses', customBody, contentTitle, action = 'Account Address' }) => {\n  const [redirect, setRedirect] = useRedirect({ location: redirectLocation })\n  const dispatch = useDispatch()\n  const { t } = useTranslation()\n\n  initialValues = {\n    accountAddressID: accountAddress ? accountAddress.accountAddressID : '',\n    accountAddressName: accountAddress ? accountAddress.accountAddressName : '',\n    countryCode: accountAddress ? accountAddress.address.countryCode : 'US',\n    name: accountAddress ? accountAddress.address.name : '',\n    company: accountAddress ? accountAddress.address.company : '',\n    phoneNumber: accountAddress ? accountAddress.address.phoneNumber : '',\n    streetAddress: accountAddress ? accountAddress.address.streetAddress : '',\n    street2Address: accountAddress ? accountAddress.address.street2Address : '',\n    city: accountAddress ? accountAddress.address.city : '',\n    stateCode: accountAddress ? accountAddress.address.stateCode : '',\n    postalCode: accountAddress ? accountAddress.address.postalCode : '',\n  }\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: initialValues,\n    onSubmit: values => {\n      // TODO: Dispatch Actions\n      if (isEdit) {\n        dispatch(updateAccountAddress(values))\n      } else {\n        dispatch(addNewAccountAddress(values))\n      }\n      setRedirect({ ...redirect, shouldRedirect: true })\n    },\n  })\n\n  return (\n    <AccountLayout title={`Add ${action}`}>\n      <AccountContent customBody={customBody} contentTitle={contentTitle} />\n      <form onSubmit={formik.handleSubmit}>\n        <div className=\"row\"></div>\n        <h2>{heading}</h2>\n        <div className=\"form-group\">\n          <label htmlFor=\"countryCode\">{t('frontend.account.countryCode')}</label>\n          <SwSelect id=\"countryCode\" value={formik.values.countryCode} onChange={formik.handleChange} options={countries} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"accountAddressName\">{t('frontend.account.nickname')}</label>\n          <input className=\"form-control\" type=\"text\" id=\"accountAddressName\" value={formik.values['accountAddressName']} onChange={formik.handleChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">{t('frontend.account.name')}</label>\n          <input className=\"form-control\" type=\"text\" id=\"name\" value={formik.values['name']} onChange={formik.handleChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"company\">{t('frontend.account.company')}</label>\n          <input className=\"form-control\" type=\"text\" id=\"company\" value={formik.values['company']} onChange={formik.handleChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"phoneNumber\">{t('frontend.account.phoneNumber')} </label>\n          <input className=\"form-control\" type=\"text\" id=\"phoneNumber\" value={formik.values['phoneNumber']} onChange={formik.handleChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"streetAddress\">{t('frontend.account.streetAddress')}</label>\n          <input className=\"form-control\" type=\"text\" id=\"streetAddress\" value={formik.values['streetAddress']} onChange={formik.handleChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"street2Address\">{t('frontend.account.street2Address')}</label>\n          <input className=\"form-control\" type=\"text\" id=\"street2Address\" value={formik.values['street2Address']} onChange={formik.handleChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"city\">{t('frontend.account.city')}</label>\n          <input className=\"form-control\" type=\"text\" id=\"city\" value={formik.values['city']} onChange={formik.handleChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"stateCode\">{t('frontend.account.stateCode')}</label>\n          <SwSelect id=\"stateCode\" value={formik.values['stateCode']} onChange={formik.handleChange} options={states} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"postalCode\">{t('frontend.account.postalCode')}</label>\n          <input className=\"form-control\" type=\"text\" id=\"postalCode\" value={formik.values['postalCode']} onChange={formik.handleChange} />\n        </div>\n        <div className=\"col-12\">\n          <hr className=\"mt-2 mb-3\" />\n          <div className=\"d-flex flex-wrap justify-content-end\">\n            <button type=\"submit\" className=\"btn btn-primary mt-3 mt-sm-0\">\n              {isEdit ? `${t('frontend.core.save')} ${action}` : `${t('frontend.core.saveNew')} ${action}`}\n            </button>\n          </div>\n        </div>\n      </form>\n    </AccountLayout>\n  )\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  let { accountAddresses } = state.userReducer\n\n  accountAddresses = accountAddresses.filter(({ address }) => {\n    return address.addressID === ownProps.path\n  })\n  return {\n    states: state.configuration.states,\n    countries: state.configuration.countries,\n    isEdit: accountAddresses.length ? true : false,\n    accountAddress: accountAddresses.length ? accountAddresses[0] : null,\n  }\n}\nexport default connect(mapStateToProps)(CreateOrEditAccountAddress)\n"],"sourceRoot":""}