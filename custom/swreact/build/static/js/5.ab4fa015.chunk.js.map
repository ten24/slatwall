{"version":3,"sources":["pages/MyAccount/MyAccount.js","pages/Account/Account.js"],"names":["AccountLogin","AccountOverview","AccountProfile","AccountFavorites","AccountAddresses","CreateOrEditAccountAddress","AccountOrderDetail","AccountPaymentMethods","AccountOrderHistory","CreateOrEditAccountPaymentMethod","MyAccount","match","useRouteMatch","loc","useLocation","dispatch","useDispatch","user","useSelector","state","userReducer","useEffect","isAuthenticated","isFetching","accountID","length","getUser","search","includes","params","queryString","parse","to","redirect","path","pathname","split","reverse","forwardState","Account"],"mappings":"iHAAA,gFAWEA,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IAsEaC,UApEG,WAChB,IAAIC,EAAQC,cACRC,EAAMC,cACJC,EAAWC,cACXC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAOxC,GALAC,qBAAU,YACJC,eAAsBL,EAAKM,YAAeN,EAAKO,UAAUC,QAC3DV,EAASW,iBAEV,CAACX,EAAUE,IACVK,eAAqBT,EAAIc,OAAOC,SAAS,aAAc,CACzD,IAAMC,EAASC,IAAYC,MAAMlB,EAAIc,QACrC,OAAO,cAAC,IAAD,CAAUK,GAAIH,EAAOI,WAG9B,IAAMC,EAAOrB,EAAIsB,SAASC,MAAM,KAAKC,UACrC,OACE,eAAC,IAAD,WACGf,eACC,eAAC,IAAD,WACE,cAAC,IAAD,CAAOY,KAAI,UAAKvB,EAAMuB,KAAX,kBAAX,SACE,cAAC,IAAD,CAA4BA,KAAMA,EAAK,OAEzC,cAAC,IAAD,CAAOA,KAAI,UAAKvB,EAAMuB,KAAX,cAAX,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOA,KAAI,UAAKvB,EAAMuB,KAAX,cAAX,SACE,cAAC,IAAD,CAAkCA,KAAMA,EAAK,OAE/C,cAAC,IAAD,CAAOA,KAAI,UAAKvB,EAAMuB,KAAX,UAAX,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOA,KAAI,UAAKvB,EAAMuB,KAAX,cAAX,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOA,KAAI,UAAKvB,EAAMuB,KAAX,eAAX,SACE,cAAC,IAAD,CAAoBA,KAAMA,EAAK,GAAII,aAAczB,EAAIM,UAEvD,cAAC,IAAD,CAAOe,KAAI,UAAKvB,EAAMuB,KAAX,WAAX,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOA,KAAI,UAAKvB,EAAMuB,KAAX,YAAX,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOA,KAAI,UAAKvB,EAAMuB,KAAX,UAAX,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOA,KAAMvB,EAAMuB,KAAnB,SAA0BZ,eAAqB,cAAC,IAAD,UAGjDA,eACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOY,KAAI,UAAKvB,EAAMuB,KAAX,kBAAX,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOA,KAAI,UAAKvB,EAAMuB,KAAX,mBAAX,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOA,KAAMvB,EAAMuB,KAAnB,SACE,cAAC,IAAD,c,iCClFZ,2BAMeK,UAJC,WACd,OAAO,cAAC,UAAD","file":"static/js/5.ab4fa015.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Switch, Route, useRouteMatch, useLocation, Redirect } from 'react-router-dom'\nimport { getUser } from '../../actions/userActions'\n\nimport { isAuthenticated } from '../../utils'\nimport queryString from 'query-string'\nimport { Layout, CreateAccount, ForgotPassword, AccountCarts, AccountLogin, AccountOverview, AccountProfile, AccountFavorites, AccountAddresses, CreateOrEditAccountAddress, AccountOrderDetail, AccountPaymentMethods, AccountOrderHistory, CreateOrEditAccountPaymentMethod } from '../../components'\n\n// eslint-disable-next-line no-unused-vars\nconst pageComponents = {\n  AccountLogin,\n  AccountOverview,\n  AccountProfile,\n  AccountFavorites,\n  AccountAddresses,\n  CreateOrEditAccountAddress,\n  AccountOrderDetail,\n  AccountPaymentMethods,\n  AccountOrderHistory,\n  CreateOrEditAccountPaymentMethod,\n}\nconst MyAccount = () => {\n  let match = useRouteMatch()\n  let loc = useLocation()\n  const dispatch = useDispatch()\n  const user = useSelector(state => state.userReducer)\n\n  useEffect(() => {\n    if (isAuthenticated() && !user.isFetching && !user.accountID.length) {\n      dispatch(getUser())\n    }\n  }, [dispatch, user])\n  if (isAuthenticated() && loc.search.includes('redirect=')) {\n    const params = queryString.parse(loc.search)\n    return <Redirect to={params.redirect} />\n  }\n\n  const path = loc.pathname.split('/').reverse()\n  return (\n    <Layout>\n      {isAuthenticated() && (\n        <Switch>\n          <Route path={`${match.path}/addresses/:id`}>\n            <CreateOrEditAccountAddress path={path[0]} />\n          </Route>\n          <Route path={`${match.path}/addresses`}>\n            <AccountAddresses />\n          </Route>\n          <Route path={`${match.path}/cards/:id`}>\n            <CreateOrEditAccountPaymentMethod path={path[0]} />\n          </Route>\n          <Route path={`${match.path}/cards`}>\n            <AccountPaymentMethods />\n          </Route>\n          <Route path={`${match.path}/favorites`}>\n            <AccountFavorites />\n          </Route>\n          <Route path={`${match.path}/orders/:id`}>\n            <AccountOrderDetail path={path[0]} forwardState={loc.state} />\n          </Route>\n          <Route path={`${match.path}/orders`}>\n            <AccountOrderHistory />\n          </Route>\n          <Route path={`${match.path}/profile`}>\n            <AccountProfile />\n          </Route>\n          <Route path={`${match.path}/carts`}>\n            <AccountCarts />\n          </Route>\n          <Route path={match.path}>{isAuthenticated() && <AccountOverview />}</Route>\n        </Switch>\n      )}\n      {!isAuthenticated() && (\n        <Switch>\n          <Route path={`${match.path}/createAccount`}>\n            <CreateAccount />\n          </Route>\n          <Route path={`${match.path}/forgotPassword`}>\n            <ForgotPassword />\n          </Route>\n          <Route path={match.path}>\n            <AccountLogin />\n          </Route>\n        </Switch>\n      )}\n    </Layout>\n  )\n}\n\nexport default MyAccount\n","import MyAccount from '../MyAccount/MyAccount'\n\nconst Account = () => {\n  return <MyAccount />\n}\n\nexport default Account\n"],"sourceRoot":""}