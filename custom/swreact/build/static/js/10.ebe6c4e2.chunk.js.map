{"version":3,"sources":["pages/Brand/Brand.js"],"names":["Brand","props","brandRoute","useSelector","getBrandRoute","productTypeBase","state","configuration","filtering","path","location","pathname","split","reverse","loc","useLocation","params","queryString","parse","search","arrayFormat","arrayFormatSeparator","history","useHistory","useGetEntity","brandResponse","setBrandRequest","productTypeRequest","setProductTypeRequest","productTypeUrl","useEffect","isFetching","isLoaded","entity","brandUrlTitle","includeSettingsInList","makeRequest","Object","keys","data","length","to","productTypeData","augmentProductType","isNonBasePTAndListing","childProductTypes","classNameList","title","settings","brandHTMLTitleString","productTypeName","includeHome","brand","brandName","urlTitle","crumbs","filter","productType","productTypeIDPath","includes","productTypeID","map","crumb","stringify","key","subHeading","imageFile","brandDescription","onSelect","push","preFilter","productType_slug","hide"],"mappings":"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","file":"static/js/10.ebe6c4e2.chunk.js","sourcesContent":["import { Layout, PageHeader, ProductTypeList, Listing, BrandBanner } from '../../components'\nimport { Redirect, useHistory, useLocation } from 'react-router'\nimport { useGetEntity } from '../../hooks/useAPI'\nimport { useSelector } from 'react-redux'\nimport queryString from 'query-string'\nimport { useEffect } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { getBrandRoute } from '../../selectors/configurationSelectors'\nimport { augmentProductType } from '../../utils'\n\nconst Brand = props => {\n  const brandRoute = useSelector(getBrandRoute)\n  const productTypeBase = useSelector(state => state.configuration.filtering.productTypeBase)\n\n  const path = props.location.pathname.split('/').reverse()\n  const loc = useLocation()\n  let params = queryString.parse(loc.search, { arrayFormat: 'separator', arrayFormatSeparator: ',' })\n\n  const history = useHistory()\n  let [brandResponse, setBrandRequest] = useGetEntity()\n  const [productTypeRequest, setProductTypeRequest] = useGetEntity()\n  const productTypeUrl = params['key'] || productTypeBase\n\n  useEffect(() => {\n    if (!productTypeRequest.isFetching && !productTypeRequest.isLoaded) {\n      setProductTypeRequest({\n        ...productTypeRequest,\n        isFetching: true,\n        isLoaded: false,\n        entity: 'ProductType',\n        params: { brandUrlTitle: path[0], 'p:show': 250, includeSettingsInList: true },\n        makeRequest: true,\n      })\n    }\n    if (!brandResponse.isFetching && !brandResponse.isLoaded) {\n      setBrandRequest({ ...brandResponse, isFetching: true, isLoaded: false, entity: 'brand', params: { 'f:urlTitle': path[0] }, makeRequest: true })\n    }\n  }, [productTypeUrl, setBrandRequest, brandResponse, path, setProductTypeRequest, productTypeRequest])\n\n  if (!productTypeRequest.isFetching && productTypeRequest.isLoaded && Object.keys(productTypeRequest.data).length === 0) {\n    return <Redirect to=\"/404\" />\n  }\n\n  const productTypeData = augmentProductType(productTypeUrl, productTypeRequest.data)\n  const isNonBasePTAndListing = productTypeData?.childProductTypes?.length !== 0 && productTypeUrl !== productTypeBase\n\n  return (\n    <Layout classNameList=\"page-overlap-none\">\n      {brandResponse.isLoaded && brandResponse.data.length > 0 && <Helmet title={brandResponse.data[0].settings.brandHTMLTitleString} />}\n      {brandResponse.isLoaded && productTypeRequest.isLoaded && (\n        <PageHeader\n          title={isNonBasePTAndListing && productTypeData?.productTypeName}\n          includeHome={true}\n          brand={params['key'] && [{ title: brandResponse.data[0].brandName, urlTitle: `/${brandRoute}/${brandResponse.data[0].urlTitle}` }]}\n          crumbs={productTypeRequest.data\n            .filter(productType => {\n              return productTypeData?.productTypeIDPath?.includes(productType.productTypeID)\n            })\n            .map(crumb => {\n              return { title: crumb.productTypeName, urlTitle: crumb.urlTitle }\n            })\n            .filter(crumb => crumb.urlTitle !== productTypeBase)\n            .filter(crumb => crumb.urlTitle !== productTypeUrl)\n            .map(crumb => {\n              return { ...crumb, urlTitle: `${loc.pathname}?${queryString.stringify({ key: crumb.urlTitle }, { arrayFormat: 'comma' })}` }\n            })}\n        >\n          <BrandBanner subHeading={productTypeData?.productTypeName} brandName={brandResponse.data[0].brandName} imageFile={brandResponse.data[0].imageFile} brandDescription={brandResponse.data[0].brandDescription} />\n        </PageHeader>\n      )}\n      {brandResponse.isLoaded && productTypeData.childProductTypes?.length > 0 && (\n        <ProductTypeList\n          data={productTypeData}\n          onSelect={urlTitle => {\n            params['key'] = urlTitle\n            history.push(`${loc.pathname}?${queryString.stringify(params, { arrayFormat: 'comma' })}`)\n          }}\n        />\n      )}\n      {productTypeData?.childProductTypes?.length === 0 && <Listing preFilter={{ brand: brandResponse.data[0].brandName, productType_slug: productTypeData.urlTitle }} hide={['productType', 'brands']} />}\n    </Layout>\n  )\n}\n\nexport default Brand\n"],"sourceRoot":""}