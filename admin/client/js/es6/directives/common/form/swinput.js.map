{"version":3,"sources":["directives/common/form/swinput.ts"],"names":[],"mappings":"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","file":"directives/common/form/swinput.js","sourceRoot":"/Users/david/Sites/Slatwall/","sourcesContent":["/**\n * This validate directive will look at the current element, figure out the context (save, edit, delete) and \n * validate based on that context as defined in the validation properties object.\n */\n'use strict';\nangular.module('slatwalladmin').directive('swInput',\n\n['$log',\n '$compile',\n 'utilityService',\n function(\n\t$log, \n\t$compile,\n\tutilityService\n) {\n\tvar getValidationDirectives = function(propertyDisplay){\n\t\tvar spaceDelimitedList = '';\n\t\tvar name = propertyDisplay.property;\n\t\tvar form = propertyDisplay.form.$$swFormInfo;\n\t\t$log.debug(\"Name is:\" + name + \" and form is: \" + form);\n\t\tvar validations = propertyDisplay.object.validations.properties[propertyDisplay.property];\n\t\t$log.debug(\"Validations: \");\n\t\tconsole.dir(validations);\n\t\tvar validationsForContext = [];\n\t\t\n\t\t//get the form context and the form name.\n\t\tvar formContext = propertyDisplay.form.$$swFormInfo.context;\n\t\tvar formName = propertyDisplay.form.$$swFormInfo.name;\n\t\t$log.debug(\"Form context is: \");\n\t\t$log.debug(formContext);\n\t\t$log.debug(\"Form Name: \");\n\t\t$log.debug(formName);\n\t\t//get the validations for the current element.\n\t\tvar propertyValidations = propertyDisplay.object.validations.properties[name];\n\t\t/*\n\t\t * Investigating why number inputs are not working.\n\t\t * */\n\t\t//check if the contexts match.\n\t\tif (angular.isObject(propertyValidations)){\n\t\t\tif (propertyValidations[0].contexts === formContext){\n\t\t\t\t$log.debug(\"Matched\");\n\t\t\t\tfor (var prop in propertyValidations[0]){\n\t\t\t\t\t\tif (prop != \"contexts\" && prop !== \"conditions\"){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tspaceDelimitedList += (\" swvalidation\" + prop.toLowerCase() + \"='\" + propertyValidations[0][prop] + \"'\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t$log.debug(spaceDelimitedList);\n\t\t}\n\t\t//loop over validations that are required and create the space delimited list\n\t\t$log.debug(validations);\n\t\t\n\t\t//get all validations related to the form context;\n\t\t$log.debug(form);\n\t\t$log.debug(propertyDisplay);\n\t\tangular.forEach(validations,function(validation,key){\n\t\t\tif(utilityService.listFind(validation.contexts.toLowerCase(),form.context.toLowerCase()) !== -1){\n\t\t\t\t$log.debug(\"Validations for context\");\n\t\t\t\t$log.debug(validation);\n\t\t\t\tvalidationsForContext.push(validation);\n\t\t\t}\n\t\t});\n\t\t\n\t\t//now that we have all related validations for the specific form context that we are working with collection the directives we need\n\t\t//getValidationDirectiveByType();\n\t\t\n\t\t\n\t\treturn spaceDelimitedList;\n\t};\n\t\n\tvar getTemplate = function(propertyDisplay){\n\t\tvar template = '';\n\t\tvar validations = '';\n\t\tif(!propertyDisplay.noValidate){\n\t\t\tvalidations = getValidationDirectives(propertyDisplay);\n\t\t}\n\t\tif(propertyDisplay.fieldType === 'text'){\n\t\t\ttemplate = '<input type=\"text\" class=\"form-control\" '+\n\t\t\t'ng-model=\"propertyDisplay.object.data[propertyDisplay.property]\" '+\n\t\t    'ng-disabled=\"!propertyDisplay.editable\" '+ \n\t\t    'ng-show=\"propertyDisplay.editing\" '+\n\t\t    'name=\"'+propertyDisplay.property+'\" ' +\n\t\t    validations+\n\t\t    'id=\"swinput'+utilityService.createID(26)+'\"'+\n\t\t\t' />';\n\t\t}\n\t\t\n\t\t/*else if(propertyDisplay.fieldType === \"number\"){\n\t\t\tconsole.info(\"Found Number Input\");\n\t\t\ttemplate = '<input type=\"number\" class=\"form-control\" '+\n\t\t\t'ng-model=\"propertyDisplay.object.data[propertyDisplay.property]\" '+\n\t\t    'ng-disabled=\"!propertyDisplay.editable\" '+ \n\t\t    'ng-show=\"propertyDisplay.editing\" '+\n\t\t    'name=\"'+propertyDisplay.property+'\" ' +\n\t\t    validations+\n\t\t    'id=\"swinput'+utilityService.createID(26)+'\"'+\n\t\t\t' />';\n\t\t\t$log.debug(template);\n\t\t\t$log.debug(validations);\n\t\t}*/\n\t\treturn template; \n\t};\n\t\n\treturn {\n\t\trequire:'^form',\n\t\tscope:{\n\t\t\tpropertyDisplay:\"=\"\n\t\t},\n\t\trestrict : \"E\",\n\t\t//adding model and form controller\n\t\tlink : function(scope, element, attr, formController) {\n\t\t\t//renders the template and compiles it\n\t\t\telement.html(getTemplate(scope.propertyDisplay));\n\t        $compile(element.contents())(scope);\n\t        \n\t        \n\t        \n\t\t}\n\t};\n} ]);"]}