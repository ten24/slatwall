{"version":3,"sources":["pages/ProductDetail/ProductPageHeader.js","pages/ProductDetail/ProductDetailGallery.js","pages/ProductDetail/ProductPagePanels.js","pages/ProductDetail/ProductPageContent.js","pages/ProductDetail/ProductDetailSlider.js","pages/ProductDetail/ProductDetail.js"],"names":["ProductPageHeader","title","children","className","ProductDetailGallery","productID","skuID","imageFile","useGetProductImageGallery","productImageGallery","setRequest","useState","nav1","nav2","sliders","setSliders","slider1","useRef","slider2","useEffect","current","isLoaded","isFetching","params","makeRequest","filterImages","data","images","filter","ASSIGNEDSKUIDLIST","TYPE","includes","length","ORIGINALPATH","NAME","unshift","splice","findIndex","item","ORIGINALFILENAME","id","arrows","asNavFor","ref","slider","map","customPath","src","alt","style","maxWidth","infinite","slidesToShow","swipeToSlide","focusOnSelect","propertyBlackList","ProductPagePanels","product","attributeSets","t","useTranslation","filteredAttributeSets","set","attributes","attr","attributeCode","sort","a","b","sortOrder","href","attributeSetCode","role","data-toggle","aria-expanded","aria-controls","attributeSetName","data-parent","attributeName","margin","padding","isBoolean","booleanToString","to","SkuOptions","skuOptionDetails","availableSkuOptions","sku","optionCode","optionGroupCode","lastOption","setLastOption","useSelector","state","cart","loc","useLocation","history","useHistory","queryString","parse","search","arrayFormat","arrayFormatSeparator","Object","keys","entries","filteredOptions","forEach","filteredOption","options","option","active","optionID","calculateOptions","forceSelcted","optionGroup","selectedOptions","JSON","stringify","skuid","console","log","push","pathname","cals","skuIdsToSkuCodes","selectedOptionIDList","assign","optionGroupName","optionGroupID","selectedOptionCode","htmlFor","required","disabled","value","onChange","e","selectedOption","flat","shift","getOptionByCode","target","setOption","optionName","ProductPageContent","productOptions","dispatch","useDispatch","quantity","setQuantity","productClearance","productName","skuCode","dangerouslySetInnerHTML","__html","productDescription","onSubmit","preventDefault","salePrice","price","listPrice","event","width","calculatedQATS","Array","index","isLoading","onClick","addToCart","window","scrollTo","top","behavior","ProductDetailSlider","products","err","relatedProducts","setRelatedProducts","didCancel","SlatwalApiService","getRelatedProducts","then","response","isSuccess","newProducts","success","renameKeysInArrayOfObjects","ProductSlider","sliderData","skuCodesToSkuIds","productOptionGroups","parsedOptions","optCount","join","ProductDetail","props","useGetProductAvailableSkuOptions","skuOptions","getSkuOptionsRequest","useGetEntityByUrlTitle","newproduct","getPublicProduct","productTypeRoute","getProductTypeRoute","location","path","setPath","productTypeBase","configuration","filtering","idList","defaultSelectedOptions","optionGroups","payload","listen","urlTitle","split","reverse","entity","productSeries","crumbs","breadcrumbs","crumb","productTypeName","Helmet","settings","productHTMLTitleString"],"mappings":"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","file":"static/js/18.3b25fddf.chunk.js","sourcesContent":["const ProductPageHeader = ({ title = '', children }) => {\n  return (\n    <div className=\"page-title-overlap bg-lightgray pt-4\">\n      <div className=\"container d-lg-flex justify-content-between py-2 py-lg-3\">\n        <div className=\"order-lg-1 pr-lg-4 text-center text-lg-left\">\n          <h1 className=\"h3 text-dark mb-0 font-accent\">{title}</h1>\n        </div>\n        <div className=\"order-lg-2 mb-3 mb-lg-0 pt-lg-2\">{children}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default ProductPageHeader\n","import React, { useEffect, useRef, useState } from 'react'\nimport Slider from 'react-slick'\nimport { SWImage } from '../../components'\nimport { useGetProductImageGallery } from '../../hooks/useAPI'\n\n/*\n\nProbably should move to this eventually \nhttps://react-slick.neostack.com/docs/example/custom-paging\n*/\nconst ProductDetailGallery = ({ productID, skuID, imageFile }) => {\n  let [productImageGallery, setRequest] = useGetProductImageGallery()\n  const [sliders, setSliders] = useState({\n    nav1: null,\n    nav2: null,\n  })\n  const slider1 = useRef()\n  const slider2 = useRef()\n\n  useEffect(() => {\n    setSliders({\n      nav1: slider1.current,\n      nav2: slider2.current,\n    })\n    if (!productImageGallery.isLoaded && !productImageGallery.isFetching) {\n      setRequest({ ...productImageGallery, isFetching: true, isLoaded: false, params: { productID }, makeRequest: true })\n    }\n  }, [productImageGallery, setRequest, productID])\n  let filterImages = productImageGallery.isLoaded\n    ? productImageGallery.data.images.filter(({ ASSIGNEDSKUIDLIST = false, TYPE }) => {\n        return TYPE === 'skuDefaultImage' || (ASSIGNEDSKUIDLIST && ASSIGNEDSKUIDLIST.includes(skuID))\n      })\n    : []\n  if (filterImages.length === 0) {\n    filterImages = [{ ORIGINALPATH: '', NAME: '' }]\n  }\n  filterImages.unshift(\n    filterImages.splice(\n      filterImages.findIndex(item => item.ORIGINALFILENAME === imageFile),\n      1\n    )[0]\n  )\n\n  return (\n    <div className=\"col-lg-6 pr-lg-5 pt-0\">\n      <div className=\"cz-product-gallery\">\n        <div className=\"cz-preview order-sm-2\">\n          <div className=\"cz-preview-item active\" id=\"first\">\n            <div>\n              <Slider arrows={false} asNavFor={sliders.nav2} ref={slider => (slider1.current = slider)}>\n                {productImageGallery.isLoaded &&\n                  filterImages.map(({ ORIGINALPATH, NAME }) => {\n                    return <SWImage key={NAME} customPath=\"/\" src={ORIGINALPATH} className=\"cz-image-zoom w-100 mx-auto\" alt=\"Product\" style={{ maxWidth: '500px' }} />\n                  })}\n              </Slider>\n            </div>\n            <div className=\"cz-image-zoom-pane\"></div>\n          </div>\n        </div>\n      </div>\n      <div className=\"cz-product-gallery\">\n        <div className=\"cz-preview order-sm-2\">\n          <div className=\"cz-preview-item active\" id=\"first\">\n            <div>\n              {filterImages.length > 1 && (\n                <Slider arrows={false} infinite={filterImages.length > 3} asNavFor={sliders.nav1} ref={slider => (slider2.current = slider)} slidesToShow={3} swipeToSlide={true} focusOnSelect={true}>\n                  {productImageGallery.isLoaded &&\n                    filterImages.map(({ ORIGINALPATH, NAME }) => {\n                      return <SWImage key={NAME} customPath=\"/\" src={ORIGINALPATH} className=\"cz-image-zoom w-100 mx-auto\" alt=\"Product\" style={{ maxWidth: '100px' }} />\n                    })}\n                </Slider>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default ProductDetailGallery\n","import { useTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { isBoolean, booleanToString } from '../../utils'\n\nconst propertyBlackList = ['productID', 'productName', 'productCode', 'productFeaturedFlag', 'productDisplay']\n\n// TODO: Migrate to reactstrap accordion\nconst ProductPagePanels = ({ product = {}, attributeSets = [] }) => {\n  const { t } = useTranslation()\n\n  const filteredAttributeSets = attributeSets\n    .map(set => {\n      return { ...set, attributes: set.attributes.filter(attr => attr.attributeCode in product && !propertyBlackList.includes(attr.attributeCode) && product[attr.attributeCode] !== ' ').sort((a, b) => a.sortOrder - b.sortOrder) }\n    })\n    .filter(set => set.attributes.length)\n\n  return (\n    <div className=\"accordion mb-4\" id=\"productPanels\">\n      {filteredAttributeSets.map(set => {\n        return (\n          <div key={set.attributeSetCode} className=\"card\">\n            <div className=\"card-header\">\n              <h3 className=\"accordion-heading\">\n                <a href={`#${set.attributeSetCode}`} role=\"button\" data-toggle=\"collapse\" aria-expanded=\"true\" aria-controls={set.attributeSetCode}>\n                  <i className=\"far fa-key font-size-lg align-middle mt-n1 mr-2\"></i>\n                  {set.attributeSetName}\n                  <span className=\"accordion-indicator\"></span>\n                </a>\n              </h3>\n            </div>\n            <div className=\"collapse show\" id={set.attributeSetCode} data-parent=\"#productPanels\">\n              <div className=\"card-body font-size-sm\">\n                {set.attributes.map(({ attributeName, attributeCode }) => {\n                  return (\n                    <div key={attributeCode} className=\"font-size-sm row\">\n                      <div className=\"col-6\">\n                        <ul style={{ margin: 0, padding: 0 }}>{attributeName}</ul>\n                      </div>\n                      <div className=\"col-6 text-muted\">\n                        <ul style={{ margin: 0, padding: 0 }}>{isBoolean(product[attributeCode]) ? booleanToString(product[attributeCode]) : product[attributeCode]}</ul>\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n          </div>\n        )\n      })}\n      {/* <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"accordion-heading\">\n            <a className=\"collapsed\" href=\"#technicalinfo\" role=\"button\" data-toggle=\"collapse\" aria-expanded=\"true\" aria-controls=\"technicalinfo\">\n              <i className=\"far fa-drafting-compass align-middle mt-n1 mr-2\"></i>\n              Technical Info<span className=\"accordion-indicator\"></span>\n            </a>\n          </h3>\n        </div>\n        <div className=\"collapse\" id=\"technicalinfo\" data-parent=\"#productPanels\">\n          <div className=\"card-body font-size-sm\">\n            <div className=\"d-flex justify-content-between border-bottom py-2\">\n              <div className=\"font-weight-semibold text-dark\">Document Title</div>\n              <a href=\"?=doc\">Download</a>\n            </div>\n            <div className=\"d-flex justify-content-between border-bottom py-2\">\n              <div className=\"font-weight-semibold text-dark\">Document Title</div>\n              <a href=\"?=doc\">Download</a>\n            </div>\n          </div>\n        </div>\n      </div> */}\n\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"accordion-heading\">\n            <a className=\"collapsed\" href=\"#questions\" role=\"button\" data-toggle=\"collapse\" aria-expanded=\"true\" aria-controls=\"questions\">\n              <i className=\"far fa-question-circle font-size-lg align-middle mt-n1 mr-2\"></i>\n              {t('frontend.product.questions.heading')}\n              <span className=\"accordion-indicator\"></span>\n            </a>\n          </h3>\n        </div>\n        <div className=\"collapse\" id=\"questions\" data-parent=\"#productPanels\">\n          <div className=\"card-body\">\n            <p>{t('frontend.product.questions.detail')}</p>\n            <Link to=\"/contact\">{t('frontend.nav.contact')}</Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ProductPagePanels\n","import ProductDetailGallery from './ProductDetailGallery'\nimport ProductPagePanels from './ProductPagePanels'\nimport { useEffect, useState } from 'react'\nimport { addToCart } from '../../actions/cartActions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button, HeartButton, ProductPrice } from '../../components'\nimport { useTranslation } from 'react-i18next'\nimport queryString from 'query-string'\nimport { useHistory, useLocation } from 'react-router'\nimport { skuIdsToSkuCodes } from '../../utils'\n\nconst ProductPageContent = ({ product, attributeSets, skuID, sku, productOptions = [], availableSkuOptions = '', isFetching = false }) => {\n  const dispatch = useDispatch()\n  const { t } = useTranslation()\n  const cart = useSelector(state => state.cart)\n  const [quantity, setQuantity] = useState(1)\n\n  return (\n    <div className=\"container bg-light box-shadow-lg rounded-lg px-4 py-3 mb-5\">\n      <div className=\"px-lg-3\">\n        <div className=\"row\">\n          <ProductDetailGallery productID={product.productID} skuID={skuID} />\n          {/* <!-- Product details--> */}\n          <div className=\"col-lg-6 pt-0\">\n            <div className=\"product-details pb-3\">\n              <div className=\"d-flex justify-content-between align-items-center mb-2\">\n                <span className=\"d-inline-block font-size-sm align-middle px-2 bg-primary text-light\"> {product.productClearance === true && ' On Special'}</span>\n                {skuID && <HeartButton skuID={skuID} className={'btn-wishlist mr-0'} />}\n              </div>\n              <h2 className=\"h4 mb-2\">{product.productName}</h2>\n              <div className=\"mb-2\">\n                <span className=\"text-small text-muted\">{`SKU: `}</span>\n                {sku && <span className=\"font-weight-normal text-large text-accent mr-1\">{sku.skuCode}</span>}\n              </div>\n              <div\n                className=\"mb-3 font-weight-light font-size-small text-muted\"\n                dangerouslySetInnerHTML={{\n                  __html: product.productDescription,\n                }}\n              />\n              <form className=\"mb-grid-gutter\" onSubmit={e => e.preventDefault()}>\n                {productOptions.length > 0 && <SkuOptions productID={product.productID} skuOptionDetails={productOptions} availableSkuOptions={availableSkuOptions} sku={sku} skuID={skuID} />}\n                <div className=\"mb-3\">{sku && <ProductPrice salePrice={sku.price} listPrice={sku.listPrice} />}</div>\n                <div className=\"form-group d-flex align-items-center\">\n                  <select\n                    value={quantity}\n                    onChange={event => {\n                      setQuantity(event.target.value)\n                    }}\n                    className=\"custom-select mr-3\"\n                    style={{ width: '5rem' }}\n                  >\n                    {sku &&\n                      sku.calculatedQATS > 0 &&\n                      [...Array(sku.calculatedQATS > 20 ? 20 : sku.calculatedQATS).keys()].map((value, index) => (\n                        <option key={index + 1} value={index + 1}>\n                          {index + 1}\n                        </option>\n                      ))}\n                  </select>\n                  <Button\n                    disabled={cart.isFetching || !skuID}\n                    isLoading={cart.isFetching}\n                    className=\"btn btn-primary btn-block\"\n                    onClick={event => {\n                      dispatch(addToCart(sku.skuID, quantity))\n                      window.scrollTo({\n                        top: 0,\n                        behavior: 'smooth',\n                      })\n                    }}\n                  >\n                    <i className=\"far fa-shopping-cart font-size-lg mr-2\"></i>\n                    {t('frontend.product.add_to_cart')}\n                  </Button>\n                </div>\n              </form>\n              {/* <!-- Product panels--> */}\n              <ProductPagePanels product={product} attributeSets={attributeSets} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nconst getOptionByCode = (filteredOptions, optionGroupCode, optionCode) => {\n  return filteredOptions\n    .filter(optionGroup => optionGroupCode === optionGroup.optionGroupCode)\n    .map(optionGroup => optionGroup.options.filter(option => optionCode === option.optionCode))\n    .flat()\n    .shift()\n}\nconst SkuOptions = ({ productID, skuOptionDetails, availableSkuOptions, sku, skuID }) => {\n  const [lastOption, setLastOption] = useState({ optionCode: '', optionGroupCode: '' })\n  const { isFetching } = useSelector(state => state.cart)\n  const loc = useLocation()\n  const history = useHistory()\n  const { t } = useTranslation()\n\n  let params = queryString.parse(loc.search, { arrayFormat: 'separator', arrayFormatSeparator: ',' })\n  if (lastOption.optionGroupCode.length === 0 && Object.keys(params).length > 0) {\n    setLastOption({ optionCode: Object.entries(params)[0][0], optionGroupCode: Object.entries(params)[0][1] })\n  }\n  const calculateOptions = () => {\n    let filteredOptions = skuOptionDetails\n    filteredOptions.forEach(filteredOption => {\n      filteredOption.options = filteredOption.options.map(option => {\n        option.active = true\n        return option\n      })\n    })\n    if (lastOption.optionGroupCode.length > 0) {\n      filteredOptions.forEach(filteredOption => {\n        filteredOption.options = filteredOption.options.map(option => {\n          option.active = filteredOption.optionGroupCode === lastOption.optionGroupCode || availableSkuOptions.includes(option.optionID)\n          return option\n        })\n      })\n    }\n    return filteredOptions\n  }\n  const setOption = (optionGroupCode, optionCode, active) => {\n    delete params['skuid']\n    setLastOption({ optionCode, optionGroupCode })\n    if (!active) {\n      params = {}\n    }\n    params[optionGroupCode] = optionCode\n    history.push({\n      pathname: loc.pathname,\n      search: queryString.stringify(params, { arrayFormat: 'comma' }),\n    })\n  }\n  let filteredOptions = calculateOptions()\n\n  useEffect(() => {\n    let forceSelcted = {}\n    filteredOptions.forEach(optionGroup => {\n      const selectedOptions = optionGroup.options.filter(({ active }) => {\n        return active\n      })\n      if (selectedOptions.length === 1) {\n        forceSelcted[optionGroup.optionGroupCode] = selectedOptions[0].optionCode\n      }\n    })\n    // onkect sort order\n    if (Object.keys(forceSelcted) && JSON.stringify({ ...forceSelcted, ...params }).length !== JSON.stringify(params).length && !params.skuid) {\n      console.log('Redirect because of foreced Selection')\n      history.push({\n        pathname: loc.pathname,\n        search: queryString.stringify({ ...forceSelcted, ...params }, { arrayFormat: 'comma' }),\n      })\n    }\n\n    if (params.skuid && sku) {\n      console.log('Redirect to passed Sku', skuOptionDetails)\n      const cals = skuIdsToSkuCodes(sku.selectedOptionIDList, skuOptionDetails)\n      history.push({\n        pathname: loc.pathname,\n        search: queryString.stringify(Object.assign(...cals), { arrayFormat: 'comma' }),\n      })\n    }\n  }, [history, filteredOptions, loc, params, sku, skuOptionDetails])\n\n  return (\n    <>\n      {filteredOptions.length > 0 &&\n        filteredOptions.map(({ optionGroupName, options, optionGroupID, optionGroupCode }) => {\n          const selectedOptionCode = params[optionGroupCode] || 'select'\n          return (\n            <div className=\"form-group\" key={optionGroupID}>\n              <div className=\"d-flex justify-content-between align-items-center pb-1\">\n                <label className=\"font-weight-medium\" htmlFor={optionGroupID}>\n                  {optionGroupName}\n                </label>\n              </div>\n              <select\n                className=\"custom-select\"\n                required\n                disabled={isFetching}\n                value={selectedOptionCode}\n                id={optionGroupID}\n                onChange={e => {\n                  const selectedOption = getOptionByCode(filteredOptions, optionGroupCode, e.target.value)\n                  setOption(optionGroupCode, selectedOption.optionCode, selectedOption.active)\n                }}\n              >\n                {selectedOptionCode === 'select' && (\n                  <option className={`option nonactive`} value=\"select\">\n                    {t('frontend.product.select')}\n                  </option>\n                )}\n                {options &&\n                  options.map(option => {\n                    return (\n                      <option className={`option ${option.active ? 'active' : 'nonactive'}`} key={option.optionID} value={option.optionCode}>\n                        {option.active && option.optionName}\n                        {!option.active && option.optionName + ' - ' + t('frontend.product.na')}\n                      </option>\n                    )\n                  })}\n              </select>\n            </div>\n          )\n        })}\n    </>\n  )\n}\n\nexport default ProductPageContent\n","import React, { useEffect, useState } from 'react'\nimport { SlatwalApiService } from '../../services'\nimport ProductSlider from '../../components/ProductSlider/ProductSlider'\nimport { renameKeysInArrayOfObjects } from '../../utils'\nimport { useTranslation } from 'react-i18next'\n\nconst ProductDetailSlider = ({ productID }) => {\n  const { t } = useTranslation()\n  const [relatedProducts, setRelatedProducts] = useState({ products: [], isLoaded: false, err: '', productID })\n  if (relatedProducts.productID !== productID) {\n    setRelatedProducts({ products: [], isLoaded: false, err: '', productID })\n  }\n  useEffect(() => {\n    let didCancel = false\n    if (!relatedProducts.isLoaded) {\n      SlatwalApiService.products.getRelatedProducts({ productID }).then(response => {\n        if (response.isSuccess() && !didCancel) {\n          let newProducts = response.success().relatedProducts\n\n          renameKeysInArrayOfObjects(newProducts, 'relatedProduct_', '')\n          setRelatedProducts({\n            ...relatedProducts,\n            isLoaded: true,\n            products: newProducts,\n          })\n        } else {\n          setRelatedProducts({\n            ...relatedProducts,\n            isLoaded: true,\n            err: 'oops',\n          })\n        }\n      })\n    }\n\n    return () => {\n      didCancel = true\n    }\n  }, [relatedProducts, setRelatedProducts, productID])\n  return <ProductSlider title={t('frontend.product.related')} sliderData={relatedProducts.products} />\n}\nexport default ProductDetailSlider\n","// import PropTypes from 'prop-types'\nimport React, { useEffect, useState } from 'react'\n\nimport { BreadCrumb, Layout } from '../../components'\nimport ProductPageHeader from './ProductPageHeader'\nimport ProductPageContent from './ProductPageContent'\nimport ProductDetailSlider from './ProductDetailSlider'\nimport { Redirect, useHistory, useLocation } from 'react-router-dom'\nimport { useGetProductAvailableSkuOptions, useGetEntityByUrlTitle } from '../../hooks/useAPI'\nimport queryString from 'query-string'\nimport { Helmet } from 'react-helmet'\nimport { useSelector } from 'react-redux'\nimport { getProductTypeRoute } from '../../selectors/configurationSelectors'\nconst skuCodesToSkuIds = (params, productOptionGroups) => {\n  const parsedOptions = queryString.parse(params, { arrayFormat: 'separator', arrayFormatSeparator: ',' })\n  const temp = Object.keys(parsedOptions).map(optionGroupCode => {\n    return productOptionGroups\n      .map(optionGroup => {\n        const optCount = optionGroup.options.filter(option => {\n          return option.optionCode === parsedOptions[optionGroupCode]\n        })[0]\n        return optCount ? optCount.optionID : null\n      })\n      .filter(option => option)\n  })\n  return temp.join()\n}\n\nconst skuIdsToSkuCodes = (idList, productOptionGroups) => {\n  return productOptionGroups\n    .map(optionGroup =>\n      optionGroup.options\n        .filter(option => {\n          return idList.includes(option.optionID)\n        })\n        .map(option => {\n          let payload = {}\n          payload[optionGroup.optionGroupCode] = option.optionCode\n          return payload\n        })\n    )\n    .flat()\n}\nconst ProductDetail = props => {\n  let { pathname, search } = useLocation()\n  let [skuOptions, getSkuOptionsRequest] = useGetProductAvailableSkuOptions()\n  let [newproduct, getPublicProduct] = useGetEntityByUrlTitle()\n  const productTypeRoute = useSelector(getProductTypeRoute)\n\n  let location = useLocation()\n  let history = useHistory()\n  const [path, setPath] = useState(pathname)\n  const params = queryString.parse(search, { arrayFormat: 'separator', arrayFormatSeparator: ',' })\n  const productTypeBase = useSelector(state => state.configuration.filtering.productTypeBase)\n\n  useEffect(() => {\n    // Redirect to default sku if not provided\n    if (newproduct.isLoaded && !Object.keys(params).length) {\n      console.log('Redirect to Default Sku')\n      const cals = skuIdsToSkuCodes(newproduct.data.defaultSelectedOptions, newproduct.data.optionGroups)\n      history.push({\n        pathname: location.pathname,\n        search: queryString.stringify(Object.assign(...cals), { arrayFormat: 'comma' }),\n      })\n    }\n    // get the sku\n    if (newproduct.isLoaded && !skuOptions.isFetching && !skuOptions.isLoaded) {\n      const selectedOptionIDList = skuCodesToSkuIds(search, newproduct.data.optionGroups)\n      getSkuOptionsRequest({\n        ...skuOptions,\n        isFetching: true,\n        isLoaded: false,\n        params: {\n          productID: newproduct.data.productID,\n          skuID: params['skuid'],\n          // Accounts for First Load\n          selectedOptionIDList: selectedOptionIDList.length ? selectedOptionIDList : newproduct.data.defaultSelectedOptions,\n        },\n        makeRequest: true,\n      })\n    }\n    // http://localhost:3006/product/demo-product?skuid=2c91808278f0fded0178f5d49b860da8\n\n    history.listen(location => {\n      if (!newproduct.isFetching && newproduct.isLoaded) {\n        const selectedOptionIDList = skuCodesToSkuIds(location.search, newproduct.data.optionGroups)\n        getSkuOptionsRequest({\n          ...skuOptions,\n          isFetching: true,\n          isLoaded: false,\n          params: {\n            productID: newproduct.data.productID,\n            // Accounts for First Load\n            selectedOptionIDList,\n          },\n          makeRequest: true,\n        })\n      }\n    })\n  }, [history, getSkuOptionsRequest, skuOptions, params, search, location, newproduct])\n\n  // Do we have a valid product?\n  if (!newproduct.isFetching && newproduct.isLoaded && newproduct.data && Object.keys(newproduct.data).length === 0) {\n    return <Redirect to=\"/404\" />\n  }\n  // Get the Product on page chnage\n  if (pathname !== path) {\n    console.log('Refresh all')\n    setPath(pathname)\n\n    // getSkuOptionsRequest({\n    //   ...skuOptions,\n    //   isFetching: false,\n    //   isLoaded: false,\n    //   params: {\n    //     productID: newproduct.data[0].productID,\n    //     selectedOptionIDList: Object.keys(parsedOptions)\n    //       .map(optionGroupCode => {\n    //         return newproduct.data[0].optionGroups\n    //           .map(optionGroup => {\n    //             const optCount = optionGroup.options.filter(option => {\n    //               return option.optionCode === parsedOptions[optionGroupCode]\n    //             })[0]\n    //             return optCount ? optCount.optionID : null\n    //           })\n    //           .filter(option => option)[0]\n    //       })\n    //       .join(),\n    //   },\n    //   makeRequest: false,\n    // })\n  }\n  if (!newproduct.isFetching && !newproduct.isLoaded) {\n    const urlTitle = pathname.split('/').reverse()\n    setPath(pathname)\n    getPublicProduct({\n      ...newproduct,\n      params: {\n        urlTitle: urlTitle[0],\n      },\n      entity: 'product',\n      makeRequest: true,\n      isFetching: true,\n      isLoaded: false,\n    })\n  }\n\n  return (\n    <Layout>\n      <div className=\"bg-light p-0\">\n        {newproduct.isLoaded && (\n          <ProductPageHeader title={newproduct.data.productSeries}>\n            <BreadCrumb\n              crumbs={newproduct.data.breadcrumbs\n                .map(crumb => {\n                  return { title: crumb.productTypeName, urlTitle: `/${productTypeRoute}/${crumb.urlTitle}` }\n                })\n                .filter(crumb => crumb.urlTitle !== `/${productTypeRoute}/${productTypeBase}`)}\n            />\n          </ProductPageHeader>\n        )}\n        {newproduct.isLoaded && <Helmet title={newproduct.data.settings.productHTMLTitleString} />}\n        {newproduct.isLoaded && newproduct.data.productID && <ProductPageContent attributeSets={newproduct.attributeSets} product={newproduct.data} sku={skuOptions.data.sku[0]} skuID={skuOptions.data.skuID} availableSkuOptions={skuOptions.data.availableSkuOptions} productOptions={newproduct.data.optionGroups} isFetching={skuOptions.isFetching || newproduct.isFetching} />}\n        {newproduct.isLoaded && newproduct.data.productID && <ProductDetailSlider productID={newproduct.data.productID} />}\n      </div>\n    </Layout>\n  )\n}\n\nexport default ProductDetail\n"],"sourceRoot":""}