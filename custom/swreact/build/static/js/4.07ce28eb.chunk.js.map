{"version":3,"sources":["pages/Checkout/SlideNavigation.js","pages/Checkout/ShippingAddressForm.js","pages/Checkout/AccountAddress.js","selectors/orderSelectors.js","pages/Checkout/Shipping.js","pages/Checkout/CreditCardDetails.js","pages/Checkout/Payment.js","pages/Checkout/Review.js","pages/Checkout/steps.js","pages/Checkout/Checkout.js"],"names":["SlideNavigation","currentStep","nextActive","history","useHistory","className","to","previous","next","length","disabled","onClick","e","preventDefault","push","ShippingAddressForm","formik","isEdit","countryCodeOptions","stateCodeOptions","dispatch","useDispatch","htmlFor","type","id","value","values","accountAddressName","onChange","handleChange","name","streetAddress","street2Address","city","SwSelect","countryCode","getStateCodeOptionsByCountryCode","target","options","stateCode","postalCode","ShippingAddress","onSave","useSelector","state","content","useState","setEdit","useFormik","enableReinitialize","initialValues","company","saveAddress","blindShip","onSubmit","useEffect","getCountries","handleSubmit","AccountAddress","onSelect","selectedAccountID","addressTitle","accountAddresses","userReducer","showAddress","setShowAddress","label","map","accountAddressID","address","newLabel","selectedValue","displayNew","getAllOrderFulfillments","cart","orderFulfillments","getAllAccountAddresses","fulfillmentMethodSelector","createSelector","selectedFulfillmentMethod","fulfillmentMethodID","fulfillmentMethod","fulfillmentSelector","selectedFulfillment","fulfillmentMethodType","shippingAddressSelector","orderFulfillment","shippingAddress","shippingMethodSelector","shippingMethodID","shippingMethod","accountAddressSelector","accountAddress","selectAccount","filter","pickupLocationOptions","pickupLocations","locations","location","pickupLocation","fulfillment","locationID","orderPayment","orderPayments","paymentMethod","paymentMethodID","accountPaymentMethod","accountPaymentMethodID","eligiblePaymentMethodDetailSelector","eligiblePaymentMethodDetails","paymentMethodName","billingAccountAddressSelector","paymentOnOrder","billingAccountAddress","billingAddressNickname","accountPaymentMethods","payment","accountPaymentMethodName","shippingAddressNicknameSelector","shippingAddressNickname","addressID","FulfillmentPicker","eligibleFulfillmentMethods","orderItems","orderItemIDList","orderItem","orderItemID","join","changeOrderFulfillment","ShippingMethodPicker","selectedShippingMethod","shippingMethodOptions","addShippingMethod","fulfillmentID","orderFulfillmentID","PickupLocationPicker","selectedLocation","estimatedShippingDate","selected","Date","showTimeSelect","timeIntervals","timeCaption","dateFormat","pickupDate","setPickupDate","toLocaleString","replace","addPickupLocation","ShippingSlide","orderRequirementsList","getEligibleFulfillmentMethods","getPickupLocations","addShippingAddressUsingAccountAddress","addAddressAndAttachAsShipping","includes","months","Array","from","_","i","key","years","fill","getFullYear","year","index","CreditCardDetails","t","useTranslation","creditCardNumber","nameOnCreditCard","expirationMonth","getMonth","expirationYear","toString","substring","securityCode","saveShippingAsBilling","returnJSONObjects","payload","paymentMethodType","newOrderPayment","addPaymentMethod","setFieldValue","addNewAccountAndSetAsBilling","checked","CreditCardPayemnt","paymentMethods","setNewOrderPayment","addPayment","GiftCardPayemnt","TermPayment","method","setAccountAddressID","purchaseOrderNumber","termOrderNumber","setTermOrderNumber","PaymentSlide","selectedPaymentMethod","setSelectedPaymentMethod","paymentMethodOnOrder","setPaymentMethodOnOrder","ReviewSlide","billingNickname","isPlaced","creditCardPayment","termPayment","isDisabled","REVIEW","checkOutSteps","progress","icon","getCurrentStep","path","step","StepsHeader","loc","useLocation","pathname","split","reverse","toLowerCase","current","progressSate","href","link","CheckoutSideBar","isFetching","total","taxTotal","subtotal","discountTotal","fulfillmentChargeAfterDiscountTotal","useFormatCurrency","formatCurrency","event","placeOrder","Checkout","match","useRouteMatch","verifiedAccountFlag","enforceVerifiedAccountFlag","configuration","isAuthenticated","PageHeader","Shipping","Payment","Review"],"mappings":"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","file":"static/js/4.07ce28eb.chunk.js","sourcesContent":["import { Link, useHistory } from 'react-router-dom'\n\nconst SlideNavigation = ({ currentStep, nextActive = true }) => {\n  let history = useHistory()\n\n  return (\n    <>\n      <div className=\"d-lg-flex pt-4 mt-3\">\n        <div className=\"w-50 pr-3\">\n          <Link className=\"btn btn-secondary btn-block\" to={currentStep.previous}>\n            <i className=\"far fa-chevron-left\"></i> <span className=\"d-none d-sm-inline\">Back</span>\n            <span className=\"d-inline d-sm-none\">Back</span>\n          </Link>\n        </div>\n        {currentStep.next.length > 0 && (\n          <div className=\"w-50 pl-2\">\n            <button\n              className=\"btn btn-primary btn-block\"\n              disabled={!nextActive}\n              onClick={e => {\n                e.preventDefault()\n                history.push(currentStep.next)\n              }}\n            >\n              <span className=\"d-none d-sm-inline\">Continue</span>\n              <span className=\"d-inline d-sm-none\">Next</span> <i className=\"far fa-chevron-right\"></i>\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default SlideNavigation\n","import SwSelect from '../../components/SwSelect/SwSelect'\nimport { useDispatch } from 'react-redux'\nimport { getStateCodeOptionsByCountryCode } from '../../actions/contentActions'\n\nconst ShippingAddressForm = ({ formik, isEdit, countryCodeOptions, stateCodeOptions }) => {\n  const dispatch = useDispatch()\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"accountAddressName\">Nickname</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"accountAddressName\" value={formik.values.accountAddressName} onChange={formik.handleChange} />\n          </div>\n        </div>\n        <div className=\"col-sm-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"name\" value={formik.values.name} onChange={formik.handleChange} />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"streetAddress\">Address 1</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"streetAddress\" value={formik.values.streetAddress} onChange={formik.handleChange} />\n          </div>\n        </div>\n        <div className=\"col-sm-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"street2Address\">Address 2</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"street2Address\" value={formik.values.street2Address} onChange={formik.handleChange} />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-4\">\n          <div className=\"form-group\">\n            <label htmlFor=\"city\">City</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"city\" value={formik.values.city} onChange={formik.handleChange} />\n          </div>\n        </div>\n        <div className=\"col-sm-3\">\n          <div className=\"form-group\">\n            <label htmlFor=\"checkout-country\">Country</label>\n            <SwSelect\n              id=\"countryCode\"\n              disabled={!isEdit}\n              value={formik.values.countryCode}\n              onChange={e => {\n                e.preventDefault()\n                dispatch(getStateCodeOptionsByCountryCode(e.target.value))\n                formik.handleChange(e)\n              }}\n              options={countryCodeOptions}\n            />\n          </div>\n        </div>\n        {stateCodeOptions.length > 0 && (\n          <div className=\"col-sm-3\">\n            <div className=\"form-group\">\n              <label htmlFor=\"stateCode\">State</label>\n              <SwSelect\n                id=\"stateCode\"\n                disabled={!isEdit}\n                value={formik.values.stateCode}\n                onChange={e => {\n                  e.preventDefault()\n                  formik.handleChange(e)\n                }}\n                options={stateCodeOptions}\n              />\n            </div>\n          </div>\n        )}\n\n        <div className=\"col-sm-2\">\n          <div className=\"form-group\">\n            <label htmlFor=\"postalCode\">ZIP Code</label>\n            <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"postalCode\" value={formik.values.postalCode} onChange={formik.handleChange} />\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\nexport default ShippingAddressForm\n","import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getCountries, getStateCodeOptionsByCountryCode } from '../../actions/contentActions'\nimport { useFormik } from 'formik'\nimport { SwRadioSelect } from '../../components'\nimport ShippingAddressForm from './ShippingAddressForm'\nconst ShippingAddress = ({ onSave }) => {\n  const dispatch = useDispatch()\n  const countryCodeOptions = useSelector(state => state.content.countryCodeOptions)\n  const stateCodeOptions = useSelector(state => state.content.stateCodeOptions['US']) || []\n  const [isEdit, setEdit] = useState(true)\n\n  let initialValues = {\n    name: '',\n    company: '',\n    streetAddress: '',\n    street2Address: '',\n    city: '',\n    stateCode: '',\n    postalCode: '',\n    countryCode: 'US',\n    accountAddressName: '',\n    saveAddress: true,\n    blindShip: false,\n  }\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: initialValues,\n    onSubmit: values => {\n      setEdit(!isEdit)\n      onSave(values)\n    },\n  })\n  useEffect(() => {\n    dispatch(getCountries())\n    dispatch(getStateCodeOptionsByCountryCode(formik.values.countryCode))\n  }, [dispatch, formik])\n\n  return (\n    <>\n      <form onSubmit={formik.handleSubmit}>\n        <ShippingAddressForm formik={formik} isEdit={isEdit} countryCodeOptions={countryCodeOptions} stateCodeOptions={stateCodeOptions} />\n        <div className=\"d-lg-flex pt-4 mt-3\">\n          <div className=\"w-50 pr-3\"></div>\n          <div className=\"w-50 pl-2\">\n            <button className=\"btn btn-outline-primary btn-block\" onClick={formik.handleSubmit}>\n              <span className=\"d-none d-sm-inline\">Save</span>\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  )\n}\n\nconst AccountAddress = ({ onSelect, onSave, selectedAccountID, addressTitle = 'Addresses' }) => {\n  const accountAddresses = useSelector(state => state.userReducer.accountAddresses)\n  const [showAddress, setShowAddress] = useState(false)\n  if (showAddress) {\n    selectedAccountID = 'new'\n  }\n  return (\n    <>\n      <h2 className=\"h6 pt-1 pb-3 mb-3 border-bottom\">{addressTitle}</h2>\n      {accountAddresses && (\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <SwRadioSelect\n              label=\"Account Address\"\n              options={accountAddresses.map(({ accountAddressName, accountAddressID, address: { streetAddress } }) => {\n                return { name: `${accountAddressName} - ${streetAddress}`, value: accountAddressID }\n              })}\n              onChange={value => {\n                if (value === 'new') {\n                  setShowAddress(true)\n                } else {\n                  setShowAddress(false)\n                  onSelect(value)\n                }\n              }}\n              newLabel=\"Add Account Address\"\n              selectedValue={selectedAccountID}\n              displayNew={true}\n            />\n          </div>\n        </div>\n      )}\n      {showAddress && (\n        <ShippingAddress\n          setShowAddress={showAddress}\n          onSave={values => {\n            setShowAddress(false)\n            onSave(values)\n          }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default AccountAddress\n","import { createSelector } from 'reselect'\n\nexport const getAllOrderFulfillments = state => state.cart.orderFulfillments\nexport const getAllAccountAddresses = state => state.userReducer.accountAddresses\nexport const getAllAccountPaymentMethods = state => state.userReducer.accountPaymentMethods\nexport const getAllPickupLocations = state => state.cart.pickupLocations\nexport const getAllOrderPayments = state => state.cart.orderPayments\nexport const getAllEligiblePaymentMethodDetails = state => state.cart.eligiblePaymentMethodDetails\n\nexport const fulfillmentMethodSelector = createSelector(getAllOrderFulfillments, orderFulfillments => {\n  let selectedFulfillmentMethod = { fulfillmentMethodID: '' }\n  if (orderFulfillments[0] && orderFulfillments[0].fulfillmentMethod) {\n    selectedFulfillmentMethod = orderFulfillments[0].fulfillmentMethod\n  }\n  return selectedFulfillmentMethod\n})\n\nexport const fulfillmentSelector = createSelector(getAllOrderFulfillments, orderFulfillments => {\n  let selectedFulfillment = { fulfillmentMethodID: '', fulfillmentMethod: { fulfillmentMethodType: '' } }\n  if (orderFulfillments[0]) {\n    selectedFulfillment = orderFulfillments[0]\n  }\n  return selectedFulfillment\n})\n\nexport const shippingAddressSelector = createSelector(fulfillmentSelector, orderFulfillment => {\n  return orderFulfillment.shippingAddress || {}\n})\n\nexport const shippingMethodSelector = createSelector(getAllOrderFulfillments, orderFulfillments => {\n  let selectedFulfillmentMethod = { shippingMethodID: '' }\n  if (orderFulfillments[0] && orderFulfillments[0].shippingMethod) {\n    selectedFulfillmentMethod = orderFulfillments[0].shippingMethod\n  }\n  return selectedFulfillmentMethod\n})\n\nexport const accountAddressSelector = createSelector([getAllAccountAddresses, getAllOrderFulfillments], (accountAddresses, orderFulfillments) => {\n  let selectedAccountID = ''\n  if (orderFulfillments.length && accountAddresses.length && orderFulfillments[0].accountAddress) {\n    const selectAccount = accountAddresses\n      .filter(({ accountAddressID }) => {\n        return accountAddressID === orderFulfillments[0].accountAddress.accountAddressID\n      })\n      .map(({ accountAddressID }) => {\n        return accountAddressID\n      })\n    selectedAccountID = selectAccount.length ? selectAccount[0] : ''\n  }\n\n  return selectedAccountID\n})\n\nexport const pickupLocationOptions = createSelector(getAllPickupLocations, (locations = []) => {\n  return locations.map(location => {\n    return { name: location['NAME'], value: location['VALUE'] }\n  })\n})\n\nexport const pickupLocation = createSelector(fulfillmentSelector, fulfillment => {\n  let location = { locationID: '' }\n  if (fulfillment.pickupLocation) {\n    location = fulfillment.pickupLocation\n  }\n  return location\n})\n\nexport const orderPayment = createSelector(getAllOrderPayments, orderPayments => {\n  let orderPayment = { paymentMethod: { paymentMethodID: '' }, accountPaymentMethod: { accountPaymentMethodID: '' } }\n  if (orderPayments.length) {\n    orderPayment = orderPayments[0]\n  }\n  return orderPayment\n})\n\nexport const eligiblePaymentMethodDetailSelector = createSelector(getAllEligiblePaymentMethodDetails, (eligiblePaymentMethodDetails = []) => {\n  return eligiblePaymentMethodDetails.map(({ paymentMethod }) => {\n    return { name: paymentMethod.paymentMethodName, value: paymentMethod.paymentMethodID }\n  })\n})\n\nexport const billingAccountAddressSelector = createSelector([getAllAccountAddresses, orderPayment], (accountAddresses, paymentOnOrder) => {\n  let selectedAccountID = ''\n  if (accountAddresses.length && paymentOnOrder && paymentOnOrder.billingAccountAddress) {\n    const selectAccount = accountAddresses\n      .filter(({ accountAddressID }) => {\n        return accountAddressID === paymentOnOrder.billingAccountAddress.accountAddressID\n      })\n      .map(({ accountAddressID }) => {\n        return accountAddressID\n      })\n    selectedAccountID = selectAccount.length ? selectAccount[0] : ''\n  }\n\n  return selectedAccountID\n})\n\nexport const billingAddressNickname = createSelector([getAllAccountPaymentMethods, orderPayment], (accountPaymentMethods, payment) => {\n  let billingAddressNickname = ''\n  if (payment && payment.accountPaymentMethod) {\n    billingAddressNickname = accountPaymentMethods\n      .filter(({ accountPaymentMethodID }) => {\n        return accountPaymentMethodID === payment.accountPaymentMethod.accountPaymentMethodID\n      })\n      .map(({ accountPaymentMethodName }) => {\n        return accountPaymentMethodName\n      })\n    billingAddressNickname = billingAddressNickname.length ? billingAddressNickname[0] : ''\n  }\n  return billingAddressNickname\n})\nexport const shippingAddressNicknameSelector = createSelector([fulfillmentSelector, getAllAccountAddresses], (fulfillment, accountAddresses = []) => {\n  let shippingAddressNickname = accountAddresses\n    .filter(accountAddress => {\n      return fulfillment.shippingAddress && accountAddress.address.addressID === fulfillment.shippingAddress.addressID\n    })\n    .map(({ accountAddressName }) => {\n      return accountAddressName\n    })\n  shippingAddressNickname = shippingAddressNickname.length ? shippingAddressNickname[0] : ''\n\n  return shippingAddressNickname\n})\n","import { useDispatch, useSelector } from 'react-redux'\nimport { addAddressAndAttachAsShipping, addPickupLocation, addShippingAddressUsingAccountAddress, addShippingMethod, changeOrderFulfillment, getEligibleFulfillmentMethods, getPickupLocations, setPickupDate } from '../../actions/cartActions'\nimport SlideNavigation from './SlideNavigation'\nimport { SwRadioSelect } from '../../components'\nimport AccountAddress from './AccountAddress'\nimport { useEffect } from 'react'\nimport { accountAddressSelector, fulfillmentMethodSelector, fulfillmentSelector, pickupLocation, pickupLocationOptions, shippingMethodSelector } from '../../selectors/orderSelectors'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nconst FulfillmentPicker = () => {\n  const dispatch = useDispatch()\n  const { eligibleFulfillmentMethods, orderItems } = useSelector(state => state.cart)\n  let selectedFulfillmentMethod = useSelector(fulfillmentMethodSelector)\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col-sm-12\">\n        {eligibleFulfillmentMethods && eligibleFulfillmentMethods.length > 0 && (\n          <SwRadioSelect\n            label=\"How do you want to recieve your items?\"\n            options={eligibleFulfillmentMethods}\n            onChange={fulfillmentMethodID => {\n              const orderItemIDList = orderItems\n                .map(orderItem => {\n                  return orderItem.orderItemID\n                })\n                .join()\n              dispatch(changeOrderFulfillment({ fulfillmentMethodID, orderItemIDList }))\n            }}\n            selectedValue={selectedFulfillmentMethod.fulfillmentMethodID}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst ShippingMethodPicker = () => {\n  const dispatch = useDispatch()\n  const orderFulfillments = useSelector(state => state.cart.orderFulfillments)\n  const selectedShippingMethod = useSelector(shippingMethodSelector)\n  const orderFulfillment = useSelector(fulfillmentSelector)\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col-sm-12\">\n        {orderFulfillments.length > 0 && (\n          <SwRadioSelect\n            label=\"How do you want to recieve your items?\"\n            options={orderFulfillment.shippingMethodOptions}\n            onChange={value => {\n              dispatch(\n                addShippingMethod({\n                  shippingMethodID: value,\n                  fulfillmentID: orderFulfillment.orderFulfillmentID,\n                })\n              )\n            }}\n            selectedValue={selectedShippingMethod.shippingMethodID}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst PickupLocationPicker = () => {\n  const dispatch = useDispatch()\n  const pickupLocations = useSelector(pickupLocationOptions)\n  const selectedLocation = useSelector(pickupLocation)\n  const { orderFulfillmentID, estimatedShippingDate } = useSelector(fulfillmentSelector)\n\n  return (\n    <>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          <div className=\"form-group\">\n            <label htmlFor=\"locationPickupDate\">Pickup Date</label>\n            <br />\n            <DatePicker\n              id=\"locationPickupDate\"\n              selected={estimatedShippingDate ? new Date(estimatedShippingDate) : ''}\n              showTimeSelect\n              timeIntervals={60}\n              timeCaption=\"Time\"\n              dateFormat=\"MM/dd/yyyy h:mm aa\"\n              onChange={pickupDate => {\n                dispatch(\n                  setPickupDate({\n                    pickupDate: pickupDate.toLocaleString().replace(',', ''),\n                    orderFulfillmentID,\n                  })\n                )\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          {pickupLocations.length > 0 && (\n            <SwRadioSelect\n              label=\"Which Location would you like to pickup from?\"\n              options={pickupLocations}\n              onChange={value => {\n                dispatch(\n                  addPickupLocation({\n                    value,\n                  })\n                )\n              }}\n              selectedValue={selectedLocation.locationID}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst ShippingSlide = ({ currentStep }) => {\n  const dispatch = useDispatch()\n  const { orderRequirementsList } = useSelector(state => state.cart)\n  let selectedFulfillmentMethod = useSelector(fulfillmentSelector)\n  let selectedAccountID = useSelector(accountAddressSelector)\n  const orderFulfillment = useSelector(fulfillmentSelector)\n\n  useEffect(() => {\n    dispatch(getEligibleFulfillmentMethods())\n    dispatch(getPickupLocations())\n  }, [dispatch])\n\n  return (\n    <>\n      <FulfillmentPicker />\n      {selectedFulfillmentMethod.fulfillmentMethod.fulfillmentMethodType === 'pickup' && <PickupLocationPicker />}\n      {selectedFulfillmentMethod.fulfillmentMethod.fulfillmentMethodType === 'shipping' && (\n        <AccountAddress\n          addressTitle={'Shipping address'}\n          selectedAccountID={selectedAccountID}\n          onSelect={value => {\n            dispatch(\n              addShippingAddressUsingAccountAddress({\n                accountAddressID: value,\n                fulfillmentID: orderFulfillment.orderFulfillmentID,\n              })\n            )\n          }}\n          onSave={values => {\n            dispatch(addAddressAndAttachAsShipping({ ...values }))\n          }}\n        />\n      )}\n      {selectedFulfillmentMethod.fulfillmentMethod.fulfillmentMethodType === 'shipping' && selectedAccountID.length > 0 && <ShippingMethodPicker />}\n      <SlideNavigation currentStep={currentStep} nextActive={!orderRequirementsList.includes('fulfillment')} />\n    </>\n  )\n}\n\nexport default ShippingSlide\n","import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useFormik } from 'formik'\nimport SwSelect from '../../components/SwSelect/SwSelect'\nimport { useTranslation } from 'react-i18next'\nimport { addNewAccountAndSetAsBilling } from '../../actions/cartActions'\nimport { getCountries, getStateCodeOptionsByCountryCode } from '../../actions/contentActions'\nimport AccountAddress from './AccountAddress'\nimport { addPaymentMethod } from '../../actions/userActions'\n\nexport const CREDIT_CARD = '444df303dedc6dab69dd7ebcc9b8036a'\nexport const GIFT_CARD = '50d8cd61009931554764385482347f3a'\n\nconst months = Array.from({ length: 12 }, (_, i) => {\n  return { key: i + 1, value: i + 1 }\n})\nconst years = Array(10)\n  .fill(new Date().getFullYear())\n  .map((year, index) => {\n    return { key: year + index, value: year + index }\n  })\n\nconst CreditCardDetails = ({ onSubmit }) => {\n  const [isEdit, setEdit] = useState(true)\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const billingAccountAddress = useSelector(state => state.cart.billingAccountAddress)\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      creditCardNumber: '',\n      nameOnCreditCard: '',\n      expirationMonth: new Date().getMonth() + 1,\n      expirationYear: new Date().getFullYear().toString().substring(2),\n      securityCode: '',\n      accountPaymentMethodName: '',\n      accountAddressID: billingAccountAddress ? billingAccountAddress.accountAddressID : '',\n      saveShippingAsBilling: false,\n      returnJSONObjects: 'cart',\n    },\n    onSubmit: values => {\n      let payload = {\n        accountPaymentMethodName: values.accountPaymentMethodName,\n        paymentMethodType: 'creditCard',\n        nameOnCreditCard: values.nameOnCreditCard,\n        creditCardNumber: values.creditCardNumber,\n        expirationMonth: values.expirationMonth,\n        expirationYear: values.expirationYear,\n        securityCode: values.securityCode,\n        billingAccountAddress: {\n          accountAddressID: values.accountAddressID,\n        },\n      }\n      if (values.saveShippingAsBilling) {\n        payload.newOrderPayment['saveShippingAsBilling'] = 1\n        delete payload.newOrderPayment.accountAddressID\n      }\n      dispatch(addPaymentMethod(payload))\n      setEdit(!isEdit)\n      onSubmit()\n    },\n  })\n\n  useEffect(() => {\n    dispatch(getCountries())\n    dispatch(getStateCodeOptionsByCountryCode(formik.values.countryCode))\n  }, [dispatch, formik])\n  return (\n    <>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          {!formik.values.saveShippingAsBilling && (\n            <>\n              <AccountAddress\n                addressTitle={'Billing Address'}\n                selectedAccountID={formik.values.accountAddressID}\n                onSelect={value => {\n                  formik.setFieldValue('accountAddressID', value)\n                }}\n                onSave={values => {\n                  dispatch(addNewAccountAndSetAsBilling({ ...values }))\n                }}\n              />\n            </>\n          )}\n        </div>\n      </div>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          <h2 className=\"h6 pt-1 pb-3 mb-3 border-bottom\">Credit Card Information</h2>\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"accountPaymentMethodName\">{t('frontend.account.payment_method.nickname')}</label>\n                <input className=\"form-control\" type=\"text\" id=\"accountPaymentMethodName\" value={formik.values.accountPaymentMethodName} onChange={formik.handleChange} />{' '}\n              </div>\n            </div>\n\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"nameOnCreditCard\">{t('frontend.account.payment_method.name')}</label>\n                <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"nameOnCreditCard\" value={formik.values.nameOnCreditCard} onChange={formik.handleChange} />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-5\">\n              <div className=\"form-group\">\n                <label htmlFor=\"creditCardNumber\">{t('frontend.account.payment_method.ccn')}</label>\n                <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"creditCardNumber\" value={formik.values.creditCardNumber} onChange={formik.handleChange} />\n              </div>\n            </div>\n            <div className=\"col-sm-2\">\n              <div className=\"form-group\">\n                <label htmlFor=\"securityCode\">{t('frontend.account.payment_method.cvv')}</label>\n                <input disabled={!isEdit} className=\"form-control\" type=\"text\" id=\"securityCode\" value={formik.values.securityCode} onChange={formik.handleChange} />\n              </div>\n            </div>\n            <div className=\"col-sm-3\">\n              <div className=\"form-group\">\n                <label htmlFor=\"expirationMonth\">{t('frontend.account.payment_method.expiration_month')}</label>\n                <SwSelect disabled={!isEdit} id=\"expirationMonth\" value={formik.values.expirationMonth} onChange={formik.handleChange} options={months} />\n              </div>\n            </div>\n            <div className=\"col-sm-2\">\n              <div className=\"form-group\">\n                <label htmlFor=\"expirationYear\">{t('frontend.account.payment_method.expiration_year')}</label>\n                <SwSelect disabled={!isEdit} id=\"expirationYear\" value={formik.values.expirationYear} onChange={formik.handleChange} options={years} />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"row mb-3\">\n            <div className=\"col-sm-12\">\n              <div className=\"row\">\n                <div className=\"col-sm-12\">\n                  <div className=\"custom-control custom-checkbox\">\n                    <input className=\"custom-control-input\" type=\"checkbox\" id=\"saveShippingAsBilling\" checked={formik.values.saveShippingAsBilling} onChange={formik.handleChange} />\n                    <label className=\"custom-control-label\" htmlFor=\"saveShippingAsBilling\">\n                      Same as shipping address\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {formik.values.accountAddressID !== '' && (\n            <div className=\"d-lg-flex pt-4 mt-3\">\n              <div className=\"w-50 pr-3\"></div>\n              <div className=\"w-50 pl-2\">\n                <button className=\"btn btn-outline-primary btn-block\" onClick={formik.handleSubmit}>\n                  <span className=\"d-none d-sm-inline\">Save</span>\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default CreditCardDetails\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { SwRadioSelect } from '../../components'\nimport SlideNavigation from './SlideNavigation'\nimport { addNewAccountAndSetAsBilling, addPayment } from '../../actions/cartActions'\nimport CreditCardDetails from './CreditCardDetails'\nimport { eligiblePaymentMethodDetailSelector, orderPayment, billingAccountAddressSelector } from '../../selectors/orderSelectors'\nimport { accountPaymentMethods } from '../../selectors/userSelectors'\nimport AccountAddress from './AccountAddress'\n\nexport const CREDIT_CARD = '444df303dedc6dab69dd7ebcc9b8036a'\nexport const GIFT_CARD = '50d8cd61009931554764385482347f3a'\nexport const TERM_PAYMENT = '2c918088783591e3017836350bd21385'\n\nconst CreditCardPayemnt = () => {\n  const paymentMethods = useSelector(accountPaymentMethods)\n  const [newOrderPayment, setNewOrderPayment] = useState(false)\n  const { accountPaymentMethod = { accountPaymentMethodID: '' } } = useSelector(orderPayment)\n  const dispatch = useDispatch()\n\n  return (\n    <>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          <SwRadioSelect\n            label=\"Select Payment\"\n            options={paymentMethods}\n            onChange={value => {\n              if (value === 'new') {\n                setNewOrderPayment('new')\n              } else {\n                setNewOrderPayment(false)\n                dispatch(\n                  addPayment({\n                    accountPaymentMethodID: value,\n                  })\n                )\n              }\n            }}\n            newLabel=\"Add Payment Method\"\n            selectedValue={newOrderPayment ? newOrderPayment : accountPaymentMethod.accountPaymentMethodID}\n            displayNew={true}\n          />\n        </div>\n      </div>\n      {newOrderPayment === 'new' && (\n        <CreditCardDetails\n          onSubmit={() => {\n            setNewOrderPayment(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n\nconst GiftCardPayemnt = () => {\n  return (\n    <>\n      <h1>Gift Cards</h1>\n    </>\n  )\n}\nconst TermPayment = ({ method }) => {\n  const dispatch = useDispatch()\n  const [accountAddressID, setAccountAddressID] = useState('')\n  const { purchaseOrderNumber } = useSelector(orderPayment)\n  const [termOrderNumber, setTermOrderNumber] = useState(purchaseOrderNumber || '')\n  const selectedAccountID = useSelector(billingAccountAddressSelector)\n\n  return (\n    <>\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          <div className=\"form-group\">\n            <label htmlFor=\"purchaseOrderNumber\">Purchase Order Number</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id=\"purchaseOrderNumber\"\n              value={termOrderNumber}\n              onChange={e => {\n                e.preventDefault()\n                setTermOrderNumber(e.target.value)\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      {termOrderNumber.length > 0 && (\n        <AccountAddress\n          addressTitle={'Billing Address'}\n          selectedAccountID={selectedAccountID || accountAddressID}\n          onSelect={value => {\n            dispatch(\n              addPayment({\n                accountAddressID: value,\n                newOrderPayment: {\n                  purchaseOrderNumber: termOrderNumber,\n                  paymentMethod: {\n                    paymentMethodID: method,\n                  },\n                },\n              })\n            )\n            setAccountAddressID(value)\n          }}\n          onSave={values => {\n            dispatch(addNewAccountAndSetAsBilling({ ...values }))\n          }}\n        />\n      )}\n    </>\n  )\n}\nconst PaymentSlide = ({ currentStep }) => {\n  const orderRequirementsList = useSelector(state => state.cart.orderRequirementsList)\n  const eligiblePaymentMethodDetails = useSelector(eligiblePaymentMethodDetailSelector)\n  const { paymentMethod } = useSelector(orderPayment)\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('')\n  const [paymentMethodOnOrder, setPaymentMethodOnOrder] = useState(false)\n\n  if (paymentMethod && paymentMethod.paymentMethodID && paymentMethodOnOrder !== paymentMethod.paymentMethodID) {\n    setPaymentMethodOnOrder(paymentMethod.paymentMethodID)\n    setSelectedPaymentMethod(paymentMethod.paymentMethodID)\n  }\n  return (\n    <>\n      {/* <!-- Payment Method --> */}\n      <div className=\"row mb-3\">\n        <div className=\"col-sm-12\">\n          <SwRadioSelect\n            label=\"Select Your Method of Payment\"\n            options={eligiblePaymentMethodDetails}\n            onChange={value => {\n              setSelectedPaymentMethod(value)\n            }}\n            selectedValue={selectedPaymentMethod.length > 0 ? selectedPaymentMethod : paymentMethodOnOrder}\n          />\n        </div>\n      </div>\n      {selectedPaymentMethod === CREDIT_CARD && <CreditCardPayemnt />}\n      {selectedPaymentMethod === GIFT_CARD && <GiftCardPayemnt />}\n      {selectedPaymentMethod === TERM_PAYMENT && <TermPayment method={selectedPaymentMethod} />}\n\n      <SlideNavigation currentStep={currentStep} nextActive={!orderRequirementsList.includes('payment')} />\n    </>\n  )\n}\n\nexport default PaymentSlide\n","import { useSelector } from 'react-redux'\nimport { Redirect } from 'react-router'\nimport { CartLineItem, GiftCardDetails, PickupLocationDetails, ShippingAddressDetails, CreditCardDetails, TermPaymentDetails, BillingAddressDetails } from '../../components'\nimport { fulfillmentSelector, shippingAddressSelector, orderPayment, billingAddressNickname, shippingAddressNicknameSelector } from '../../selectors/orderSelectors'\nimport SlideNavigation from './SlideNavigation'\n\nconst ReviewSlide = ({ currentStep }) => {\n  const cart = useSelector(state => state.cart)\n  const { fulfillmentMethod } = useSelector(fulfillmentSelector)\n  const payment = useSelector(orderPayment)\n  const shippingAddress = useSelector(shippingAddressSelector)\n  let billingNickname = useSelector(billingAddressNickname)\n\n  let shippingAddressNickname = useSelector(shippingAddressNicknameSelector)\n  if (cart.isPlaced) {\n    return <Redirect to={'/order-confirmation'} />\n  }\n\n  return (\n    <>\n      <div className=\"row bg-lightgray pt-3 pr-3 pl-3 rounded mb-5\">\n        {fulfillmentMethod.fulfillmentMethodType === 'shipping' && (\n          <div className=\"col-md-4\">\n            <ShippingAddressDetails shippingAddress={shippingAddress} shippingAddressNickname={shippingAddressNickname} />\n          </div>\n        )}\n        {fulfillmentMethod.fulfillmentMethodType === 'pickup' && (\n          <div className=\"col-md-4\">\n            <PickupLocationDetails pickupLocation={fulfillmentMethod} />\n          </div>\n        )}\n        <div className=\"col-md-4\">\n          <BillingAddressDetails billingAddressNickname={billingNickname} orderPayment={payment} />\n        </div>\n        {payment.paymentMethod.paymentMethodType === 'creditCard' && (\n          <div className=\"col-md-4\">\n            <CreditCardDetails creditCardPayment={payment} />\n          </div>\n        )}\n        {payment.paymentMethod.paymentMethodType === 'giftCard' && (\n          <div className=\"col-md-4\">\n            <GiftCardDetails />\n          </div>\n        )}\n        {payment.paymentMethod.paymentMethodType === 'termPayment' && (\n          <div className=\"col-md-4\">\n            <TermPaymentDetails termPayment={payment} />\n          </div>\n        )}\n      </div>\n\n      <h2 className=\"h6 pt-1 pb-3 mb-3 border-bottom\">Review your order</h2>\n      {cart.orderItems &&\n        cart.orderItems.map(({ orderItemID }) => {\n          return <CartLineItem key={orderItemID} orderItemID={orderItemID} isDisabled={true} /> // this cannot be index or it wont force a rerender\n        })}\n      <SlideNavigation currentStep={currentStep} />\n    </>\n  )\n}\n\nexport default ReviewSlide\n","const CART = 'checkout'\nconst SHIPPING = 'shipping'\nconst PAYMENT = 'payment'\nconst REVIEW = 'review'\n\nconst checkOutSteps = [\n  {\n    key: CART,\n    progress: 1,\n    icon: 'shopping-cart',\n    name: 'frontend.checkout.cart',\n    state: '',\n    previous: '',\n    next: '',\n  },\n  {\n    key: SHIPPING,\n    progress: 2,\n    icon: 'shipping-fast',\n    name: 'frontend.checkout.shipping',\n    state: '',\n    next: 'payment',\n    previous: '/shopping-cart',\n  },\n  {\n    key: PAYMENT,\n    progress: 3,\n    icon: 'credit-card',\n    name: 'frontend.checkout.payment',\n    state: '',\n    previous: 'shipping',\n    next: 'review',\n  },\n  {\n    key: REVIEW,\n    progress: 4,\n    icon: 'check-circle',\n    name: 'frontend.checkout.review',\n    state: '',\n    previous: 'payment',\n    next: '',\n  },\n]\nexport { checkOutSteps, CART, SHIPPING, PAYMENT, REVIEW }\n","import { CartPromoBox, Layout, OrderNotes, PromotionalMessaging } from '../../components'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Redirect, Route, Switch, useHistory, useLocation, useRouteMatch } from 'react-router-dom'\nimport PageHeader from '../../components/PageHeader/PageHeader'\nimport { useTranslation } from 'react-i18next'\nimport './checkout.css'\nimport useFormatCurrency from '../../hooks/useFormatCurrency'\nimport ShippingSlide from './Shipping'\nimport PaymentSlide from './Payment'\nimport ReviewSlide from './Review'\n\nimport { checkOutSteps, REVIEW } from './steps'\nimport { placeOrder } from '../../actions/cartActions'\nimport { isAuthenticated } from '../../utils'\nimport { useEffect } from 'react'\n// https://www.digitalocean.com/community/tutorials/how-to-create-multistep-forms-with-react-and-semantic-ui\n// https://github.com/srdjan/react-multistep/blob/master/react-multistep.js\n// https://www.geeksforgeeks.org/how-to-create-multi-step-progress-bar-using-bootstrap/\n\n//\nconst getCurrentStep = path => {\n  return (checkOutSteps.filter(step => {\n    return step.key === path\n  }) || [checkOutSteps[1]])[0]\n}\n\nconst StepsHeader = () => {\n  const { t } = useTranslation()\n  const loc = useLocation()\n  let history = useHistory()\n\n  const path = loc.pathname.split('/').reverse()[0].toLowerCase()\n  const current = getCurrentStep(path)\n  return (\n    <div className=\"steps steps-dark pt-2 pb-3 mb-5\">\n      {checkOutSteps.map(step => {\n        let progressSate = ''\n        if (step.progress < current.progress) {\n          progressSate = 'active'\n        } else if (step.progress === current.progress) {\n          progressSate = 'active current'\n        }\n        return (\n          <a\n            className={`step-item ${progressSate}`}\n            href={`/${step.name}`}\n            key={step.progress}\n            onClick={e => {\n              e.preventDefault()\n              history.push(step.link)\n            }}\n          >\n            <div className=\"step-progress\">\n              <span className=\"step-count\">{step.progress}</span>\n            </div>\n            <div className=\"step-label\">\n              <i className={`fal fa-${step.icon}`}></i>\n              {t(step.name)}\n            </div>\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nconst CheckoutSideBar = () => {\n  const cart = useSelector(state => state.cart)\n  const { isFetching, total, taxTotal, subtotal, discountTotal, fulfillmentChargeAfterDiscountTotal } = cart\n  const loc = useLocation()\n  const path = loc.pathname.split('/').reverse()[0].toLowerCase()\n  const currentStep = getCurrentStep(path)\n  const [formatCurrency] = useFormatCurrency({})\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n\n  return (\n    <aside className=\"col-lg-4 pt-4 pt-lg-0\">\n      <div className=\"cz-sidebar-static rounded-lg box-shadow-lg ml-lg-auto\">\n        <PromotionalMessaging />\n\n        <div className=\"widget mb-3\">\n          <h2 className=\"widget-title text-center\">Order summary</h2>\n        </div>\n        <ul className=\"list-unstyled font-size-sm pb-2 border-bottom\">\n          <li className=\"d-flex justify-content-between align-items-center\">\n            <span className=\"mr-2\">Subtotal:</span>\n            <span className=\"text-right\">{subtotal > 0 ? formatCurrency(subtotal) : '--'}</span>\n          </li>\n          <li className=\"d-flex justify-content-between align-items-center\">\n            <span className=\"mr-2\">Shipping:</span>\n            <span className=\"text-right\">{fulfillmentChargeAfterDiscountTotal > 0 ? formatCurrency(fulfillmentChargeAfterDiscountTotal) : '--'}</span>\n          </li>\n          <li className=\"d-flex justify-content-between align-items-center\">\n            <span className=\"mr-2\">Taxes:</span>\n            <span className=\"text-right\">{taxTotal > 0 ? formatCurrency(taxTotal) : '--'}</span>\n          </li>\n          <li className=\"d-flex justify-content-between align-items-center\">\n            <span className=\"mr-2\">Discount:</span>\n            <span className=\"text-right\">{discountTotal > 0 ? formatCurrency(discountTotal) : '--'}</span>\n          </li>\n        </ul>\n        <h3 className=\"font-weight-normal text-center my-4\">\n          <span>{total > 0 ? formatCurrency(total) : '--'}</span>\n        </h3>\n        {currentStep.key !== REVIEW && <CartPromoBox />}\n        {currentStep.key === REVIEW && <OrderNotes />}\n        {currentStep.key === REVIEW && (\n          <button\n            className=\"btn btn-primary btn-block mt-4\"\n            type=\"submit\"\n            disabled={isFetching}\n            onClick={event => {\n              dispatch(placeOrder())\n              event.preventDefault()\n            }}\n          >\n            {t('frontend.order.complete')}\n          </button>\n        )}\n      </div>\n    </aside>\n  )\n}\nconst Checkout = () => {\n  let match = useRouteMatch()\n  const loc = useLocation()\n  const history = useHistory()\n  const path = loc.pathname.split('/').reverse()[0].toLowerCase()\n  const currentStep = getCurrentStep(path)\n  const verifiedAccountFlag = useSelector(state => state.userReducer.verifiedAccountFlag)\n  const enforceVerifiedAccountFlag = useSelector(state => state.configuration.enforceVerifiedAccountFlag)\n\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      history.push(`/my-account?redirect=${loc.pathname}`)\n    }\n  }, [history, loc])\n\n  if (enforceVerifiedAccountFlag && !verifiedAccountFlag && isAuthenticated()) {\n    return <Redirect to=\"/account-verification\" />\n  }\n\n  return (\n    <Layout>\n      <PageHeader />\n      <div className=\"container pb-5 mb-2 mb-md-4\">\n        <div className=\"row\">\n          <section className=\"col-lg-8\">\n            {/* <!-- Steps--> */}\n            <StepsHeader />\n            <Route path={`${match.path}/cart`}>\n              <Redirect to=\"/cart\" />\n            </Route>\n\n            <Switch>\n              <Route path={`${match.path}/shipping`}>\n                <ShippingSlide currentStep={currentStep} />\n              </Route>\n\n              <Route path={`${match.path}/payment`}>\n                <PaymentSlide currentStep={currentStep} />\n              </Route>\n              <Route path={`${match.path}/review`}>\n                <ReviewSlide currentStep={currentStep} />\n              </Route>\n              <Route path={match.path}>\n                <Redirect to={`${match.path}/shipping`} />\n              </Route>\n            </Switch>\n          </section>\n          {/* <!-- Sidebar--> */}\n          <CheckoutSideBar />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Checkout\n"],"sourceRoot":""}