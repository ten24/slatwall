{"version":3,"sources":["hooks/index.js","components/Account/AccountCarts/AccountCarts.js","pages/MyAccount/MyAccount.js"],"names":["OrderStatus","type","text","className","OrderListItem","props","useFormatCurrency","formatCurrency","useFormatDate","formateDate","dispatch","useDispatch","t","useTranslation","orderID","createdDateTime","orderStatusType_typeName","calculatedTotal","Button","onClick","event","setOrderOnCart","window","scrollTo","top","behavior","AccountCarts","useState","keyword","setSearchTerm","useGetAccountCartsAndQuotes","orders","setRequest","search","currentPage","params","pageRecordsShow","makeRequest","isFetching","isLoaded","useEffect","didCancel","AccountLayout","AccountToolBar","term","updateTerm","data","map","order","index","recordsCount","records","totalPages","Math","ceil","setPage","AccountLogin","React","lazy","AccountOverview","AccountProfile","AccountFavorites","AccountAddresses","CreateOrEditAccountAddress","AccountOrderDetail","AccountPaymentMethods","AccountOrderHistory","CreateOrEditAccountPaymentMethod","MyAccount","match","useRouteMatch","loc","useLocation","user","useSelector","state","userReducer","isAuthenticated","accountID","length","getUser","includes","queryString","parse","to","redirect","path","pathname","split","reverse","forwardState","CreateAccount","ForgotPassword"],"mappings":"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","file":"static/js/7.14c598ce.chunk.js","sourcesContent":["import useFormatCurrency from './useFormatCurrency'\nexport { useGetEntityByUrlTitle, useGetAccountCartsAndQuotes, useGetProductsByEntity, useGetSkuOptionDetails, useGetEntity, useGetEntityByID, useGetSku, useGetProductDetails, useGetBrand, useGetBrands, useGetProductList, useGetProducts, useGetAvailableShippingMethods, useGetAvailablePaymentMethods, useAddWishlistItem, useGetOrderDetails, useGetAllOrders, useAddOrderShippingAddress, useGetFavouriteProducts, useGetSkuList, useGetProductSkus, useGetProductAvailableSkuOptions, useGetProductSkuSelected, useGetProductImageGallery } from './useAPI'\nexport { useFormatDate, useFormatDateTime, useFormatTime } from './useFormatDate'\nexport { useRedirect, usePush } from './useRedirect'\nexport { useFormatCurrency }\n","import React, { useEffect, useState } from 'react'\n// import PropTypes from 'prop-types'\nimport { AccountLayout } from '../AccountLayout/AccountLayout'\nimport AccountContent from '../AccountContent/AccountContent'\nimport { useTranslation } from 'react-i18next'\nimport { useGetAccountCartsAndQuotes } from '../../../hooks/useAPI'\nimport { useFormatCurrency, useFormatDate } from '../../../hooks'\nimport { Button } from '../../Button/Button'\nimport { useDispatch } from 'react-redux'\nimport { setOrderOnCart } from '../../../actions'\nimport { ListingPagination } from '../..'\nimport { AccountToolBar } from '../AccountToolBar/AccountToolBar'\nconst OrderStatus = ({ type = 'info', text }) => {\n  return <span className={`badge badge-${type} m-0`}>{text}</span>\n}\nconst OrderListItem = props => {\n  const [formatCurrency] = useFormatCurrency({})\n  const [formateDate] = useFormatDate()\n  const dispatch = useDispatch()\n  const { t } = useTranslation()\n\n  const { orderID, createdDateTime, orderStatusType_typeName, calculatedTotal } = props\n  return (\n    <tr>\n      <td className=\"py-3\">{formateDate(createdDateTime)}</td>\n      <td className=\"py-3\">\n        <OrderStatus text={orderStatusType_typeName} />\n      </td>\n      <td className=\"py-3\">{formatCurrency(calculatedTotal)}</td>\n      <td className=\"py-3\">\n        <Button\n          onClick={event => {\n            dispatch(setOrderOnCart(orderID))\n            window.scrollTo({\n              top: 0,\n              behavior: 'smooth',\n            })\n          }}\n        >\n          {t('frontend.account.order.change_order')}\n        </Button>\n        <br />\n      </td>\n    </tr>\n  )\n}\n\nconst AccountCarts = () => {\n  const [keyword, setSearchTerm] = useState('')\n  const { t } = useTranslation()\n  let [orders, setRequest] = useGetAccountCartsAndQuotes()\n  const search = (currentPage = 1) => {\n    setRequest({ ...orders, params: { currentPage, pageRecordsShow: 10, keyword }, makeRequest: true, isFetching: true, isLoaded: false })\n  }\n  useEffect(() => {\n    let didCancel = false\n    if (!orders.isFetching && !orders.isLoaded && !didCancel) {\n      setRequest({ ...orders, isFetching: true, isLoaded: false, params: { pageRecordsShow: 20, keyword }, makeRequest: true })\n    }\n    return () => {\n      didCancel = true\n    }\n  }, [orders, keyword, setRequest])\n\n  return (\n    <AccountLayout>\n      <AccountToolBar term={keyword} updateTerm={setSearchTerm} search={search} />\n\n      <div className=\"table-responsive font-size-md\">\n        <table className=\"table table-hover mb-0\">\n          <thead>\n            <tr>\n              <th>{t('frontend.core.date_created')}</th>\n              <th>{t('frontend.account.order.status')}</th>\n              <th> {t('frontend.account.order.total')}</th>\n              <th>{t('frontend.account.order.select_order')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {orders.isLoaded &&\n              orders.data.map((order, index) => {\n                return <OrderListItem key={index} {...order} />\n              })}\n          </tbody>\n        </table>\n      </div>\n      <hr className=\"pb-4\" />\n      <ListingPagination recordsCount={orders.data.records} currentPage={orders.data.currentPage} totalPages={Math.ceil(orders.data.records / 20)} setPage={search} />\n    </AccountLayout>\n  )\n}\n\nexport default AccountCarts\n","import React, { useEffect } from 'react'\nimport { Layout } from '../../components'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Switch, Route, useRouteMatch, useLocation, Redirect } from 'react-router-dom'\nimport { getUser } from '../../actions/userActions'\nimport CreateAccount from '../../components/Account/CreateAccount/CreateAccount'\nimport ForgotPassword from '../../components/Account/ForgotPassword/ForgotPassword'\nimport { isAuthenticated } from '../../utils'\nimport queryString from 'query-string'\nimport AccountCarts from '../../components/Account/AccountCarts/AccountCarts'\n\n// I think we should be prelaoding these https://medium.com/maxime-heckel/react-lazy-a-take-on-preloading-views-cc90be869f14\nconst AccountLogin = React.lazy(() => import('../../components/Account/AccountLogin/AccountLogin'))\nconst AccountOverview = React.lazy(() => import('../../components/Account/AccountOverview/AccountOverview'))\nconst AccountProfile = React.lazy(() => import('../../components/Account/AccountProfile/AccountProfile'))\nconst AccountFavorites = React.lazy(() => import('../../components/Account/AccountFavorites/AccountFavorites'))\nconst AccountAddresses = React.lazy(() => import('../../components/Account/AccountAddresses/AccountAddresses'))\nconst CreateOrEditAccountAddress = React.lazy(() => import('../../components/Account/AccountAddresses/CreateOrEditAccountAddress'))\nconst AccountOrderDetail = React.lazy(() => import('../../components/Account/AccountOrderDetail/AccountOrderDetail'))\nconst AccountPaymentMethods = React.lazy(() => import('../../components/Account/AccountPaymentMethods/AccountPaymentMethods'))\nconst AccountOrderHistory = React.lazy(() => import('../../components/Account/AccountOrderHistory/AccountOrderHistory'))\nconst CreateOrEditAccountPaymentMethod = React.lazy(() => import('../../components/Account/AccountPaymentMethods/CreateOrEditAccountPaymentMethod'))\n// eslint-disable-next-line no-unused-vars\nconst pageComponents = {\n  AccountLogin,\n  AccountOverview,\n  AccountProfile,\n  AccountFavorites,\n  AccountAddresses,\n  CreateOrEditAccountAddress,\n  AccountOrderDetail,\n  AccountPaymentMethods,\n  AccountOrderHistory,\n  CreateOrEditAccountPaymentMethod,\n}\nconst MyAccount = () => {\n  let match = useRouteMatch()\n  let loc = useLocation()\n  const dispatch = useDispatch()\n  const user = useSelector(state => state.userReducer)\n\n  useEffect(() => {\n    if (isAuthenticated() && !user.isFetching && !user.accountID.length) {\n      dispatch(getUser())\n    }\n  }, [dispatch, user])\n  if (isAuthenticated() && loc.search.includes('redirect=')) {\n    const params = queryString.parse(loc.search)\n    return <Redirect to={params.redirect} />\n  }\n\n  const path = loc.pathname.split('/').reverse()\n  return (\n    <Layout>\n      {isAuthenticated() && (\n        <Switch>\n          <Route path={`${match.path}/addresses/:id`}>\n            <CreateOrEditAccountAddress path={path[0]} />\n          </Route>\n          <Route path={`${match.path}/addresses`}>\n            <AccountAddresses />\n          </Route>\n          <Route path={`${match.path}/cards/:id`}>\n            <CreateOrEditAccountPaymentMethod path={path[0]} />\n          </Route>\n          <Route path={`${match.path}/cards`}>\n            <AccountPaymentMethods />\n          </Route>\n          <Route path={`${match.path}/favorites`}>\n            <AccountFavorites />\n          </Route>\n          <Route path={`${match.path}/orders/:id`}>\n            <AccountOrderDetail path={path[0]} forwardState={loc.state} />\n          </Route>\n          <Route path={`${match.path}/orders`}>\n            <AccountOrderHistory />\n          </Route>\n          <Route path={`${match.path}/profile`}>\n            <AccountProfile />\n          </Route>\n          <Route path={`${match.path}/carts`}>\n            <AccountCarts />\n          </Route>\n          <Route path={match.path}>{isAuthenticated() && <AccountOverview />}</Route>\n        </Switch>\n      )}\n      {!isAuthenticated() && (\n        <Switch>\n          <Route path={`${match.path}/createAccount`}>\n            <CreateAccount />\n          </Route>\n          <Route path={`${match.path}/forgotPassword`}>\n            <ForgotPassword />\n          </Route>\n          <Route path={match.path}>\n            <AccountLogin />\n          </Route>\n        </Switch>\n      )}\n    </Layout>\n  )\n}\n\nexport default MyAccount\n"],"sourceRoot":""}