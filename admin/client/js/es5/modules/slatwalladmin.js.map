{"version":3,"names":[],"mappings":"","sources":["modules/slatwalladmin.js"],"sourcesContent":["/// <reference path=\"../../../../client/typings/tsd.d.ts\" />\n/// <reference path=\"../../../../client/typings/slatwallTypeScript.d.ts\" />\nvar slatwallAdmin;\n(function (slatwallAdmin) {\n    angular.module('slatwalladmin', ['ngSlatwall', 'ui.bootstrap', 'ngAnimate', 'ngRoute', 'ngCkeditor']).config([\"$provide\", '$logProvider', '$filterProvider', '$httpProvider', '$routeProvider', '$injector', '$locationProvider', 'datepickerConfig', 'datepickerPopupConfig', function ($provide, $logProvider, $filterProvider, $httpProvider, $routeProvider, $injector, $locationProvider, datepickerConfig, datepickerPopupConfig) {\n        datepickerConfig.showWeeks = false;\n        datepickerConfig.format = 'MMM dd, yyyy hh:mm a';\n        datepickerPopupConfig.toggleWeeksText = null;\n        if (slatwallAngular.hashbang) {\n            $locationProvider.html5Mode(false).hashPrefix('!');\n        }\n        //\n        $provide.constant(\"baseURL\", $.slatwall.getConfig().baseURL);\n        var _partialsPath = $.slatwall.getConfig().baseURL + '/admin/client/partials/';\n        $provide.constant(\"partialsPath\", _partialsPath);\n        $provide.constant(\"productBundlePartialsPath\", _partialsPath + 'productbundle/');\n        angular.forEach(slatwallAngular.constantPaths, function (constantPath, key) {\n            var constantKey = constantPath.charAt(0).toLowerCase() + constantPath.slice(1) + 'PartialsPath';\n            var constantPartialsPath = _partialsPath + constantPath.toLowerCase() + '/';\n            $provide.constant(constantKey, constantPartialsPath);\n        });\n        $logProvider.debugEnabled($.slatwall.getConfig().debugFlag);\n        $filterProvider.register('likeFilter', function () {\n            return function (text) {\n                if (angular.isDefined(text) && angular.isString(text)) {\n                    return text.replace(new RegExp('%', 'g'), '');\n                }\n            };\n        });\n        $filterProvider.register('truncate', function () {\n            return function (input, chars, breakOnWord) {\n                if (isNaN(chars))\n                    return input;\n                if (chars <= 0)\n                    return '';\n                if (input && input.length > chars) {\n                    input = input.substring(0, chars);\n                    if (!breakOnWord) {\n                        var lastspace = input.lastIndexOf(' ');\n                        //get last space\n                        if (lastspace !== -1) {\n                            input = input.substr(0, lastspace);\n                        }\n                    }\n                    else {\n                        while (input.charAt(input.length - 1) === ' ') {\n                            input = input.substr(0, input.length - 1);\n                        }\n                    }\n                    return input + '...';\n                }\n                return input;\n            };\n        });\n        $httpProvider.interceptors.push('slatwallInterceptor');\n        // route provider configuration\n        $routeProvider.when('/entity/:entityName/', {\n            template: function (params) {\n                var entityDirectiveExists = $injector.has('sw' + params.entityName + 'ListDirective');\n                if (entityDirectiveExists) {\n                    return '<sw-' + params.entityName.toLowerCase() + '-list>';\n                }\n                else {\n                    return '<sw-list></sw-list>';\n                }\n            },\n            controller: 'routerController'\n        }).when('/entity/:entityName/:entityID', {\n            template: function (params) {\n                var entityDirectiveExists = $injector.has('sw' + params.entityName + 'DetailDirective');\n                if (entityDirectiveExists) {\n                    return '<sw-' + params.entityName.toLowerCase() + '-detail>';\n                }\n                else {\n                    return '<sw-detail></sw-detail>';\n                }\n            },\n            controller: 'routerController',\n        }).otherwise({\n            //controller:'otherwiseController'        \n            templateUrl: $.slatwall.getConfig().baseURL + '/admin/client/js/partials/otherwise.html',\n        });\n    }]).run(['$rootScope', '$filter', '$anchorScroll', '$slatwall', 'dialogService', function ($rootScope, $filter, $anchorScroll, $slatwall, dialogService) {\n        $anchorScroll.yOffset = 100;\n        $rootScope.openPageDialog = function (partial) {\n            dialogService.addPageDialog(partial);\n        };\n        $rootScope.closePageDialog = function (index) {\n            dialogService.removePageDialog(index);\n        };\n        $rootScope.loadedResourceBundle = false;\n        $rootScope.loadedResourceBundle = $slatwall.hasResourceBundle();\n        var rbListener = $rootScope.$watch('loadedResourceBundle', function (newValue, oldValue) {\n            if (newValue !== oldValue) {\n                $rootScope.$broadcast('hasResourceBundle');\n                rbListener();\n            }\n        });\n    }]).filter('entityRBKey', ['$slatwall', function ($slatwall) {\n        return function (text) {\n            if (angular.isDefined(text) && angular.isString(text)) {\n                text = text.replace('_', '').toLowerCase();\n                text = $slatwall.getRBKey('entity.' + text);\n                return text;\n            }\n        };\n    }]);\n})(slatwallAdmin || (slatwallAdmin = {}));\n\n//# sourceMappingURL=../modules/slatwalladmin.js.map"],"file":"modules/slatwalladmin.js","sourceRoot":"/source/"}