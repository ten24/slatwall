{"version":3,"names":[],"mappings":"","sources":["directives/orderitem/sworderitems.js"],"sourcesContent":["angular.module('slatwalladmin')\n    .directive('swOrderItems', [\n    '$log',\n    '$timeout',\n    '$location',\n    '$slatwall',\n    'formService',\n    'partialsPath',\n    'paginationService',\n    function ($log, $timeout, $location, $slatwall, formService, partialsPath, paginationService) {\n        return {\n            restrict: 'E',\n            scope: {\n                orderId: \"@\"\n            },\n            templateUrl: partialsPath + \"orderitemrows.html\",\n            link: function (scope, element, attrs) {\n                scope.currentPage = paginationService.getCurrentPage();\n                scope.pageShow = paginationService.getPageShow();\n                scope.pageStart = paginationService.getPageStart;\n                scope.pageEnd = paginationService.getPageEnd;\n                scope.recordsCount = paginationService.getRecordsCount;\n                scope.autoScrollPage = 1;\n                scope.autoScrollDisabled = false;\n                scope.keywords = \"\";\n                scope.loadingCollection = false;\n                var searchPromise;\n                scope.searchCollection = function () {\n                    if (searchPromise) {\n                        $timeout.cancel(searchPromise);\n                    }\n                    searchPromise = $timeout(function () {\n                        $log.debug('search with keywords');\n                        $log.debug(scope.keywords);\n                        //Set current page here so that the pagination does not break when getting collection\n                        paginationService.setCurrentPage(1);\n                        scope.loadingCollection = true;\n                        scope.getCollection();\n                    }, 500);\n                };\n                $log.debug('Init Order Item');\n                $log.debug(scope.orderId);\n                //Setup the data needed for each order item object.\n                scope.getCollection = function () {\n                    if (scope.pageShow === 'Auto') {\n                        scope.pageShow = 50;\n                    }\n                    var columnsConfig = [\n                        {\n                            \"isDeletable\": false,\n                            \"isExportable\": true,\n                            \"propertyIdentifier\": \"_orderitem.orderItemID\",\n                            \"ormtype\": \"id\",\n                            \"isVisible\": true,\n                            \"title\": \"Order Item ID\",\n                            \"isSearchable\": true\n                        },\n                        {\n                            \"title\": \"Order Item Type\",\n                            \"propertyIdentifier\": \"_orderitem.orderItemType\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Order Item Price\",\n                            \"propertyIdentifier\": \"_orderitem.price\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Sku Name\",\n                            \"propertyIdentifier\": \"_orderitem.sku.skuName\",\n                            \"isVisible\": true,\n                            \"ormtype\": \"string\",\n                            \"isSearchable\": true\n                        },\n                        {\n                            \"title\": \"Sku Price\",\n                            \"propertyIdentifier\": \"_orderitem.skuPrice\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Sku ID\",\n                            \"propertyIdentifier\": \"_orderitem.sku.skuID\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"SKU Code\",\n                            \"propertyIdentifier\": \"_orderitem.sku.skuCode\",\n                            \"isVisible\": true,\n                            \"ormtype\": \"string\",\n                            \"isSearchable\": true\n                        },\n                        {\n                            \"title\": \"Product Bundle Group\",\n                            \"propertyIdentifier\": \"_orderitem.productBundleGroup.productBundleGroupID\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Product ID\",\n                            \"propertyIdentifier\": \"_orderitem.sku.product.productID\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Product Name\",\n                            \"propertyIdentifier\": \"_orderitem.sku.product.productName\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Product Type\",\n                            \"propertyIdentifier\": \"_orderitem.sku.product.productType\",\n                            \"isVisible\": true\n                        },\n                        {\n                            \"propertyIdentifier\": \"_orderitem.sku.baseProductType\",\n                            \"persistent\": false\n                        },\n                        {\n                            \"title\": \"Product Description\",\n                            \"propertyIdentifier\": \"_orderitem.sku.product.productDescription\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Event Start Date Time\",\n                            \"propertyIdentifier\": \"_orderitem.sku.eventStartDateTime\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Product Description\",\n                            \"propertyIdentifier\": \"_orderitem.sku.options\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Sku Location\",\n                            \"propertyIdentifier\": \"_orderitem.sku.locations\",\n                            \"isVisible\": true,\n                            \"persistent\": false\n                        },\n                        {\n                            \"title\": \"Subscription Term\",\n                            \"propertyIdentifier\": \"_orderitem.sku.subscriptionTerm.subscriptionTermName\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Subscription Benefits\",\n                            \"propertyIdentifier\": \"_orderitem.sku.subscriptionBenefits\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Qty.\",\n                            \"propertyIdentifier\": \"_orderitem.quantity\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Fulfillment Method Name\",\n                            \"propertyIdentifier\": \"_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Fulfillment ID\",\n                            \"propertyIdentifier\": \"_orderitem.orderFulfillment.orderFulfillmentID\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Fulfillment Method Type\",\n                            \"propertyIdentifier\": \"_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Street Address\",\n                            \"propertyIdentifier\": \"_orderitem.orderFulfillment.pickupLocation.primaryAddress.address\",\n                            \"isVisible\": true,\n                            \"ormtype\": \"string\",\n                            \"isSearchable\": true\n                        },\n                        {\n                            \"title\": \"Street Address\",\n                            \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.streetAddress\",\n                            \"isVisible\": true,\n                            \"ormtype\": \"string\",\n                            \"isSearchable\": true\n                        },\n                        {\n                            \"title\": \"Street Address 2\",\n                            \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.street2Address\",\n                            \"isVisible\": true,\n                            \"ormtype\": \"string\",\n                            \"isSearchable\": true\n                        },\n                        {\n                            \"title\": \"Postal Code\",\n                            \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.postalCode\",\n                            \"isVisible\": true,\n                            \"ormtype\": \"string\",\n                            \"isSearchable\": true\n                        },\n                        {\n                            \"title\": \"City\",\n                            \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.city\",\n                            \"isVisible\": true,\n                            \"ormtype\": \"string\",\n                            \"isSearchable\": true\n                        },\n                        {\n                            \"title\": \"State\",\n                            \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.stateCode\",\n                            \"isVisible\": true,\n                            \"ormtype\": \"string\",\n                            \"isSearchable\": true\n                        },\n                        {\n                            \"title\": \"Country\",\n                            \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.countryCode\",\n                            \"isVisible\": true,\n                            \"ormtype\": \"string\",\n                            \"isSearchable\": true\n                        },\n                        {\n                            \"title\": \"Image File Name\",\n                            \"propertyIdentifier\": \"_orderitem.sku.imageFile\",\n                            \"isVisible\": true,\n                        },\n                        {\n                            \"title\": \"Total\",\n                            \"propertyIdentifier\": \"_orderitem.itemTotal\",\n                            \"persistent\": false\n                        },\n                        {\n                            \"title\": \"Discount Amount\",\n                            \"propertyIdentifier\": \"_orderitem.discountAmount\",\n                            \"persistent\": false\n                        },\n                        {\n                            \"title\": \"Tax Amount\",\n                            \"propertyIdentifier\": \"_orderitem.taxAmount\",\n                            \"persistent\": false\n                        },\n                        {\n                            \"propertyIdentifier\": \"_orderitem.extendedPrice\",\n                            \"persistent\": false\n                        },\n                        {\n                            \"propertyIdentifier\": \"_orderitem.productBundlePrice\",\n                            \"persistent\": false\n                        }\n                    ];\n                    //add attributes to the column config\n                    angular.forEach(scope.attributes, function (attribute) {\n                        var attributeColumn = {\n                            propertyIdentifier: \"_orderitem.\" + attribute.attributeCode,\n                            attributeID: attribute.attributeID,\n                            attributeSetObject: \"orderItem\"\n                        };\n                        columnsConfig.push(attributeColumn);\n                    });\n                    var filterGroupsConfig = [\n                        {\n                            \"filterGroup\": [\n                                {\n                                    \"propertyIdentifier\": \"_orderitem.order.orderID\",\n                                    \"comparisonOperator\": \"=\",\n                                    \"value\": scope.orderId,\n                                },\n                                {\n                                    \"logicalOperator\": \"AND\",\n                                    \"propertyIdentifier\": \"_orderitem.parentOrderItem\",\n                                    \"comparisonOperator\": \"is\",\n                                    \"value\": \"null\",\n                                }\n                            ]\n                        }\n                    ];\n                    var options = {\n                        columnsConfig: angular.toJson(columnsConfig),\n                        filterGroupsConfig: angular.toJson(filterGroupsConfig),\n                        currentPage: scope.currentPage,\n                        pageShow: scope.pageShow,\n                        keywords: scope.keywords\n                    };\n                    //Create a list of order items.\n                    //scope.orderItems = [];\n                    scope.orderAttributes = [];\n                    scope.attributeValues = [];\n                    var orderItemsPromise = $slatwall.getEntity('orderItem', options);\n                    orderItemsPromise.then(function (value) {\n                        scope.collection = value;\n                        var collectionConfig = {};\n                        collectionConfig.columns = columnsConfig;\n                        collectionConfig.baseEntityName = 'SlatwallOrderItem';\n                        collectionConfig.baseEntityAlias = '_orderitem';\n                        scope.orderItems = $slatwall.populateCollection(value.pageRecords, collectionConfig);\n                        for (var orderItem in scope.orderItems) {\n                            $log.debug(\"OrderItem Product Type\");\n                            $log.debug(scope.orderItems);\n                        }\n                        scope.loadingCollection = false;\n                    }, function (value) {\n                        scope.orderItems = [];\n                    });\n                };\n                //get all possible attributes\n                var attributesConfig = [\n                    {\n                        \"propertyIdentifier\": \"_attribute.attributeID\",\n                        \"ormtype\": \"id\",\n                        \"title\": \"attributeID\",\n                    },\n                    {\n                        \"propertyIdentifier\": \"_attribute.attributeCode\",\n                        \"ormtype\": \"string\",\n                        \"title\": \"Attribute Code\",\n                    },\n                    {\n                        \"propertyIdentifier\": \"_attribute.attributeName\",\n                        \"ormtype\": \"string\",\n                        \"title\": \"Attribute Name\",\n                    }\n                ];\n                var attributesFilters = [\n                    {\n                        \"filterGroup\": [\n                            {\n                                \"propertyIdentifier\": \"_attribute.displayOnOrderDetailFlag\",\n                                \"comparisonOperator\": \"=\",\n                                \"value\": true\n                            },\n                            {\n                                \"logicalOperator\": \"AND\",\n                                \"propertyIdentifier\": \"_attribute.activeFlag\",\n                                \"comparisonOperator\": \"=\",\n                                \"value\": true\n                            }\n                        ]\n                    }\n                ];\n                var attributeOptions = {\n                    columnsConfig: angular.toJson(attributesConfig),\n                    filterGroupsConfig: angular.toJson(attributesFilters),\n                    allRecords: true\n                };\n                var attItemsPromise = $slatwall.getEntity('attribute', attributeOptions);\n                attItemsPromise.then(function (value) {\n                    scope.attributes = [];\n                    angular.forEach(value.records, function (attributeItemData) {\n                        //Use that custom attribute name to get the value.\n                        scope.attributes.push(attributeItemData);\n                    });\n                    scope.getCollection();\n                });\n                //Add claim function and cancel function\n                scope.appendToCollection = function () {\n                    if (scope.pageShow === 'Auto') {\n                        $log.debug('AppendToCollection');\n                        if (scope.autoScrollPage < scope.collection.totalPages) {\n                            scope.autoScrollDisabled = true;\n                            scope.autoScrollPage++;\n                            var appendOptions = {};\n                            angular.extend(appendOptions, options);\n                            appendOptions.pageShow = 50;\n                            appendOptions.currentPage = scope.autoScrollPage;\n                            var collectionListingPromise = $slatwall.getEntity('orderItem', appendOptions);\n                            collectionListingPromise.then(function (value) {\n                                scope.collection.pageRecords = scope.collection.pageRecords.concat(value.pageRecords);\n                                scope.autoScrollDisabled = false;\n                            }, function (reason) {\n                                scope.collection.pageRecords = [];\n                            });\n                        }\n                    }\n                };\n            } //<--End link\n        };\n    }\n]);\n\n//# sourceMappingURL=../../directives/orderitem/sworderitems.js.map"],"file":"directives/orderitem/sworderitems.js","sourceRoot":"/source/"}