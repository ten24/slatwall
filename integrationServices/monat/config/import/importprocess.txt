
/*
 *	Deleted all imported accounts: Monat
 *	Account Data Deletes prior to inserts
 *	This process takes about ~2-3 hours start to finish if the db is cooperating
 * 
 *  Accounts can be reimported update the 
 *		slataction=monat:import.importAccounts&pageSize=100&pageStart=1&pageMax=18000
 *	This is by far the fastest way to reimport. If all accounts and related data have been deleted, then
 *  reimporting using create instead of upsert saves 20X's the db calls. This process will run in about
 *  14 hours or > 100,000 records per hour.	
 *
 *	Upsert is great to run to populate new fields etc, but is slower. It takes about 5 times as long to run.
 *
 *  Upsert is great for ongoing imports or daily import/updates. 
 *  All accounts must be imported before running the order import.
 *  
 *  After the accounts are created, set the owner account because not all can be set in the first pass
 *  
 *
 */

Step 1
//how many accounts to delete?
select count(*) from SwAccount where remoteID is not null;

//Mark them all as deleted.
update SwAccount set RemoteID = "DELETED" where remoteID is not null;//1.8 million

Step 2 Delete the relationships
update SwAccountRelationship set childAccountID = null, parentAccountID = null where childAccountID in (select accountID from SwAccount where remoteID = "DELETED")

Step 3. Delete account phone numbers to delete account
select * from SwAccountPhoneNumber where accountID in (select accountID from SwAccount where remoteID = "DELETED");
update SwAccountPhoneNumber set accountID = null where accountID in (select accountID from SwAccount where remoteID = "DELETED");
update SwAccount set primaryPhoneNumberID = null where remoteID="DELETED";
delete from SwAccountPhoneNumber where accountID is null;

Step 4. Delete account emails to delete account
select * from SwAccountEmailAddress where accountID in (select accountID from SwAccount where remoteID = "DELETED");
update SwAccountEmailAddress set accountID = null where accountID in (select accountID from SwAccount where remoteID = "DELETED");
delete from SwAccountEmailAddress where accountID in (select accountID from SwAccount where remoteID = "DELETED");

Step 5. Delete Account Addresses related data
select * from SwAccountAddress where accountID in (select accountID from SwAccount where remoteID = "DELETED");
update SwAccountAddress set remoteID = "DELETED" where accountID in (select accountID from SwAccount where remoteID = "DELETED");

update SwAddress set remoteID = 'DELETED' where  addressID in (
    select addressID from SwAccountAddress where remoteID = "DELETED"
);
update SwAccountAddress set addressID = null, accountID = null where remoteID = "DELETED";

update SwAccountAddress set addressID = null, accountID = null where remoteID = "DELETED";
update SwAccountAddress set accountID = null where accountID in (select accountID from SwAccount where remoteID = "DELETED");

Step 6. Orphan the order and fulfillments shipping and billing addresses

//Order
update SwOrder set shippingAccountAddressID = null where shippingAccountAddressID in (select accountAddressID as shippingAccountAddressID from SwAccountAddress where remoteID = "DELETED")
update SwOrder set billingAccountAddressID = null where billingAccountAddressID in (select accountAddressID as billingAccountAddressID from SwAccountAddress where remoteID = "DELETED")

//Fulfillment
update SwOrderFulfillment set accountAddressID = null where accountAddressID in (select accountAddressID from SwAccountAddress where remoteID = "DELETED")
update SwOrderFulfillment set shippingAddressID = null where shippingAddressID in (select addressID as shippingAddressID from SwAddress where remoteID = "DELETED")

//Payment
update SwAccountPaymentMethod set billingAddressID = null where billingAddressID in (select addressID as billingAddressID from SwAddress where remoteID = "DELETED")
update SwOrderPayment set billingAccountAddressID = null where billingAccountAddressID in (select accountAddressID as billingAccountAddressID from SwAccountAddress where remoteID = "DELETED")
update swaccountpaymentmethod set billingAccountAddressID = null where billingAccountAddressID in (select accountAddressID as billingAccountAddressID from SwAccountAddress where remoteID = "DELETED")

//OrderTemplate
update swordertemplate set billingAccountAddressID = null where billingAccountAddressID in (select accountAddressID as billingAccountAddressID from SwAccountAddress where remoteID = "DELETED")
update SwOrderTemplate set billingAccountAddressID = null where billingAccountAddressID in (select accountAddressID from SwAccountAddress where accountID is null) 
update swordertemplate set shippingAccountAddressID = null where shippingAccountAddressID in (select accountAddressID as shippingAccountAddressID from SwAccountAddress where remoteID = "DELETED")
update swordertemplate set accountID = null where accountID in (select accountID from SwAccount where remoteID = "DELETED")

//Order
update sworder set accountID = null where accountID in (select accountID from SwAccount where remoteID = "DELETED")

//Account and priceGroup
update SwAccount set ownerAccountID = null where remoteID = "DELETED";
update swaccountauthentication set accountID = null where accountID in (select accountID from SwAccount where remoteID = "DELETED")
update SwSession set accountAuthenticationID = null where accountAuthenticationID in (select accountAuthenticationID from SwAccountAuthentication where accountID is null)
update SwAccountRelationship set parentAccountID = null, childAccountID = null where parentAccountID in (select accountID as parentAccountID from SwAccount where remoteID = "DELETED")
update SwAccountPaymentMethod set accountID = null where accountID in (select accountID from SwAccount where remoteID = "DELETED");
update SwOrderPayment set billingAccountAddressID = null where billingAccountAddressID in (select accountAddressID from SwAccountAddress where accountID is null) 
update SwOrderFulfillment set accountAddressID = null where accountAddressID in (select accountAddressID from SwAccountAddress where accountID is null) 
update SwOrder set shippingAccountAddressID = null where shippingAccountAddressID in (select accountAddressID as shippingAccountAddressID from SwAccountAddress where accountID is null)

Step 7. Delete the address and account address
delete from SwAccountPriceGroup where accountID in (select accountID from SwAccount where remoteID = "DELETED")
delete from SwAccountAuthentication where accountID is null;
delete from SwAddress where remoteid = "DELETED"; 
delete from SwAccountAddress where remoteid = "DELETED";
delete from SwAccountRelationship where childAccountID is null
deleted from SwAccountPaymentMethod where accountID is null;

Step 8. Delete the accounts
delete from swAccount where remoteID = "DELETED";

Run the import (About 20 hours)


Set the owner Accounts (about 3 minutes)
update SwAccount a 
INNER JOIN SwAccount aa on a.sponsorIDNumber = aa.accountNumber
set a.ownerAccountID =  aa.accountID  
where a.remoteID is not null 
    and a.sponsorIDNumber is not null 
    and a.ownerAccountID is null;
	
	
Create the account relationships that couldn't be created (about 5 minutes)
REPLACE INTO SwAccountRelationship (accountRelationshipID, parentAccountID, childAccountID)
SELECT 
   accountID as accountRelationshipID,
   accountID as childAccountID,
   ownerAccountID as parentAccountID
FROM 
  SwAccount
WHERE
   remoteID is not null and ownerAccountID is not null;


//Make sure the priceGroups are up to date
//customer, 317753
REPLACE INTO SwAccountPriceGroup (accountID, priceGroupID)
SELECT 
   accountID, 
   'c540802645814b36b42d012c5d113745' as priceGroupID
FROM 
  SwAccount
WHERE
   accountType = "Customer" and remoteID is not null;

//vip 1086441
REPLACE INTO SwAccountPriceGroup (accountID, priceGroupID)
SELECT 
   accountID, 
   '84a7a5c187b04705a614eb1b074959d4' as priceGroupID
FROM 
  SwAccount
WHERE
   accountType = "VIP" and remoteID is not null;

//mp-216509
REPLACE INTO SwAccountPriceGroup (accountID, priceGroupID)
SELECT 
   accountID, 
   '045f95c3ab9d4a73bcc9df7e753a2080' as priceGroupID
FROM 
  SwAccount
WHERE
   accountType = "MarketPartner" and remoteID is not null;



